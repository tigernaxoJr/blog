<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8s on YuCheng&#39;s Site</title>
    <link>https://0.0.0.0:1313/tags/k8s/</link>
    <description>Recent content in K8s on YuCheng&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Oct 2021 11:11:00 +0800</lastBuildDate><atom:link href="https://0.0.0.0:1313/tags/k8s/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>[DevOps] 初學開發運維-0? 微服務框架</title>
      <link>https://0.0.0.0:1313/posts/devops/learn99_microservice/</link>
      <pubDate>Fri, 15 Oct 2021 11:11:00 +0800</pubDate>
      
      <guid>https://0.0.0.0:1313/posts/devops/learn99_microservice/</guid>
      <description>&lt;p&gt;且因為微服務開發框架從根本解決架構管理的複雜問題，
透過自動化流程將運維工程師從瑣碎日常事務當中解放出來，
，讓開發人員可以更專注於應用開發、其他更有價值的工作、學習新技術。&lt;/p&gt;
&lt;h1 id=&#34;硬體&#34;&gt;硬體&lt;/h1&gt;
&lt;h2 id=&#34;硬體資源擴充與服務執行環境隔離&#34;&gt;硬體資源擴充與服務執行環境隔離&lt;/h2&gt;
&lt;p&gt;傳統運維的手法？ shell?&lt;/p&gt;
&lt;h1 id=&#34;cicd&#34;&gt;CICD&lt;/h1&gt;
&lt;p&gt;上程式的流程自動化&lt;/p&gt;
&lt;p&gt;導入現代化 DevOps 帶來什麼好處
方便
安全問題：工程師將編譯的檔案直接放上伺服器，但是程式碼沒有進入版控，會造成混亂。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20120491/ironman/2538&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第 11 屆 iThome 鐵人賽-就是「懶」才更需要重視DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/tw-zh/cloud/learn/microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;何謂微服務 - 台灣|IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yunchenli.medium.com/%E5%BE%9E%E5%96%AE%E9%AB%94%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8B%99-12e206805089&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;medium - 從單體到微服務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mulesoft.com/resources/api/microservices-vs-monolithic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microservices vs Monolithic Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki - Multitier architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Service-level_objective&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki - Service-level objective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20060041/ironman/1164&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 iT 邦幫忙鐵人賽 - Container 容器三十問&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[DevOps] 初學開發運維-01 DevOps 簡介</title>
      <link>https://0.0.0.0:1313/posts/devops/learn01_introduction/</link>
      <pubDate>Fri, 15 Oct 2021 11:11:00 +0800</pubDate>
      
      <guid>https://0.0.0.0:1313/posts/devops/learn01_introduction/</guid>
      <description>&lt;h1 id=&#34;devops&#34;&gt;DevOps&lt;/h1&gt;
&lt;p&gt;DevOps，開發運維，也就是自動化&lt;strong&gt;開發(Development)&lt;/strong&gt;、&lt;strong&gt;運維(Operations)&lt;/strong&gt;、&lt;strong&gt;測試(Quality Assurance)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;傳統上開發與運維人員各自作業，
開發人員扮演改變軟體(不論是功能、架構)腳色；
但運維人員最害怕的就是軟體部屬造成的系統不穩定。
而無論在組織內部開發與運維人員是否由同一人擔任，
每次程式開發上線大同小異的作業流程(測試、部屬&amp;hellip;)都需要各自分配人力資源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開發：由程式設計師開發程式。&lt;/li&gt;
&lt;li&gt;測試：開發到一個階段由開發者或測試人員測試、撰寫測試報告。&lt;/li&gt;
&lt;li&gt;部屬：寫腳本建立程式環境、部屬程式。&lt;/li&gt;
&lt;li&gt;運維：軟體環境調校和軟體維護作業。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DevOps 結合開發與運維，以自動化串聯開發(交付軟體改變架構/功能)和運維(維持穩定性)中間的流程(包含測試、部屬)，
達成自動化測試、自動化部屬，
大幅縮短開發到交付部屬上線的時間，從而大幅減少投注的人力資源成本，也使產品可更精準快速回應市場需求，
讓整個過程變得更快速可靠。&lt;/p&gt;
&lt;h1 id=&#34;cicd&#34;&gt;CICD&lt;/h1&gt;
&lt;p&gt;將版本控制、自動化測試整合到自動化開發-自動化部屬中間的流程，
使得程式碼提交之後可以在雲端環境自動建置應用程式、執行單元測試，
這個流程稱為做持續交付(CI; Coutinuous Integration)/持續部屬(CD; Coutinuous Deployment)。
統一在雲端建置的好處是可以避免開發人員的環境可以執行，線上卻不行的情況 。&lt;/p&gt;
&lt;p&gt;上程式的流程自動化&lt;/p&gt;
&lt;p&gt;導入現代化 DevOps 帶來什麼好處
方便
安全問題：工程師將編譯的檔案直接放上伺服器，但是程式碼沒有進入版控，會造成混亂。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20120491/ironman/2538&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第 11 屆 iThome 鐵人賽-就是「懶」才更需要重視DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/tw-zh/cloud/learn/microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;何謂微服務 - 台灣|IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yunchenli.medium.com/%E5%BE%9E%E5%96%AE%E9%AB%94%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8B%99-12e206805089&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;medium - 從單體到微服務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mulesoft.com/resources/api/microservices-vs-monolithic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microservices vs Monolithic Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki - Multitier architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[DevOps] 初學開發運維-02 容器</title>
      <link>https://0.0.0.0:1313/posts/devops/learn02_container/</link>
      <pubDate>Fri, 15 Oct 2021 11:11:00 +0800</pubDate>
      
      <guid>https://0.0.0.0:1313/posts/devops/learn02_container/</guid>
      <description>&lt;p&gt;DevOps 的關鍵就是容器。&lt;/p&gt;
&lt;h1 id=&#34;容器container&#34;&gt;容器(container)&lt;/h1&gt;
&lt;p&gt;目前最主流的容器軟體是 Docker，容器管理平台是 K8S(Kubernetes)&lt;/p&gt;
&lt;h2 id=&#34;容器軟體&#34;&gt;容器軟體&lt;/h2&gt;
&lt;p&gt;容器軟體用來運行容器。
部署容器啟要的資源由容器需要的 CPU、RAM、啟動數量決定，&lt;/p&gt;
&lt;h2 id=&#34;容器管理平台&#34;&gt;容器管理平台&lt;/h2&gt;
&lt;p&gt;容器管理平台將每一個可運行容器的 OS(aka Docker 主機) 視為節點(Node)，每個節點的硬體資源可能有所不同，
容器管理平台，管理、調度多個節點的可用資源，讓容器部屬在節點上，
並&lt;strong&gt;掌控&lt;/strong&gt;、&lt;strong&gt;維持&lt;/strong&gt;容器的運行狀態。
其中最重要的是維持容器的運行狀態，又稱為維持服務級別目標(SLO; Service Level Objective)。
透過這一的機制，使用者只需要告訴容器管理平台容器要運行的容器，不需理會實際各節點資源使用情形、要部屬在哪個節點等等細節&amp;hellip;&lt;/p&gt;
&lt;p&gt;講白話就是，K8S 根據資源把應用程式適當部屬在不同 OS 內的 Docker，並管理應用程式的運營狀態，在應用程式發生錯誤時進行重啟等等措施。&lt;/p&gt;
&lt;h1 id=&#34;硬體&#34;&gt;硬體&lt;/h1&gt;
&lt;h2 id=&#34;硬體資源擴充與服務執行環境隔離&#34;&gt;硬體資源擴充與服務執行環境隔離&lt;/h2&gt;
&lt;p&gt;傳統運維的手法？ shell?&lt;/p&gt;
&lt;h1 id=&#34;cicd&#34;&gt;CICD&lt;/h1&gt;
&lt;p&gt;上程式的流程自動化&lt;/p&gt;
&lt;p&gt;導入現代化 DevOps 帶來什麼好處
方便
安全問題：工程師將編譯的檔案直接放上伺服器，但是程式碼沒有進入版控，會造成混亂。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20120491/ironman/2538&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第 11 屆 iThome 鐵人賽-就是「懶」才更需要重視DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/tw-zh/cloud/learn/microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;何謂微服務 - 台灣|IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yunchenli.medium.com/%E5%BE%9E%E5%96%AE%E9%AB%94%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8B%99-12e206805089&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;medium - 從單體到微服務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mulesoft.com/resources/api/microservices-vs-monolithic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microservices vs Monolithic Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki - Multitier architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Service-level_objective&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki - Service-level objective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20060041/ironman/1164&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 iT 邦幫忙鐵人賽 - Container 容器三十問&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    
  </channel>
</rss>
