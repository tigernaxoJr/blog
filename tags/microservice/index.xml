<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservice on YuCheng&#39;s Site</title>
    <link>https://0.0.0.0:1313/tags/microservice/</link>
    <description>Recent content in Microservice on YuCheng&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Oct 2021 11:11:00 +0800</lastBuildDate><atom:link href="https://0.0.0.0:1313/tags/microservice/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>[System] 單體式架構 vs 微服務架構</title>
      <link>https://0.0.0.0:1313/posts/software/arch-microservice/</link>
      <pubDate>Mon, 18 Oct 2021 11:11:00 +0800</pubDate>
      
      <guid>https://0.0.0.0:1313/posts/software/arch-microservice/</guid>
      <description>&lt;h1 id=&#34;單體式與微服務架構&#34;&gt;單體式與微服務架構&lt;/h1&gt;
&lt;h2 id=&#34;單體式架構&#34;&gt;單體式架構&lt;/h2&gt;
&lt;p&gt;以前後端分離的網頁應用程式為例，傳統上大多採用軟體工程&lt;strong&gt;多層式架構(Multitier Architecture)&lt;strong&gt;中的&lt;/strong&gt;三層式架構(Three-Tire-Architecture)&lt;/strong&gt;，組成如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data tier&lt;/strong&gt;: &lt;strong&gt;資料庫(DB)&lt;/strong&gt;，有資料表(Table)儲存應用程式資訊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logic tier&lt;/strong&gt;: 就是&lt;strong&gt;後端(Backend)&lt;/strong&gt;、應用程式伺服器 (AP Server)，負責和前端交換資料、存取資料庫。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presentation tier&lt;/strong&gt;: 就是&lt;strong&gt;前端(Frontend)&lt;/strong&gt;，提供靜態資源，負責和使用者互動、和後端交換資料。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微服務架構&#34;&gt;微服務架構&lt;/h2&gt;
&lt;p&gt;隨著系統愈來愈複雜，為了可維護性、擴充性、開發敏捷性，
透過軟體工程的手段將一個應用程式下&lt;strong&gt;緊密連結(耦合性強)&lt;strong&gt;的服務拆成許多&lt;/strong&gt;連結鬆散&lt;/strong&gt;且可&lt;strong&gt;獨立部署&lt;/strong&gt;的&lt;strong&gt;小型服務&lt;/strong&gt;，
小型服務之間透過 HTTP、gRPC&amp;hellip; 等通訊協定串聯訊息，構成複雜的應用程式。
這就是微服務架構。&lt;/p&gt;
&lt;h1 id=&#34;服務環境&#34;&gt;服務環境&lt;/h1&gt;
&lt;h2 id=&#34;單體式vm&#34;&gt;單體式(VM)&lt;/h2&gt;
&lt;p&gt;一般來說單體式架構較常以 &lt;strong&gt;虛擬機(Virtual Machine)&lt;/strong&gt; 的方式來建立單體式架構的各層環境，
VM 將服務從作業系統層面進行隔離(也就是&lt;strong&gt;不同服務有各自獨立的作業系統&lt;/strong&gt;)，
VM 相較於實體機器較能夠彈性控管分配資源，
但在啟動速度、硬體資源耗用等等&amp;hellip;都需要考慮到各自的作業系統。&lt;/p&gt;
&lt;h2 id=&#34;微服務容器&#34;&gt;微服務(容器)&lt;/h2&gt;
&lt;p&gt;實現微服務架構的核心技術是&lt;strong&gt;容器(Container)&lt;/strong&gt;，
容器將執行環境在應用程式層面上隔離，&lt;strong&gt;不同服務共用同一個作業系統&lt;/strong&gt;，
相較於傳統單體式架構使用的 VM 技術，容器的優點是耗用的資源少，啟動速度快(因為不用為每個服務建立一個OS)。&lt;/p&gt;
&lt;h1 id=&#34;開發模式&#34;&gt;開發模式&lt;/h1&gt;
&lt;h2 id=&#34;單體式&#34;&gt;單體式&lt;/h2&gt;
&lt;p&gt;由於所有邏輯都存在同一個服務，
因此開發者通常會被要求了解整個應用程式的運作邏輯，但那是一件很困難(或說不可能)的事，
且會占開發者工作很大一部分，嚴重影響開發效率。
而因為服務都綁定在同一個AP上，使用不同的技術棧進行開發會非常麻煩，所以開發能選擇的工具受到限制&lt;/p&gt;
&lt;h2 id=&#34;微服務&#34;&gt;微服務&lt;/h2&gt;
&lt;p&gt;開發者不需要了解整個應用澄式的運作邏輯，可專注於自己開發的部分
由於服務隔離的特性，不同服務容易使用不同的技術棧進行開發，
可以把任務分派到不同團隊
敏捷式(agile)開發
單體式  瀑布(waterfall)開發模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;敏捷性&lt;/strong&gt;：拆成為服務的專案更適合敏捷開發，也因為拆成可獨立部屬的小型服務，負責不同小型服務的團隊可以使用不同的技術棧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;部屬與擴展&#34;&gt;部屬與擴展&lt;/h1&gt;
&lt;h2 id=&#34;單體式-1&#34;&gt;單體式&lt;/h2&gt;
&lt;p&gt;囿於單體式架構的侷限，每當更新版本或修復Bug的時候，
無論是否涉及的商業邏輯範圍大小，
都需要將整個前/後端應用程式重新編譯、部屬，
這對擴展 scaling、負載平衡 Loading balance 都會是一項挑戰。&lt;/p&gt;
&lt;p&gt;傳統應用程式負載增加時，應用程式整體架構可以進行如下調整，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;橫向擴展&lt;/strong&gt;：增加&lt;strong&gt;同一環境&lt;/strong&gt;(ex: AP Server)上&lt;strong&gt;可用硬體資源&lt;/strong&gt;(CPU、MEMORY、Disk&amp;hellip;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;縱向擴展&lt;/strong&gt;：增加&lt;strong&gt;提供服務的環境&lt;/strong&gt; (ex: 第二台 AP Server 等等&amp;hellip;)，好處是有了&lt;strong&gt;備援機制&lt;/strong&gt;，可以達成&lt;strong&gt;負載平衡&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不論環境是由實體機器/VM/容器所建立，一旦所有的服務都在同一個環境內執行()，就會有下面的缺點：&lt;/p&gt;</description>
    </item>
    
    
  </channel>
</rss>
