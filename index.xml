<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>YuCheng's Site</title><link>https://blog.tigernaxo.com/</link><description>Recent content on YuCheng's Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 10 Jun 2025 10:34:00 +0800</lastBuildDate><atom:link href="https://blog.tigernaxo.com/index.xml" rel="self" type="application/rss+xml"/><item><title>[開發] API-first approach</title><link>https://blog.tigernaxo.com/posts/software/dev-api-first/</link><pubDate>Tue, 10 Jun 2025 10:34:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/dev-api-first/</guid><description>&lt;h2 id="高效協作的基石深入理解-api-first-開發方法">高效協作的基石：深入理解 API-First 開發方法&lt;/h2>
&lt;p>在現代軟體開發的浪潮中，追求更快的交付速度、更敏捷的反應能力，以及更優質的使用者體驗，是所有團隊的共同目標。傳統的瀑布式開發流程，因其僵化和漫長的等待週期，已逐漸無法滿足市場的快速變化。為此，「API-First」開發方法應運而生，它不僅僅是一種技術實踐，更是一種推動團隊高效協作的開發哲學。&lt;/p>
&lt;p>本文將深入探討 API-First 的核心概念，比較其與傳統開發流程的差異，分析其優劣，並提供在前端專案中實踐 API Mock 的具體教學。&lt;/p>
&lt;h3 id="什麼是-api-first-approach">什麼是 API-First Approach？&lt;/h3>
&lt;p>&lt;strong>API-First (API 優先)&lt;/strong> 是一種軟體開發策略，其核心精神是&lt;strong>將 API (應用程式介面) 視為整個產品的核心與一等公民 (First-class Citizen)。&lt;/strong>&lt;/p>
&lt;p>在開發啟動之初，不再是先設計資料庫或撰寫後端邏輯，而是由前後端團隊，甚至包含產品、設計團隊，共同協商並定義出一份清晰、嚴謹的 &lt;strong>API 契約 (API Contract)&lt;/strong>。這份契約詳細描述了 API 的路由、請求方法、參數、數據格式以及回傳的響應內容。&lt;/p>
&lt;p>這份契約一旦確立，就成為前後端各自開發的共同依據。後端團隊依照契約實作業務邏輯與資料庫；前端團隊則可以立即使用這份契約，搭配 Mock (模擬) 技術來打造使用者介面，無需等待後端 API 的實際完成。&lt;/p>
&lt;p>最常用來定義 API 契約的工具是 &lt;strong>OpenAPI 規範 (前身為 Swagger)&lt;/strong>。它提供了一套標準化的格式 (通常是 YAML 或 JSON)，讓人類和機器都能輕鬆理解 API 的功能與結構。&lt;/p>
&lt;blockquote>
&lt;p>核心理念： 先定義好軟體元件之間如何溝通 (API)，再各自實現內部邏輯。&lt;/p>&lt;/blockquote>
&lt;h2 id="典範轉移api-first-vs-傳統開發流程">典範轉移：API-First vs. 傳統開發流程&lt;/h2>
&lt;p>為了更清晰地理解 API-First 帶來的變革，我們從幾個關鍵維度來比較它與傳統開發流程的差異。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比較維度&lt;/th>
&lt;th>傳統開發流程 (Database-First)&lt;/th>
&lt;th>API-First 開發流程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>開發啟動點&lt;/strong>&lt;/td>
&lt;td>&lt;strong>資料庫先行&lt;/strong>：設計資料庫結構 -&amp;gt; 開發後端 API -&amp;gt; 前端串接。&lt;/td>
&lt;td>&lt;strong>契約先行&lt;/strong>：前後端共同定義 API 契約。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>團隊依賴性&lt;/strong>&lt;/td>
&lt;td>&lt;strong>強烈的上下游依賴&lt;/strong>：前端強烈依賴後端，後端依賴資料庫設計。任何上游變動都會造成下游阻塞。&lt;/td>
&lt;td>&lt;strong>並行開發&lt;/strong>：前後端解耦，可同時進行開發。前端依賴的是「契約」，而非「已完成的後端程式」。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>前後端溝通&lt;/strong>&lt;/td>
&lt;td>&lt;strong>後端主導&lt;/strong>：後端開發完 API 後，提供給前端使用，前端常處於被動接收的角色。溝通多發生在整合階段。&lt;/td>
&lt;td>&lt;strong>協同合作&lt;/strong>：開發初期就共同協商 API 規格。前端甚至能主導介面規格，因為他們最了解介面需要什麼資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>迭代速度&lt;/strong>&lt;/td>
&lt;td>&lt;strong>緩慢且僵化&lt;/strong>：任何需求變更都可能需要從資料庫層級開始修改，牽一髮動全身，迭代週期長。&lt;/td>
&lt;td>&lt;strong>快速且敏捷&lt;/strong>：前端可以基於 Mock 數據快速迭代 UI/UX，不受後端進度限制，非常適合敏捷開發中的快速原型和頻繁調整。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>錯誤發現時機&lt;/strong>&lt;/td>
&lt;td>&lt;strong>後期整合階段&lt;/strong>：許多介面不匹配、資料格式錯誤的問題，直到最後整合測試時才會浮現，修復成本高。&lt;/td>
&lt;td>&lt;strong>開發初期&lt;/strong>：由於 API 契約先行，規格不一致的問題在設計階段就被解決。介面和使用者體驗問題也能在早期透過原型被發現。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="api-first-的優點與挑戰">API-First 的優點與挑戰&lt;/h2>
&lt;p>採用 API-First 方法能帶來顯著的好處，但同時也伴隨著一些需要克服的挑戰。&lt;/p></description></item><item><title>[防火牆] 地理位置規則(GeoIP)</title><link>https://blog.tigernaxo.com/posts/firewall/geoip/</link><pubDate>Tue, 03 Jun 2025 15:52:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/firewall/geoip/</guid><description>&lt;p>最近我在 GCP 上發現一個惱人的問題：中南美洲的網路流量，竟然每個月讓我多噴了好幾十塊台幣！對於我這種「免費仔」來說，這簡直是不能接受的額外開銷。雖然金額不大，但積少成多也是錢啊！&lt;/p>
&lt;h2 id="為什麼要擋流量">為什麼要擋流量？&lt;/h2>
&lt;p>你可能會問，區區幾十塊台幣也要計較？當然要！特別是當這些流量不是你預期的合法訪客時。很多時候，來自特定地區的流量可能是：&lt;/p>
&lt;ul>
&lt;li>惡意掃描：網路攻擊者在尋找網站漏洞。&lt;/li>
&lt;li>DDoS 攻擊嘗試：分散式阻斷服務攻擊的前奏或小規模嘗試。&lt;/li>
&lt;li>殭屍網路活動：受感染的電腦發出的無意義流量。
這些流量不僅浪費你的錢，還會增加你 GCP 主機的負擔，影響正常服務的效能和穩定性。對我們這些斤斤計較流量費用的使用者來說，擋掉不必要的流量，是省錢、維護效能和安全的好方法。&lt;/li>
&lt;/ul>
&lt;h2 id="gcp-ngfw-雖好但口袋不夠深">GCP NGFW 雖好，但口袋不夠深？&lt;/h2>
&lt;p>GCP 自家的 Cloud Next Generation Firewall (NGFW) 確實提供了強大的地理位置封鎖功能。透過 NGFW，你可以輕鬆設定規則，阻擋來自特定國家或地區的 IP 流量。這聽起來很棒，對吧？&lt;/p>
&lt;p>然而，問題就在於：GCP NGFW 是要收費的！ 它通常會依據你處理的流量來計費，這對於想要最大化免費額度，或是對預算極為敏感的「免費仔」來說，並不是一個理想的方案。我們需要一個開源且免費的替代方案。&lt;/p>
&lt;h2 id="開源方案iptables--geolite2-的完美組合">開源方案：iptables + GeoLite2 的完美組合&lt;/h2>
&lt;p>別擔心，我們還是有辦法！對於運行 Linux 主機或 VM 的使用者來說，最直接、最經濟實惠的方法就是利用 Linux 內建的防火牆工具 iptables (或新一代的 nftables)，並結合 MaxMind GeoLite2 資料庫。&lt;/p>
&lt;ul>
&lt;li>iptables/nftables：這是 Linux 核心層級的防火牆，可以直接在 IP 層面對流量進行精準的控制。這表示在流量到達你的應用程式之前，就可以直接被阻擋掉，達到最佳的省錢效果。&lt;/li>
&lt;li>MaxMind GeoLite2 資料庫：這是一個免費的地理位置 IP 資料庫。它能告訴你每個 IP 位址的歸屬國家或地區，是我們判斷是否需要阻擋的依據。&lt;/li>
&lt;/ul>
&lt;h2 id="自動化腳本省時省力告別手動設定">自動化腳本：省時省力，告別手動設定&lt;/h2>
&lt;p>手動去找出中南美洲的所有 IP 範圍，然後一條一條地加到防火牆規則裡？光是想想都覺得頭皮發麻！幸好，開源社群已經為我們準備了貼心的工具。&lt;/p>
&lt;p>我發現 &lt;code>friendly-bits/geoip-shell&lt;/code> 這個 GitHub 專案是個非常棒的選擇。它能幫助你：&lt;/p>
&lt;ul>
&lt;li>自動生成防火牆規則：根據 MaxMind GeoLite2 資料庫，這個腳本會自動產生針對特定國家或地區的 IP 封鎖規則，省去你手動查詢和輸入的麻煩。&lt;/li>
&lt;li>排程自動更新 IP：IP 位址的地理歸屬會隨時間變化。geoip-shell 支援設定自動排程，定期更新 GeoLite2 資料庫，並重新生成防火牆規則，確保你的封鎖列表始終是最新的，讓你的防禦滴水不漏。
藉由這個組合，我們就能在不花一毛錢的情況下，精確地阻擋來自中南美洲的流量，有效控制你的 GCP 費用，同時讓你的主機跑得更輕盈、更安全。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash"># 安裝 geoip-shell
# 根據其 GitHub 說明進行安裝
# 生成封鎖南美洲的規則
sudo geoip-shell block --countries AR,BO,BR,CL,CO,EC,GF,GY,PY,PE,SR,UY,VE
&lt;/code>&lt;/pre></description></item><item><title>[OpenWrt] 在 linux 中使用 Docker 跑 OpenWrt</title><link>https://blog.tigernaxo.com/posts/other/openwrt-docker/</link><pubDate>Fri, 19 Jan 2024 08:00:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/openwrt-docker/</guid><description>&lt;p>定義一個 Network，叫做 MYNAT，關閉 DHCP。&lt;/p>
&lt;p>新增一部虛擬機，定義兩張網卡：&lt;/p>
&lt;ol>
&lt;li>預設 NAT：用來模擬 ISP 裝置。(enp0s3)&lt;/li>
&lt;li>MYNAT：用來建構內網。(enp0s8)&lt;/li>
&lt;/ol>
&lt;h3 id="開啟網卡-promisc">開啟網卡 promisc&lt;/h3>
&lt;pre>&lt;code>ip link set enp0s3 promisc on
ip link set enp0s8 promisc on
&lt;/code>&lt;/pre>
&lt;p>###. 建立 docker 網路
查詢路由所在網段、遮罩、閘道器。&lt;/p>
&lt;pre>&lt;code class="language-bash">ip route show dev enp0s3
&lt;/code>&lt;/pre>
&lt;p>結果：軟路由所在網段、遮罩為 &lt;code>10.0.2.0/24&lt;/code>、閘道器 &lt;code>10.0.2.2&lt;/code>。&lt;/p>
&lt;pre>&lt;code>default via 10.0.2.2 proto dhcp src 10.0.2.15 metric 1024
10.0.2.0/24 proto kernel scope link src 10.0.2.15 metric 1024
10.0.2.2 proto dhcp scope link src 10.0.2.15 metric 1024
192.73.141.230 via 10.0.2.2 proto dhcp src 10.0.2.15 metric 1024
192.73.144.230 via 10.0.2.2 proto dhcp src 10.0.2.15 metric 1024
&lt;/code>&lt;/pre>
&lt;p>創建 docker 網路&lt;/p></description></item><item><title>[.NET] C# 將 PDF 轉為列印文件送出至印表機</title><link>https://blog.tigernaxo.com/posts/dotnet/pdf-print/</link><pubDate>Fri, 05 Jan 2024 11:11:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/pdf-print/</guid><description>&lt;p>PdfiumViewer 是開源的 C# 控件，用於顯示和列印 PDF 文件。它基於 Chromium 瀏覽器使用的 PDF 渲染引擎 Pdfium 所開發。
而Pdfium 是 Chromium 瀏覽器使用的 PDF 渲染引擎，由 Google 和 Mozilla 共同開發。它是一個開放原始碼的函式庫，用於 PDF 文件的解碼、渲染和編輯。
PdfiumViewer 提供以下功能：&lt;/p>
&lt;ul>
&lt;li>顯示 PDF 文件的所有頁面。&lt;/li>
&lt;li>支持縮放、旋轉、翻頁等操作。&lt;/li>
&lt;li>支持列印 PDF 文件。&lt;/li>
&lt;/ul>
&lt;p>在 c# 中使用 PdfiumViewer 可以將 PDF 轉換為列印文件，送至印表機進行列印。&lt;/p>
&lt;ol>
&lt;li>安裝 Nuget 套件：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://www.nuget.org/packages/PdfiumViewer/2.13.0" target="_blank" rel="noopener">PdfiumViewer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nuget.org/packages/PdfiumViewer.Native.x86.v8-xfa/" target="_blank" rel="noopener">PdfiumViewer.Native.x86.v8-xfa&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>引用&lt;/p>
&lt;pre>&lt;code class="language-c#">using PdfiumViewer;
using System.Drawing.Printing;
using System.IO;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>程式範例&lt;/p>
&lt;ul>
&lt;li>從記憶體列印：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-c#">var pdfBytes = new byte[] { }; // todo: 取得 PDF by docid
var printerName = &amp;quot;&amp;quot;; // todo 取得印表機名稱
// 列印
using (MemoryStream memoryStream = new MemoryStream(pdfBytes))
{
var pageSettings = new PageSettings() { Margins = new Margins(0, 0, 0, 0) };
var printerSettings = new PrinterSettings();
if (!string.IsNullOrEmpty(printerName)) printerSettings.PrinterName = printerName;
using (var document = PdfDocument.Load(memoryStream))
{
using (PrintDocument printDocument = document.CreatePrintDocument())
{
printDocument.PrinterSettings = printerSettings;
printDocument.DefaultPageSettings = pageSettings;
printDocument.PrintController = new StandardPrintController();
printDocument.Print();
}
}
}
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>從檔案列印：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-c#">var file = &amp;quot;&amp;quot;; // todo 取得檔案路徑
var printerName = &amp;quot;&amp;quot;; // todo 取得印表機名稱
// 列印
var pageSettings = new PageSettings() { Margins = new Margins(0, 0, 0, 0) };
var printerSettings = new PrinterSettings();
if (!string.IsNullOrEmpty(printerName)) printerSettings.PrinterName = printerName;
using (var document = PdfDocument.Load(file))
{
using (PrintDocument printDocument = document.CreatePrintDocument())
{
printDocument.PrinterSettings = printerSettings;
printDocument.DefaultPageSettings = pageSettings;
printDocument.PrintController = new StandardPrintController();
printDocument.Print();
}
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://github.com/pvginkel/PdfiumViewer" target="_blank" rel="noopener">Github-PdfiumViewer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nuget.org/packages/PdfiumViewer/2.13.0" target="_blank" rel="noopener">Nuget-PdfiumViewer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nuget.org/packages/PdfiumViewer.Native.x86.v8-xfa/" target="_blank" rel="noopener">Nuget-PdfiumViewer.Native.x86.v8-xfa&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[C#] 非同步</title><link>https://blog.tigernaxo.com/posts/csharp/async/</link><pubDate>Fri, 28 Jul 2023 11:06:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/csharp/async/</guid><description>&lt;h1 id="deadlock">DeadLock&lt;/h1>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/13140523/await-vs-task-wait-deadlock" target="_blank" rel="noopener">&lt;/a>&lt;/li>
&lt;li>[]https://blog.darkthread.net/blog/await-task-block-deadlock/)&lt;/li>
&lt;li>[]https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html)&lt;/li>
&lt;li>[]https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming)&lt;/li>
&lt;/ul></description></item><item><title>[授權] OAuth 2.0 Authorization Framework</title><link>https://blog.tigernaxo.com/posts/secure/oauth2-01protocol/</link><pubDate>Sun, 16 Jul 2023 00:25:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/secure/oauth2-01protocol/</guid><description>&lt;h2 id="介紹-introduction">介紹 Introduction&lt;/h2>
&lt;p>OAuth 是一套授權框架，讓第三方應用程式(被授權方)不需取得原始帳號、密碼等敏感資訊，獲得有限的權限以存取資源，目前版本為 2.0。
運作方式為&lt;code>授權伺服器&lt;/code>發放 &lt;code>token&lt;/code>給&lt;code>第三方應用&lt;/code>，token 上記載相關權限範圍(scope)，&lt;code>資源伺服器&lt;/code>需要權限存取時&lt;code>第三方應用&lt;/code>再把 token 出示給系統驗證。&lt;/p>
&lt;h3 id="腳色roles">腳色(Roles)&lt;/h3>
&lt;ul>
&lt;li>&lt;code>授權伺服器 (Authorization Server)&lt;/code>：負責管理使用者授權的伺服器。&lt;/li>
&lt;li>&lt;code>資源伺服器 (Resource Server)&lt;/code>：儲存資源的伺服器。&lt;/li>
&lt;li>&lt;code>第三方應用程式 (Third-Party Application)&lt;/code>：需要存取資源的應用程式。&lt;/li>
&lt;li>&lt;code>使用者 (User)&lt;/code>：授權第三方應用程式存取其資源的使用者。&lt;/li>
&lt;/ul>
&lt;h3 id="rfc-規範">RFC 規範&lt;/h3>
&lt;ul>
&lt;li>RFC 6749&lt;br>
是 OAuth 2.0 的核心規範，描述了 OAuth 2.0 的&lt;code>授權框架&lt;/code>和&lt;code>授權流程&lt;/code>。&lt;/li>
&lt;li>RFC 6750&lt;br>
OAuth 2.0 的另一個相關規範，定義了用於訪問受保護資源的&lt;code>身份驗證方法&lt;/code>，規範包括 Bearer Token 的身份驗證。&lt;/li>
&lt;/ul>
&lt;!-- ### 協定流程 -->
&lt;!-- todo: flow -->
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">RFC 6749&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[授權] OAuth 2.0 Authorization Framework 授權許可</title><link>https://blog.tigernaxo.com/posts/secure/oauth2-02grants/</link><pubDate>Sun, 16 Jul 2023 00:19:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/secure/oauth2-02grants/</guid><description>&lt;h2 id="授權許可-authorization-grant">授權許可 (Authorization Grant)&lt;/h2>
&lt;p>理解授權許可前需要先瞭解解幾個名詞：&lt;/p>
&lt;ul>
&lt;li>&lt;code>授權碼 (Authorization Code)&lt;/code>：由授權伺服器產生，用於授權第三方應用程式存取資源的授權憑證。&lt;/li>
&lt;li>&lt;code>存取權杖 (Access Token)&lt;/code>：由授權伺服器產生，用於允許第三方應用程式存取資源的授權憑證，時效通常較短。&lt;/li>
&lt;li>&lt;code>刷新令牌 (Refresh Token)&lt;/code>：由授權伺服器產生，用於重新產生存取權杖的授權憑證，時效通常較長。&lt;/li>
&lt;li>&lt;code>客戶端憑證&lt;/code>：第三方應用程式本身用於 Basic Access Authentication 的驗證資訊，具體來說是 client_id、client_secret。&lt;/li>
&lt;/ul>
&lt;p>OAth 2.0 根據授權許可的方式分為四種：&lt;/p>
&lt;ul>
&lt;li>授權碼許可(Authorization Code Grant)&lt;/li>
&lt;li>隱含許可(Implicit Grant)&lt;/li>
&lt;li>資源擁有者密碼憑證許可(Resource Owner Password Credentials Grant)&lt;/li>
&lt;li>客戶端憑證許可(Client Credentials Grant)&lt;/li>
&lt;/ul>
&lt;h3 id="授權碼許可authorization-code-grant">授權碼許可(Authorization Code Grant)&lt;/h3>
&lt;p>第三方應用程式向授權伺服器請求授權碼，並將授權碼傳遞給資源伺服器以存取資源的授權流程，這是最常用的模式。&lt;/p>
&lt;ol>
&lt;li>&lt;code>網站使用者&lt;/code>在&lt;code>授權伺服器&lt;/code>的登入站點申請&lt;code>授權碼&lt;/code>。&lt;/li>
&lt;li>&lt;code>授權伺服器&lt;/code>將授權碼告知&lt;code>第三方應用程式&lt;/code>&lt;/li>
&lt;li>&lt;code>第三方應用程式&lt;/code>使用&lt;code>客戶端憑證&lt;/code>和收到的&lt;code>授權碼&lt;/code> 向 &lt;code>授權伺服器&lt;/code> 發起請求獲得 token。&lt;/li>
&lt;/ol>
&lt;h3 id="隱含許可implicit-grant">隱含許可(Implicit Grant)&lt;/h3>
&lt;p>因省略對第三方應用的授權碼直接以前端網址列取得 token ，故稱隱含式許可，但直接以前端網址參數的方式傳送 token 給網站使用者，是&lt;strong>非常不安全的作法&lt;/strong>，一般 token 的有效期間設定為 session 期間有效 (關閉網頁即失效)。&lt;/p>
&lt;ol>
&lt;li>&lt;code>網站使用者&lt;/code>從&lt;code>授權伺服器&lt;/code>登入。&lt;/li>
&lt;li>&lt;code>授權伺服器&lt;/code>直接在網址列帶入 access_token 轉跳第三方應用程式。&lt;/li>
&lt;/ol>
&lt;h3 id="資源擁有者密碼憑證許可resource-owner-password-credentials-grant">資源擁有者密碼憑證許可(Resource Owner Password Credentials Grant)&lt;/h3>
&lt;p>讓第三方應用直接以網站使用者密碼取得 token，必須要是高度信任的第三方應用才能用此方法。&lt;/p>
&lt;ol>
&lt;li>&lt;code>第三方應用程式&lt;/code>向&lt;code>使用者&lt;/code>請求其&lt;code>帳戶密碼&lt;/code>(使用者憑證)。&lt;/li>
&lt;li>&lt;code>第三方應用程式&lt;/code>以&lt;code>使用者帳戶密碼&lt;/code>向&lt;code>授權伺服器&lt;/code>請求 token。&lt;/li>
&lt;/ol>
&lt;h3 id="客戶端憑證許可client-credentials-grant">客戶端憑證許可(Client Credentials Grant)&lt;/h3>
&lt;p>此種 token 針發放對象為第三方應用而非用戶，與用戶認証無關，由第三方應用傳送其自己的 user credentials 獲得 token。&lt;/p></description></item><item><title>[FHIR] SMART Health IT</title><link>https://blog.tigernaxo.com/posts/fhir/fhir-smart-overview/</link><pubDate>Mon, 10 Jul 2023 16:11:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/fhir/fhir-smart-overview/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;a href="https://smarthealthit.org/" target="_blank" rel="noopener">SMART Health IT&lt;/a> 最早在《新英格蘭醫學雜誌》的一篇文章中推出，提出&lt;code>編寫一次應用程序，然後讓它在醫療保健系統的任何地方運行&lt;/code>，制定通用 API。
SMART 已成為 &lt;code>21st Century Cures Act&lt;/code>和&lt;code>2020 Final Rule from the ONC&lt;/code>認證要求項目。&lt;/p>
&lt;h2 id="pre-erequirement">Pre-erequirement&lt;/h2>
&lt;p>需要先熟悉 OAuth 2.0 的流程。&lt;/p>
&lt;h2 id="discovery-document">Discovery document&lt;/h2>
&lt;p>SMART 定義了一個標準的 metadata 端點 &lt;code>/.well-known/smart-configuration&lt;/code> 稱為 discovery document
用來告訴使用者仲介訊息：&lt;/p>
&lt;ul>
&lt;li>Server Capabilities (server 可以做什麼)&lt;/li>
&lt;li>Configuration (配置?)&lt;/li>
&lt;/ul>
&lt;h2 id="認證與授權">認證與授權&lt;/h2>
&lt;h3 id="授權authorization">授權(Authorization)&lt;/h3>
&lt;p>SMART 定義兩種 Client 端 App &lt;code>授權&lt;/code>模式，差別主要在於被授權是否有使用者參與：&lt;/p>
&lt;ul>
&lt;li>Authorization via SMART App Launch&lt;br>
透過 1.EHR 或其他健康軟體的登入 session 或2.使用者手動授權，將用戶權限委託給&lt;code>面向使用者的 App&lt;/code>本身連接到 FHIR Server 存取資源，被授權方獲得授權方分向的資訊稱為 &lt;code>lanuch context&lt;/code> (例如用戶資訊)。&lt;/li>
&lt;li>Authorization via SMART Backend Services&lt;br>
授權在與用戶無關的情況下完成。&lt;/li>
&lt;/ul>
&lt;h3 id="認證authentication">認證(Authentication)&lt;/h3>
&lt;p>SMART 定義兩種 Client 端 App &lt;code>認證&lt;/code>模式，也就是對稱/不對稱加密，官方建議是使用不對稱加密：&lt;/p></description></item><item><title>[K8s] 安裝</title><link>https://blog.tigernaxo.com/posts/devops/k8s-debian-kubeadm/</link><pubDate>Sat, 17 Jun 2023 22:28:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/k8s-debian-kubeadm/</guid><description>&lt;h2 id="prerequest">Prerequest&lt;/h2>
&lt;p>已安裝 Debian 11，並且 ssh 可連線&lt;/p>
&lt;h3 id="disable-swap">disable swap&lt;/h3>
&lt;pre>&lt;code class="language-bash">sed -i '/\/swap/s/^/#/' /etc/fstab
swapoff -a
&lt;/code>&lt;/pre>
&lt;h2 id="container-runtime-cri-o">Container Runtime (CRI-O)&lt;/h2>
&lt;p>Forwarding IPv4 and letting iptables&lt;/p>
&lt;pre>&lt;code class="language-bash">cat &amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
modprobe overlay
modprobe br_netfilter
# sysctl params required by setup, params persist across reboots
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF
# Apply sysctl params without reboot
sysctl --system
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
OS=Debian_11
VERSION=1.27
echo 'deb http://deb.debian.org/debian buster-backports main' &amp;gt; /etc/apt/sources.list.d/backports.list
apt update
apt install -y -t buster-backports libseccomp2 || apt update -y -t buster-backports libseccomp2
apt install -y gnupg gnupg2 curl
echo &amp;quot;deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /&amp;quot; &amp;gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo &amp;quot;deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /&amp;quot; &amp;gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list
mkdir -p /usr/share/keyrings
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg
apt-get update
apt-get install -y cri-o cri-o-runc
systemctl daemon-reload
systemctl enable crio
systemctl start crio
&lt;/code>&lt;/pre>
&lt;h2 id="install-kubeadm">Install kubeadm&lt;/h2>
&lt;pre>&lt;code class="language-bash">apt-get update
apt-get install -y apt-transport-https ca-certificates curl
mkdir -p /etc/apt/keyrings
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
echo &amp;quot;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&amp;quot; | sudo tee /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
&lt;/code>&lt;/pre>
&lt;h2 id="creating-a-cluster-with-kubeadm">Creating a cluster with kubeadm&lt;/h2>
&lt;pre>&lt;code class="language-bash"># 設定 k8s server上網路
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
kubeadm init --pod-network-cidr=10.85.0.0/16 --cri-socket=unix:///var/run/crio/crio.sock
## kubectl 設定
### root
```bash
export KUBECONFIG=/etc/kubernetes/admin.conf
&lt;/code>&lt;/pre>
&lt;h3 id="non-root-user">non-root user&lt;/h3>
&lt;p>make user sudor&lt;/p></description></item><item><title>[.NET] WebView2 單一檔案部屬</title><link>https://blog.tigernaxo.com/posts/dotnet/webview2-single-file/</link><pubDate>Thu, 15 Jun 2023 11:31:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/webview2-single-file/</guid><description>&lt;p>有些部屬環境要求能單一執行檔，如果要使用自己的 DLL 就會有問題，研究了內嵌 DLL 的作法應用於 WebView2 專案上。&lt;br>
以 .NET Framework 4.7.2 的 WinForm 專案為例，目標環境為 windows x64。&lt;/p>
&lt;h2 id="dependency">Dependency&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安裝 Nuget 上的 Microsoft.Web.WebView2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把這些資料夾底下的 Dll 複製到專案資料夾下，並加入版控&lt;/p>
&lt;ul>
&lt;li>&lt;code>packages\Microsoft.Web.WebView2.1.0.1823.32\runtimes&lt;/code>&lt;/li>
&lt;li>&lt;code>packages\Microsoft.Web.WebView2.1.0.1823.32\lib\net45&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>參考移除上述 Dll 參考(移除 Nuget 參考)，改直接參考專案資料夾下的 Dll。&lt;br>
&lt;img src="https://blog.tigernaxo.com/posts/dotnet/webview2-single-file/reference.png" alt="參考">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把參考的 Dll 調整為內嵌資源&lt;br>
&lt;img src="https://blog.tigernaxo.com/posts/dotnet/webview2-single-file/embed.png" alt="參考">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="assemblyhelpercs">AssemblyHelper.cs&lt;/h2>
&lt;pre>&lt;code class="language-c#">public class AssemblyHelper
{
public string Name
{
get
{
return this.assembly.GetName().Name;
}
}
public string AppDataPath { get; set; }
private Assembly assembly;
public AssemblyHelper()
{
assembly = Assembly.GetCallingAssembly();
AppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
AppDataPath = Path.Combine(AppDataPath, Name);
}
/// &amp;lt;summary&amp;gt;
/// Extract embeded dll to target path
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;resourceName&amp;quot;&amp;gt;Dll embed path&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;targetPath&amp;quot;&amp;gt;Dll extract distination&amp;lt;/param&amp;gt;
public void ExtractEmbeddedDLL(string resourceName, string targetPath)
{
var targetDir = Path.GetDirectoryName(targetPath);
if (!string.IsNullOrEmpty(targetDir) &amp;amp;&amp;amp; !Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);
using (Stream resourceStream = assembly.GetManifestResourceStream(resourceName))
{
using (FileStream fileStream = new FileStream(targetPath, FileMode.Create))
{
resourceStream.CopyTo(fileStream);
}
}
}
/// &amp;lt;summary&amp;gt;
/// 設置解析組件路徑的事件處理常式
/// &amp;lt;/summary&amp;gt;
public void EnableEmbededManifestDll() =&amp;gt; AppDomain.CurrentDomain.AssemblyResolve += OnResolveAssembly;
/// &amp;lt;summary&amp;gt;
/// Assembly 解析行為
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;args&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
public static Assembly OnResolveAssembly(object sender, ResolveEventArgs args)
{
Assembly assembly = Assembly.GetCallingAssembly();
string project = Assembly.GetEntryAssembly().GetName().Name;
string manifestItem = $&amp;quot;{project}.{new AssemblyName(args.Name).Name}.dll&amp;quot;;
using (Stream stream = assembly.GetManifestResourceStream(manifestItem))
{
if (stream == null) return null;
byte[] assemblyRawBytes = new byte[stream.Length];
stream.Read(assemblyRawBytes, 0, assemblyRawBytes.Length);
return Assembly.Load(assemblyRawBytes);
}
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="programcs">Program.cs&lt;/h2>
&lt;pre>&lt;code class="language-C#">internal static class Program
{
[STAThread]
static void Main()
{
try
{
var asm = new AssemblyHelper();
// Load an extracted DLL dynamically
asm.EnableEmbededManifestDll();
var loaderDllFolderPath = Path.Combine(asm.AppDataPath, &amp;quot;runtimes\\win-x64\\native&amp;quot;);
var dll = Path.Combine(loaderDllFolderPath, &amp;quot;WebView2Loader.dll&amp;quot;);
var loaderDllEmbedPath = $&amp;quot;{asm.Name}.runtimes.win_x64.native.WebView2Loader.dll&amp;quot;;
asm.ExtractEmbeddedDLL(loaderDllEmbedPath, dll);
// 將需注入 DLL 的邏輯抽離 Main 才能跑
run(loaderDllFolderPath);
}
catch (Exception ex)
{
MessageBox.Show(ex.Message);
}
}
private static void run(string loaderDllFolderPath)
{
CoreWebView2Environment.SetLoaderDllFolderPath(loaderDllFolderPath);
Application.EnableVisualStyles();
Application.SetCompatibleTextRenderingDefault(false);
Application.Run(new Form1());
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="隱藏暫存檔">隱藏暫存檔&lt;/h2>
&lt;p>假設 webview2 元件變數是&lt;code>wv&lt;/code>：&lt;/p></description></item><item><title>[Code] 格式化民國年</title><link>https://blog.tigernaxo.com/posts/javascript/code-roc-format/</link><pubDate>Tue, 06 Jun 2023 06:00:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/code-roc-format/</guid><description>&lt;p>這個方法用 proxy 擴充 dayjs，讓 dayjs 支援格式化民國年。&lt;/p>
&lt;h2 id="js-程式碼">JS 程式碼&lt;/h2>
&lt;pre>&lt;code class="language-js">// dayx.js
import day from &amp;quot;dayjs&amp;quot;;
const prototype = Object.getPrototypeOf(day());
const yyy = (dt) =&amp;gt; (dt.getFullYear() - 1911).toString().padStart(3, &amp;quot;0&amp;quot;);
const handler = {
get: function (target, prop, receiver) {
// age, dte, tme
if (prop === &amp;quot;age&amp;quot;) return day().diff(receiver, &amp;quot;years&amp;quot;, false);
if (prop === &amp;quot;dte&amp;quot;) return receiver.format(&amp;quot;YYYMMDD&amp;quot;);
if (prop === &amp;quot;tme&amp;quot;) return receiver.format(&amp;quot;HHmmss&amp;quot;);
// format
if (prop === &amp;quot;format&amp;quot;)
return (format) =&amp;gt; {
const formattingTokens = /Y{4,}|Y{3}|[^Y{3}]+/g;
const arr = format.match(formattingTokens);
const format2 = arr
.map((x) =&amp;gt; (x === &amp;quot;YYY&amp;quot; ? yyy(target.$d) : x))
.join(&amp;quot;&amp;quot;);
console.log(&amp;quot;ktformat&amp;quot;, format2);
return new day(target.$d).format(format2);
};
// Return the original property value
if (typeof target[prop] !== &amp;quot;function&amp;quot;) return target[prop];
// Wrap the original function with custom behavior
return function (...args) {
const result = target[prop].apply(target, args);
const isReturnDayjs = Object.getPrototypeOf(result) === prototype;
return isReturnDayjs ? p(result, handler) : result;
};
},
set(obj, prop, v, receiver) {
if (prop === &amp;quot;dte&amp;quot;) {
v = v.padStart(7, &amp;quot;0&amp;quot;);
const yyy = parseInt(v.substring(0, 3)) + 1911;
obj.$d.setFullYear(yyy);
obj.$d.setMonth(parseInt(v.substring(3, 5)) - 1);
obj.$d.setDate(parseInt(v.substring(5, 7)));
return receiver;
}
if (prop === &amp;quot;tme&amp;quot;) {
v = v.padEnd(6, &amp;quot;0&amp;quot;);
obj.$d.setHours(parseInt(v.substring(0, 2)));
obj.$d.setMinutes(parseInt(v.substring(2, 4)));
obj.$d.setSeconds(parseInt(v.substring(4, 6)));
return receiver;
}
return Reflect.set(...arguments);
},
};
const p = (...args) =&amp;gt; new Proxy(day(...args), handler);
export default p;
&lt;/code>&lt;/pre>
&lt;h2 id="型別定義">型別定義&lt;/h2>
&lt;pre>&lt;code class="language-ts">// dayx.d.ts
import dayjs from &amp;quot;dayjs&amp;quot;;
declare module &amp;quot;dayjs&amp;quot; {
interface Dayjs {
age: number;
dte: string;
tme: string;
}
}
export = dayjs;
export as namespace dayjs;
&lt;/code>&lt;/pre>
&lt;h2 id="使用方式">使用方式&lt;/h2>
&lt;p>可直接設定民國年，此外時間的加減乘除都可以參照 &lt;a href="https://day.js.org/docs/en/manipulate/manipulate" target="_blank" rel="noopener">dayjs 文件&lt;/a>&lt;/p></description></item><item><title>[Code] 處理民國年</title><link>https://blog.tigernaxo.com/posts/csharp/cultureinfo/</link><pubDate>Wed, 10 May 2023 11:06:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/csharp/cultureinfo/</guid><description>&lt;h2 id="預設-cultureinfo">預設 CultureInfo&lt;/h2>
&lt;pre>&lt;code class="language-cs">// Program.cs
CultureInfo.DefaultThreadCurrentCulture = new CultureInfo(&amp;quot;zh-TW&amp;quot;)
{
DateTimeFormat = { Calendar = new TaiwanCalendar() }
};
&lt;/code>&lt;/pre>
&lt;h2 id="民國年轉換西元年">民國年轉換西元年&lt;/h2>
&lt;pre>&lt;code class="language-cs">string dtestr1 = &amp;quot;1010229&amp;quot;;
// ParseExact 的時候，民國年的年分要補成4碼，3碼不合法
var dte1 = DateTime.ParseExact(dtestr1.PadLeft(8, '0'), &amp;quot;yyMMdd&amp;quot;, CultureInfo.CurrentCulture);
var cedte = dte1.ToString(&amp;quot;yyyy/MM/dd&amp;quot;);
&lt;/code>&lt;/pre>
&lt;h2 id="西元年轉民國年">西元年轉民國年&lt;/h2>
&lt;pre>&lt;code class="language-cs">var dtestr2 = &amp;quot;20230508&amp;quot;;
var dte2 = DateTime.ParseExact(dtestr2, &amp;quot;yyyyMMdd&amp;quot;, CultureInfo.InvariantCulture);
var rocdte = dte2.ToString(&amp;quot;yyMMdd&amp;quot;);
&lt;/code>&lt;/pre></description></item><item><title>[Program] 比較 Method chaining、fluent interface、c# 擴充方法</title><link>https://blog.tigernaxo.com/posts/software/pg-method-chaining/</link><pubDate>Sat, 22 Apr 2023 20:58:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/pg-method-chaining/</guid><description>&lt;p>Method chaining、Fluent interface 和 擴充方法(Extension method) 三種雖然相似，但實則為不同的程式設計概念。&lt;/p>
&lt;h2 id="method-chaining">Method chaining&lt;/h2>
&lt;p>Method chaining 是一種技術，允許在一行程式碼中調用對象的一系列方法。鏈中的每個方法都返回被調用的對象，從而允許在同一個對象上調用下一個方法。這種技術用於創建更可讀和簡潔的代碼。&lt;/p>
&lt;h2 id="fluent-interface">Fluent interface&lt;/h2>
&lt;p>Fluent interface 是一種設計模式，使用方法串鏈創建更具表現力和可讀性的API。
Fluent interface 的目標是使代碼看起來更像自然語言，使其更容易理解和使用。
在 Fluent interface 中，每個方法調用返回一個對象，允許在同一個對象上調用下一個方法。這種技術通常用於庫和框架中，以為開發人員提供更直觀和自然的API。&lt;/p>
&lt;h2 id="擴充方法">擴充方法&lt;/h2>
&lt;p>擴充方法是一種在不修改類本身的情況下為現有類添加功能的方法。擴充方法在單獨的靜態類中定義，並像擴展類的方法一樣調用。這允許開發人員在不修改源代碼的情況下為現有類添加功能。擴充方法通常用於為現有類添加實用函數或為無法修改的類（例如第三方庫）添加功能。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.thinkinmd.com/post/2020/03/02/coding-style-of-fluent-interface/" target="_blank" rel="noopener">Fluent Interface｜一種程式碼”寫作”風格&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener">擴充方法 (C# 程式設計手冊)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Method_chaining" target="_blank" rel="noopener">wiki-Method chaining&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Tools] 使用 OpenApi Generator 產生 .Net Core Client</title><link>https://blog.tigernaxo.com/posts/other/tools-openapi-generator/</link><pubDate>Fri, 07 Apr 2023 11:00:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/tools-openapi-generator/</guid><description>&lt;h2 id="手動設置">手動設置&lt;/h2>
&lt;p>需要 java 環境、npm 安裝執行檔，可參照&lt;a href="https://openapi-generator.tech/docs/installation" target="_blank" rel="noopener">CLI Installation&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-bash">openapi-generator-cli generate \
-i &amp;lt;spec file|url&amp;gt; -o &amp;lt;outdir&amp;gt; \ # 設定輸入 json/xml (檔案或網址)、輸出資料夾
-g csharp-netcore \ # 輸出 csharp .net core 專案
--skip-validate-spec # 不檢查規格
&lt;/code>&lt;/pre>
&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>更簡單，一行搞定：&lt;/p>
&lt;pre>&lt;code class="language-bash">docker run --rm \
-v ${PWD}:/local openapitools/openapi-generator-cli generate \
-i &amp;lt;spec file|url&amp;gt; -o &amp;lt;outdir&amp;gt; \ # 設定輸入 json/xml (檔案或網址)、輸出資料夾
-g csharp-netcore \ # 輸出 csharp .net core 專案
--skip-validate-spec # 不檢查規格
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/installation" target="_blank" rel="noopener">CLI Installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/csharp-netcore/" target="_blank" rel="noopener">Documentation for the csharp-netcore Generator&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[元件] 把 attr、event、slot，直接 Passthrough 給子元件，製作包裝元件</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-wrapper/</link><pubDate>Thu, 06 Apr 2023 14:21:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-wrapper/</guid><description>&lt;p>用來複寫給專案用的元件，用於在既有 UI framework 上打造專案元件&lt;/p>
&lt;h2 id="vue3">Vue3&lt;/h2>
&lt;h3 id="vue26">Vue2.6&lt;/h3>
&lt;pre>&lt;code class="language-html">&amp;lt;template&amp;gt;
&amp;lt;q-btn v-bind=&amp;quot;{ ...$attrs, ...$props }&amp;quot; v-on=&amp;quot;$listeners&amp;quot;&amp;gt;
&amp;lt;template v-for=&amp;quot;(_, slot) of $scopedSlots&amp;quot; v-slot:[slot]=&amp;quot;scope&amp;quot;&amp;gt;
&amp;lt;slot :name=&amp;quot;slot&amp;quot; v-bind=&amp;quot;scope&amp;quot;/&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/q-btn&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="vue3-1">Vue3&lt;/h3>
&lt;p>Vue3 裡面只要綁定 $attrs 即可，attrs, props, event 全部自動綁定進去。&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;template&amp;gt;
&amp;lt;q-btn v-bind=&amp;quot;$attrs&amp;quot;&amp;gt;
&amp;lt;template v-for=&amp;quot;(slot, index) of Object.keys($slots)&amp;quot; :key=&amp;quot;index&amp;quot; v-slot:[slot]&amp;gt;
&amp;lt;slot :name=&amp;quot;slot&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/q-btn&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="quasar2-ts">Quasar2-TS&lt;/h3>
&lt;p>Quasar 裡面 Props, Slot 有獨立的 interface 定義，因此可直接拿到。&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;template&amp;gt;
&amp;lt;q-btn v-bind=&amp;quot;$attrs&amp;quot;&amp;gt;
&amp;lt;template v-for=&amp;quot;(slot, index) of Object.keys($slots)&amp;quot; :key=&amp;quot;index&amp;quot; v-slot:[slot]&amp;gt;
&amp;lt;slot :name=&amp;quot;slot&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;/q-btn&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import type { QBtnSlots, QBtnProps } from 'quasar';
import { QBtn } from 'quasar';
const props = withDefaults(defineProps&amp;lt;QBtnProps&amp;gt;(),{
// here comes default settings
});
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="vuetify3">Vuetify3&lt;/h3>
&lt;p>Vuetify3 裡面 Props, Slot 沒有獨立的 interface 定義，因此需額外定義。
&lt;code>MyBtn.vue&lt;/code>&lt;/p></description></item><item><title>[架構] 多層式架構(Multi-layer Architecture)</title><link>https://blog.tigernaxo.com/posts/software/arch-multi-layer/</link><pubDate>Tue, 28 Mar 2023 23:34:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/arch-multi-layer/</guid><description>&lt;p>中文多層架構的層可翻作 layer 或 tier，兩者主要的差別在於 layer 指程式邏輯在應用程式的位置；而 tier 指 layer 在系統上實際部屬執行的位址，屬於物理層級的指涉。這一篇的層說的是 layer，談如何在軟體層面利用分層 (layer) 妥善安排程式碼，以 multi-layer 撰寫程式碼能將複雜的邏輯隔離開達成關注點分離(SoC, Separation of concerns)，好處有：&lt;/p>
&lt;ul>
&lt;li>降低耦合：程式拆成各司其職的單元，降低彼此耦合，增加程式單元彈性(擴展性)、複用性。&lt;/li>
&lt;li>易於維護：多層式架構中程式碼各司其職，容易定位問題發生點、而非從整個應用程式邏輯找。&lt;/li>
&lt;li>敏捷開發：程式可快速回應需求修改(理由與易於維護類似，但是在開發時獲得的好處)。&lt;/li>
&lt;li>平行開發：解耦的程式有助於降低協作併版衝突。&lt;/li>
&lt;/ul>
&lt;h1 id="分層">分層&lt;/h1>
&lt;h2 id="三層式架構">三層式架構&lt;/h2>
&lt;p>一般來說最常用的三層式架構組成為：&lt;/p>
&lt;ul>
&lt;li>表現層 (PL; Presentation Layer)：ASP 內就是 Controller 結尾。&lt;/li>
&lt;li>商業邏輯繩 (BLL; Business Logic Layer)：又稱為 Service Layer，命名習慣是 Service、Helper 結尾。&lt;/li>
&lt;li>資料存取層(DAL; Data Access Layer)：命名習慣是 Repo 結尾。&lt;/li>
&lt;/ul>
&lt;p>另外有人將 Domain、Common 稱為一層，但這個部分其實不太像層，因為會被每一層引用，在架構上呈現比較不像層那樣扁平，裡面包含：
Model、Entity、DTO(Data transfer object) 或 Value Object，這裡只有屬性沒有方法。&lt;/p>
&lt;h2 id="四層式架構">四層式架構&lt;/h2>
&lt;p>為了降低 PL 與 BL 之間的耦合，有時會在 Business Logic Layer(BLL) 上再疊一層 Service Layer(SL)，作為 Presentation Layer 與 Business Layer 的中介層，這時 Business Logic Layer 的命名就不以 Serviece 結尾，通常較大型專案才需要如此分法。&lt;br>
而 SL 和 BLL 的差別在於商業邏輯精細度，一個SL操作 (coarse-grained operation) 通常包含複數BL操作 (fine-grained operation)。&lt;/p></description></item><item><title>[But] TypeScript 注意事項</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-ts-bug/</link><pubDate>Fri, 10 Mar 2023 08:14:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-ts-bug/</guid><description>&lt;p>用這樣的寫法，會造成 IDE 異常&lt;/p>
&lt;pre>&lt;code class="language-js">:columns=&amp;quot;columns as QTableProps['columns']&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>[Hugo] Toha Theme 10分鐘快速建構</title><link>https://blog.tigernaxo.com/posts/other/hugo-toha-2023/</link><pubDate>Wed, 15 Feb 2023 16:30:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/hugo-toha-2023/</guid><description>&lt;h2 id="環境需求">環境需求：&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">Hugo Version 0.109.0 (extended) or higher&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/tags" target="_blank" rel="noopener">Go language 1.18 or higher (require for hugo modules)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node version v18.x or later and npm 8.x or later.&lt;/a>&lt;/li>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;h2 id="github-設定">GitHub 設定&lt;/h2>
&lt;ul>
&lt;li>建立一個 repo 叫做 &lt;code>&amp;lt;GitAccount&amp;gt;.github.io&lt;/code>，進入 repo 頁面&lt;/li>
&lt;/ul>
&lt;!-- - 建立一個 Branch 叫做 `gh-pages` (??) -->
&lt;ul>
&lt;li>進入Repo -&amp;gt; &lt;code>Setting&lt;/code> -&amp;gt; &lt;code>Code and automation&lt;/code> -&amp;gt; &lt;code>Actions&lt;/code> -&amp;gt; &lt;code>General&lt;/code> -&amp;gt; &lt;code>Workflow permissions&lt;/code> -&amp;gt; 勾選 &lt;code>Read and write permissions&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="repo-設定">Repo 設定&lt;/h2>
&lt;p>抓 template&lt;/p>
&lt;pre>&lt;code class="language-bash">git clone https://github.com/hugo-toha/hugo-toha.github.io.git
mv hugo-toha.github.io &amp;lt;GitAccount&amp;gt;.github.io
cd &amp;lt;GitAccount&amp;gt;.github.io
hugo mod tidy
&lt;/code>&lt;/pre>
&lt;p>設置 config.yaml&lt;/p></description></item><item><title>[Arch] 安裝(Virtualbox)</title><link>https://blog.tigernaxo.com/posts/linux/arch-install/</link><pubDate>Fri, 20 Jan 2023 11:14:30 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/linux/arch-install/</guid><description>&lt;h2 id="bios-system">BIOS system&lt;/h2>
&lt;ol>
&lt;li>分割磁碟， /dev/sda1 給 1G，其餘給 /dev/sda2
&lt;pre>&lt;code>fdisk /dev/sda
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>mkswap /dev/sda1
mkfs.ext4 /dev/sda2
mount /dev/sda2 /mnt
swapon /dev/sda1
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>安裝(arch 核心、linux 核心、韌體)
&lt;pre>&lt;code class="language-bash">pacstrap -K /mnt base linux linux-firmware
&lt;/code>&lt;/pre>
其他套件(非必要)
&lt;pre>&lt;code class="language-bash">pacstrap -K /mnt vim sudo openssh docker docker-compose bash-completion
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>產生 fstab
&lt;pre>&lt;code class="language-bash"># -U Use UUIDs for source identifiers
genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Chroot
&lt;pre>&lt;code>arch-chroot /mnt
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Time zone
&lt;pre>&lt;code class="language-bash">ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime
# generate /etc/adjtime
hwclock --systohc
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Localization
在&lt;code>/etc/locale.gen&lt;/code>裡面把&lt;code>en_US.UTF-8 UTF-8&lt;/code>、&lt;code>zh_TW.UTF-8 UTF-8&lt;/code>解除註解。
&lt;pre>&lt;code>locale-gen
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>echo &amp;quot;LANG=en_US.UTF-8&amp;quot; &amp;gt;&amp;gt; /etc/locale.conf
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Boot loader
&lt;pre>&lt;code class="language-bash">pacman -S grub
# don’t put the disk number sda1, just the disk name sda
grub-install /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Root password
&lt;pre>&lt;code>passwd
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>重開機
&lt;pre>&lt;code class="language-bash">exit
unmount -R /mnt
reboot
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="efi-system">EFI system&lt;/h2>
&lt;p>首先在 virtualbox 硬體的部分將 EFI 打勾&lt;/p></description></item><item><title>[DIY] Git Action 附加編譯檔案到 Release Tag (Dotnet)</title><link>https://blog.tigernaxo.com/posts/devops/git-action-release-dotnet/</link><pubDate>Wed, 18 Jan 2023 09:20:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/git-action-release-dotnet/</guid><description>&lt;p>效果：新增一個 v 開頭的 Tag，等 Action 結束之後該 Release 會獲得相對應的 Release 壓縮檔案。&lt;/p>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;p>新增檔案&lt;code>.github/workflow/Release.yml&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Release
# 新增 tag 的時候觸發
on:
push:
tags:
- &amp;quot;*&amp;quot;
# 讓 workflow 獲得上傳檔案的權限
permissions:
contents: write
jobs:
build:
runs-on: ubuntu-latest
strategy:
matrix:
dotnet-version: [&amp;quot;5.0.x&amp;quot;]
# 判斷 tag 如果是 v 開頭才繼續
if: startsWith(github.ref, 'refs/tags/v')
steps:
# 取得 Git 中的原始碼
- uses: actions/checkout@v3
- name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
uses: actions/setup-dotnet@v3
with:
dotnet-version: ${{ matrix.dotnet-version }}
# 還原套件
- name: Restore
run: dotnet restore
# 編譯
- name: Build
run: dotnet build --configuration Release --no-restore --no-restore -o api
# 壓縮編譯檔
- name: Compress
run: zip -r api.${{ github.ref_name }}.zip ./api
# 建立 Release 、上傳檔案
- name: Create Release and Upload Release Asset
uses: softprops/action-gh-release@v1
with:
tag_name: ${{ github.ref_name }}
name: ${{ github.ref_name }}
body: ${{ github.ref_name }}
draft: false
prerelease: false
files: api.${{ github.ref_name }}.zip
&lt;/code>&lt;/pre></description></item><item><title>[DIY] Git Action 附加編譯檔案到 Release Tag (Vue)</title><link>https://blog.tigernaxo.com/posts/devops/git-action-release-vue/</link><pubDate>Wed, 18 Jan 2023 09:20:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/git-action-release-vue/</guid><description>&lt;p>效果：新增一個 v 開頭的 Tag，等 Action 結束之後該 Release 會獲得相對應的 Release 壓縮檔案。&lt;/p>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;p>新增檔案&lt;code>.github/workflow/Release.yml&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Release
# 新增 tag 的時候觸發
on:
push:
tags:
- &amp;quot;*&amp;quot;
# 讓 workflow 獲得上傳檔案的權限
permissions:
contents: write
jobs:
build:
runs-on: ubuntu-latest
# 判斷 tag 如果是 v 開頭才繼續
if: startsWith(github.ref, 'refs/tags/v')
steps:
# 取得 Git 中的原始碼
- uses: actions/checkout@v3
# 編譯
- name: Build SPA
run: yarn &amp;amp;&amp;amp; yarn build &amp;amp;&amp;amp; mv dist/ app/
# 壓縮編譯檔
- name: Compress
run: zip -r app.${{ github.ref_name }}.zip ./app
# 建立 Release 、上傳檔案
- name: Create Release and Upload Release Asset
uses: softprops/action-gh-release@v1
with:
tag_name: ${{ github.ref_name }}
name: ${{ github.ref_name }}
body: ${{ github.ref_name }}
draft: false
prerelease: false
files: app.${{ github.ref_name }}.zip
&lt;/code>&lt;/pre></description></item><item><title>[Keycloak] docker 安裝</title><link>https://blog.tigernaxo.com/posts/web/keycloak-docker-compose/</link><pubDate>Sun, 01 Jan 2023 07:44:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/web/keycloak-docker-compose/</guid><description>&lt;p>採用的映象檔是 &lt;code>bitnami/keycloak&lt;/code> ，因為我需要使用網址來區分服務(同一個 port 的情況下)，所以採取反向代理的方式，一方面讓之後要部屬其他應用、加上憑證、等等操作都交給 nginx 比較方便。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>建立 docker 網路 &lt;code>mynetwork&lt;/code>，如果設定其他名稱，以下步驟再自行調整對應。&lt;/p>
&lt;pre>&lt;code class="language-bash">docker create network mynetwork
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>建立 docker-compose 環境 &lt;code>keycloak/.env&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-bash">KEYCLOCK_IMAGE=bitnami/keycloak:23.0.3
KEYCLOAK_DATABASE_VENDOR=postgresql
KEYCLOAK_DATABASE_PORT=5432
KEYCLOAK_DATABASE_USER=keycloak
KEYCLOAK_DATABASE_PASSWORD=password
KEYCLOAK_DATABASE_NAME=keycloak
KEYCLOAK_ADMIN_USER=admin
KEYCLOAK_ADMIN_PASSWORD=admin
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;code>keycloak/docker-compose.yml&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">version: '3'
volumes:
postgres_data:
driver: local
services:
keycloak_db:
image: postgres
restart: always
volumes:
- postgres_data:/var/lib/postgresql/data
environment:
POSTGRES_DB: ${KEYCLOAK_DATABASE_NAME}
POSTGRES_USER: ${KEYCLOAK_DATABASE_USER}
POSTGRES_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
networks:
- mynetwork
keycloak:
image: ${KEYCLOCK_IMAGE}
environment:
KEYCLOAK_DATABASE_VENDOR: ${KEYCLOAK_DATABASE_VENDOR}
KEYCLOAK_DATABASE_HOST: keycloak_db
KEYCLOAK_DATABASE_PORT: ${KEYCLOAK_DATABASE_PORT}
KEYCLOAK_DATABASE_NAME: ${KEYCLOAK_DATABASE_NAME}
KEYCLOAK_DATABASE_USER: ${KEYCLOAK_DATABASE_USER}
KEYCLOAK_DATABASE_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
KEYCLOAK_DATABASE_SCHEMA: public
KEYCLOAK_ADMIN_USER: ${KEYCLOAK_ADMIN_USER}
KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: 'true'
KEYCLOAK_ENABLE_STATISTICS: 'true'
KC_PROXY: edge
KC_PROXY_ADDRESS_FORWARDING: 'true'
KC_HTTP_ENABLED: 'true'
restart: unless-stopped
networks:
- mynetwork
depends_on:
- keycloak_db
networks:
mynetwork:
external: true
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>建立 &lt;code>nginx/nginx.conf&lt;/code>，這裡我把 &lt;code>keycloak.docker.vm&lt;/code> 給 keycloak，裡面有一些設置 ssl 用得到的區塊放置在註解。&lt;/p></description></item><item><title>[元件] 全域元件</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-global/</link><pubDate>Tue, 13 Dec 2022 15:10:57 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-global/</guid><description>&lt;h2 id="vue-的作法">Vue 的作法&lt;/h2>
&lt;pre>&lt;code class="language-js">app.component('component-name', component)
&lt;/code>&lt;/pre>
&lt;h2 id="quasar2-的做法">Quasar2 的做法&lt;/h2>
&lt;p>Vite/Typescript&lt;/p>
&lt;p>建立 src/boot/register-my-component.ts&lt;/p>
&lt;pre>&lt;code class="language-typescript">import { boot } from 'quasar/wrappers';
import BasicBtnVue from 'src/components/BasicBtn.vue';
// &amp;quot;async&amp;quot; is optional;
// more info on params: https://v2.quasar.dev/quasar-cli/boot-files
export default boot(async ({ app }) =&amp;gt; {
app.component('x-btn', BasicBtnVue);
});
&lt;/code>&lt;/pre>
&lt;p>在 quasar.conf.js 內新增設定&lt;/p>
&lt;pre>&lt;code class="language-js">module.exports = configure(function (/* ctx */) {
return {
// ...上略
// https://v2.quasar.dev/quasar-cli-vite/boot-files
boot: ['i18n', 'register-my-component'],
// ... 下略
};
});
&lt;/code>&lt;/pre>
&lt;p>建立型別定義檔，我放在 src/components 下
components.d.ts&lt;/p></description></item><item><title>[架構] 無暇的程式碼-讀書心得</title><link>https://blog.tigernaxo.com/posts/software/arch-clean-arch-review/</link><pubDate>Mon, 12 Dec 2022 10:57:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/arch-clean-arch-review/</guid><description>&lt;h2 id="軟體系統價值">軟體系統價值&lt;/h2>
&lt;p>行為價值、架構價值&lt;/p>
&lt;h3 id="行為價值">行為價值&lt;/h3>
&lt;p>工程師的首要責任
需求實現、可用性保障(功能性 Bug、性能、穩定性)
業務明確、穩定的前提下，可忽略架構價值&lt;/p>
&lt;h3 id="架構價值">架構價值&lt;/h3>
&lt;p>更容易適應:需求變更。
變更實作難度和變更的範圍成正比、跟變更的具體形狀無關。 ??
業務需求通常不明確、時常變動，因此架構非常重要。
不關注架構價值會隨著版本迭代、變更每一行程式成本升高，因此投入的人力成本增加。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/65658089" target="_blank" rel="noopener">知乎-架构整洁之道, 看这一篇就够了！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://alitech-public.oss-cn-beijing.aliyuncs.com/1557040476898/jiagouzhengjie-siweidaotu.png" target="_blank" rel="noopener">架构整洁之道超詳細關係圖&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Program] 巢狀結構</title><link>https://blog.tigernaxo.com/posts/software/quality-nest/</link><pubDate>Sun, 11 Dec 2022 02:19:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/quality-nest/</guid><description>&lt;p>巢狀程式結構會使程式可讀性差、且難以維護，可讀性高的程式碼深度最多不超過三層，嚴格管控程式碼深度的程式設計師又稱為 Never Nester。&lt;/p>
&lt;h2 id="消除巢狀程式手法">消除巢狀程式手法：&lt;/h2>
&lt;ul>
&lt;li>Extraction&lt;/li>
&lt;li>Inversion&lt;/li>
&lt;li>依據契約式程式設計，移除不必要判斷&lt;/li>
&lt;/ul>
&lt;h3 id="extraction">Extraction&lt;/h3>
&lt;p>從複查的結構抽出程式碼&lt;/p>
&lt;h3 id="inversion">Inversion&lt;/h3>
&lt;p>把跳出函式的判斷移動到最上面&lt;/p>
&lt;h3 id="依據契約式程式設計移除不必要判斷">依據契約式程式設計，移除不必要判斷&lt;/h3>
&lt;p>依據契約式程式設計，以程式碼使用者會傳入的參數合法性為前提，移除不必要判斷&lt;/p></description></item><item><title>[授權] OAuth2.0</title><link>https://blog.tigernaxo.com/posts/other/auth-oauth2/</link><pubDate>Fri, 02 Dec 2022 12:43:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/auth-oauth2/</guid><description>&lt;p>OAuth 是一個開發標準(Open Standard)，用來處理有關「授權」（Authorization）相關的問題
允許授權當下的APP取得使用者在平台的相關資訊
OAuth2 有很多變化&lt;/p>
&lt;p>腳色：&lt;/p>
&lt;ul>
&lt;li>Resource Owner，也就是使用者。&lt;/li>
&lt;li>Client，要向使用者取得權限的應用程式，有自己的 Client ID、 Client Secret。&lt;/li>
&lt;li>Authorization Server，負責驗證使用者身分、發 Access Token 給應用程式&lt;/li>
&lt;li>Resource Server，存放資源的伺服器，認 Token 給使用者存取資源&lt;/li>
&lt;/ul>
&lt;p>用詞&lt;/p>
&lt;ul>
&lt;li>Authorization Grant 同意應用程式取得資源&lt;/li>
&lt;li>Redirect URI 驗證伺服器驗證、授權完畢後，返回應用程式的路徑&lt;/li>
&lt;li>Scope 授權範圍&lt;/li>
&lt;/ul>
&lt;h2 id="oauth20-四種授權類型流程grant-types">OAuth2.0 四種授權類型流程(Grant Types)：&lt;/h2>
&lt;h3 id="authorization-code">Authorization Code&lt;/h3>
&lt;p>最常見，步驟：&lt;/p>
&lt;ol>
&lt;li>應用程式(Client) 將使用者導向 Authorization Server，提供 Redirect URL, scope, 應用程式的 client id&amp;hellip;&lt;/li>
&lt;li>Authorization Server 驗證使用者身分，通過之後發給 Authorization Grant，將網址列帶上 Authorization Grant 後將使用者導回 Redirect URI 回到應用程式(Client)。&lt;/li>
&lt;li>應用程式(Client)拿 Authorization Grant 和 Authorization Server 換取 Access Token，Authorization Server 會透過應用程式(Client)專屬的 Client ID、 Client Secret 驗證應用程式身分。&lt;/li>
&lt;li>應用程式(Client)帶著 Access Token 向 Resource Server 存取資源&lt;/li>
&lt;/ol>
&lt;h3 id="implicit">Implicit&lt;/h3>
&lt;p>適合在 Client-side 運行的應用程式適合使用，例如 SPA(Single Page Application)
跳過交換 Access Token 的過程，由 Authorization Server 直接給予 Access Token
比較不安全&lt;/p></description></item><item><title>[HA] 使用 Docker Compose 安裝 Home Assistant</title><link>https://blog.tigernaxo.com/posts/other/homeassistant/ha-install/</link><pubDate>Tue, 22 Nov 2022 08:50:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/homeassistant/ha-install/</guid><description>&lt;p>這裡是假設手邊已經有一台安裝 docker、docker-compose 的 Linux 系統。
採用的映象檔是 &lt;code>ghcr.io/home-assistant/home-assistant:stable&lt;/code> ，因為我需要使用網址來區分服務(同一個 443 port 的情況下)，所以採取反向代理的方式，一方面讓之後要部屬其他應用、加上憑證、等等操作都交給 nginx 比較方便，因此不會將 8123 port 直接對外。&lt;/p>
&lt;ol>
&lt;li>建立 &lt;code>mynetwork&lt;/code>
&lt;pre>&lt;code class="language-bash">docker create network mynetwork
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>建立 &lt;code>ha&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>ha/docker-compose.yml&lt;/code>
&lt;pre>&lt;code class="language-yml">version: '3'
services:
ha:
container_name: homeassistant
#image: &amp;quot;homeassistant/home-assistant:stable&amp;quot;
image: ${HA_IMAGE}
volumes:
- ./volume/ha/config:/config
- /etc/localtime:/etc/localtime:ro
- /run/dbus:/run/dbus:ro
restart: unless-stopped
privileged: true
networks:
- mynetwork
networks:
mynetwork:
external: true
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>&lt;code>ha/.env&lt;/code>
&lt;pre>&lt;code>HA_IMAGE=&amp;quot;homeassistant/home-assistant:stable&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>&lt;code>ha/.gitignore&lt;/code>
&lt;pre>&lt;code>volume/
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>建立 &lt;code>nginx&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>nginx/docker-compose.yml&lt;/code>
&lt;pre>&lt;code class="language-yml">version: '3'
services:
web:
image: nginx
volumes:
# - ./templates:/etc/nginx/templates
- /usr/share/nginx/html:/usr/share/nginx/html
- ./nginx.conf:/etc/nginx/nginx.conf
- /etc/letsencrypt:/etc/letsencrypt
networks:
- mynetwork
ports:
- &amp;quot;80:80&amp;quot;
- &amp;quot;443:443&amp;quot;
environment:
- NGINX_ENVSUBST_TEMPLATE_SUFFIX=.conf
- NGINX_PORT=80
networks:
mynetwork:
external: true
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>&lt;code>nginx/nginx.conf&lt;/code>
&lt;pre>&lt;code>events {
}
http {
upstream ha {
server ha:8123;
}
error_log /etc/nginx/error_log.log warn;
client_max_body_size 20m;
# proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m;
proxy_cache off;
server {
server_name localhost;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
try_files $uri $uri/ /index.html;
}
}
server {
listen 80;
#listen 443 ssl;
#server_name home.example.com;
# SSL certificate and key configuration
#ssl_certificate /etc/letsencrypt/live/home.example.com/fullchain.pem;
#ssl_certificate_key /etc/letsencrypt/live/home.example.com/privkey.pem;
# Additional SSL configurations (e.g., enable secure ciphers, etc.)
#ssl_protocols TLSv1.2 TLSv1.3;
#ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384';
location /.well-known/acme-challenge {
root /usr/share/nginx/html;
}
location / {
proxy_pass http://ha;
proxy_set_header Host $host;
proxy_http_version 1.1;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection &amp;quot;Upgrade&amp;quot;;
}
}
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>啟動服務
&lt;pre>&lt;code class="language-bash">docker-compose -f ha/docker-compose.yml up -d
docker-compose -f nginx/docker-compose.yml up -d
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="創建帳號">創建帳號&lt;/h2>
&lt;p>例如我的 IP 是 192.168.56.100
現在可以進入 &lt;code>http://192.168.56.100/&lt;/code> 開始創建帳號。&lt;/p></description></item><item><title>[Typescript] Typescript 用 InjectionKey 達成強型別 provide</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-ts-provide/</link><pubDate>Thu, 17 Nov 2022 11:49:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-ts-provide/</guid><description>&lt;p>Working with Reactivity
上游元件&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;script lang=&amp;quot;ts&amp;quot;&amp;gt;
import { InjectionKey, provide, Ref, reactive } from 'vue';
// State
export interface IState {
drawer: boolean;
}
export const stateKey: InjectionKey&amp;lt;Ref&amp;lt;IState&amp;gt;&amp;gt; = Symbol();
const state = reactive&amp;lt;IState&amp;gt;({
drawer: false,
});
provide&amp;lt;IState&amp;gt;(stateKey, computed(()=&amp;gt;state));
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>下游元件&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import { inject, ref } from 'vue';
import { stateKey } from './Parent.vue';
const state = inject(stateKey, ref({ drawer: false }));
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vuejs.org/guide/components/provide-inject.html" target="_blank" rel="noopener">Vue.js/guild - Provide / Inject&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vuejs.org/api/composition-api-dependency-injection.html" target="_blank" rel="noopener">Vue.js/api - Composition API: Dependency Injection&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Linux] Ubuntu SSH 連線</title><link>https://blog.tigernaxo.com/posts/linux/ubuntu22-ssh/</link><pubDate>Tue, 15 Nov 2022 10:23:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/linux/ubuntu22-ssh/</guid><description>&lt;h2 id="更改-port">更改 port&lt;/h2>
&lt;p>可以直接修改&lt;code>/etc/ssh/sshd_config&lt;/code>裡面的 Port 設定(解開註解修改)，或直接新增一個檔案：&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo echo &amp;quot;Port 22&amp;quot; &amp;gt;&amp;gt; /etc/ssh/sshd_config.d/port.conf
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>sudo ufw status verbose
sudo ufw allow 22
&lt;/code>&lt;/pre>
&lt;p>重啟 sshd&lt;/p>
&lt;pre>&lt;code class="language-bash">service sshd restart
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://www.hostinger.com/tutorials/how-to-change-ssh-port-vps" target="_blank" rel="noopener">https://www.hostinger.com/tutorials/how-to-change-ssh-port-vps&lt;/a>&lt;/p></description></item><item><title>[Docker] 在 Ubuntu 安裝 Docker</title><link>https://blog.tigernaxo.com/posts/container/docker-install/</link><pubDate>Tue, 15 Nov 2022 08:46:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/docker-install/</guid><description>&lt;p>從 &lt;a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">Install Docker Engine on Ubuntu&lt;/a> 總結出腳本，直接執行就好：&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
# Uninstall old versions
sudo apt-get remove docker docker-engine docker.io containerd runc
# Set up the repository
# Update the apt package index and install packages to allow apt to use a repository over HTTPS
sudo apt-get update
sudo apt-get install \
ca-certificates \
curl \
gnupg \
lsb-release
# Add Docker’s official GPG key
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
# set up the repository
echo \
&amp;quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
# Install Docker Engine
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
# 把當前使用者加到 docker 群組
sudo usermod -aG docker ${USER}
# Verify that the Docker Engine installation is successful by running the hello-world image
sudo docker run hello-world
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">Install Docker Engine on Ubuntu&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[DIY] 設計一個可回傳 Promise 的 Dialog 元件方法</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-promise/</link><pubDate>Fri, 26 Aug 2022 15:03:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-promise/</guid><description>&lt;p>有用過 &lt;a href="https://sweetalert2.github.io/" target="_blank" rel="noopener">sweetalert2&lt;/a> 的話，應該會喜歡可以同步等待對話框回傳值的方式，
這裡做一個 Vue2 元件，呼叫該元件的方法會彈出對話框等待使用者輸入，並且回傳 Promise，
如此一來就能夠在同一個函式當中處理使用者輸入值。&lt;/p>
&lt;p>Dialog 元件設計原理:&lt;/p>
&lt;ol>
&lt;li>元件方法 GetConfirm() 顯示 Dialog 元件並回傳一個 Promise，。&lt;/li>
&lt;li>設置&lt;a href="https://vuejs.org/v2/api/#vm-watch" target="_blank" rel="noopener">watcher&lt;/a>讓元件取得使用者輸入後 resolve promise&lt;/li>
&lt;/ol>
&lt;p>得利於上述元件的設計，實際上的效益是將複雜度封裝到子元件裡面(watcher移動到元件內)，
如此不需在上層元件撰寫使用者輸入取值的監視邏輯，
讓我們得以在上層元件直接 await GetConfirm 同步取得值進行操作。&lt;/p>
&lt;p>這個概念的用途非常廣，例如 Vue router 的 component route guard，在離開表單頁面前跳出使用者確認的 Dialog。&lt;/p>
&lt;h2 id="vue3-實作">Vue3 實作&lt;/h2>
&lt;pre>&lt;code class="language-html">&amp;lt;template&amp;gt;
&amp;lt;v-dialog v-model=&amp;quot;dialog&amp;quot; v-bind=&amp;quot;$attrs&amp;quot;&amp;gt;
&amp;lt;slot v-bind=&amp;quot;{ Resolve }&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/v-dialog&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script setup&amp;gt;
import { ref } from &amp;quot;vue&amp;quot;;
const dialog = ref(false);
let resolve = null;
const Resolve = (v) =&amp;gt; {
resolve(v);
dialog.value = false;
};
const GetResult = async () =&amp;gt; {
dialog.value = true;
return new Promise((res) =&amp;gt; (resolve = res));
};
defineExpose({ GetResult, Resolve });
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="舊vuejs-實作">[舊]Vuejs 實作&lt;/h2>
&lt;pre>&lt;code class="language-html">&amp;lt;button id=&amp;quot;xBtn&amp;quot;&amp;gt;執行測試&amp;lt;/button&amp;gt;
&amp;lt;div id=&amp;quot;xApp&amp;quot; class=&amp;quot;modal&amp;quot; :style=&amp;quot;{display: dialog?'block':'none'}&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
&amp;lt;span class=&amp;quot;close&amp;quot;&amp;gt;Test Modal&amp;lt;/span&amp;gt;
&amp;lt;p&amp;gt;The value selected will resolve by promise.&amp;lt;/p&amp;gt;
&amp;lt;button @click=&amp;quot;choose(1)&amp;quot;&amp;gt;1&amp;lt;/button&amp;gt;
&amp;lt;button @click=&amp;quot;choose(2)&amp;quot;&amp;gt;2&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-html">&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
let data = { result: null, dialog: false }
let dialog = new Vue({
el: '#xApp',
data:() =&amp;gt; data,
methods: {
getConfirm() {
// 先清空 result (避免兩次選中一樣的值無法觸發 watcher)
this.result = null
// open dialog
this.dialog = true
return new Promise((resolve, reject) =&amp;gt; {
try {
const watcher = this.$watch(
// 設置監視的對象為 result
() =&amp;gt; this.result ,
// 一旦 result 的值有改變，就 resolve promise，並啟動下一輪 watcher
(newVal) =&amp;gt; resolve(newVal) &amp;amp;&amp;amp; watcher()
)
} catch (error) {
// 如果出錯就 reject promise
reject(error)
}
})
},
choose(value) {
// 為 result 設置值觸發 watcher 解開 promise
this.result = value
// 關閉 dialog
this.dialog = false
}
}
})
document.getElementById('xBtn')
.addEventListener( 'click',
async e =&amp;gt; alert( await dialog.getConfirm() )
);
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-css">/* The Modal (background) */
.modal {
display: none; /* Hidden by default */
position: fixed; /* Stay in place */
z-index: 1; /* Sit on top */
padding-top: 100px; /* Location of the box */
left: 0;
top: 0;
width: 100%; /* Full width */
height: 100%; /* Full height */
overflow: auto; /* Enable scroll if needed */
background-color: rgb(0,0,0); /* Fallback color */
background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}
/* Modal Content */
.modal-content {
background-color: #fefefe;
margin: auto;
padding: 20px;
border: 1px solid #888;
width: 80%;
}
&lt;/code>&lt;/pre>
&lt;h2 id="舊vue-next-實作">[舊]Vue-next 實作&lt;/h2>
&lt;p>這裡使用 vue-next/setup/quasar/typescript&lt;/p></description></item><item><title>[DIY] 利用 orphan branch 和 worktree 在同一 Git 儲存庫控管原始碼與靜態資源分支</title><link>https://blog.tigernaxo.com/posts/devops/git-orphan-worktree/</link><pubDate>Thu, 25 Aug 2022 14:23:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/git-orphan-worktree/</guid><description>&lt;p>目前使用 docker 疊前端的編譯環境比較複雜，不比本機端方便，本篇的把 SSG 發布流程移植到前端專案。&lt;/p>
&lt;ul>
&lt;li>一鍵產生前端靜態資源到特定分支，可設定該分支進入 CI/CD 流程。&lt;/li>
&lt;li>在同一 Git Repo 管理部屬的靜態資源與原始碼。
P.S.這裡是以 quasar CLI 為例，專案放在 gitlab，腳本可在 git bash 環境執行，build 指令是 quasar build，輸出的 路徑是 dist/spa，不同專案架構需要作相對應調整。&lt;/li>
&lt;/ul>
&lt;h2 id="git-設定">Git 設定&lt;/h2>
&lt;h3 id="建立一個-spa-orphan-branch">建立一個 spa orphan branch&lt;/h3>
&lt;p>P.S. 不需在 gitlab 上事先新增相對應的 branch&lt;/p>
&lt;pre>&lt;code class="language-bash">git checkout --orphan spa
git reset --hard
git commit --allow-empty -m &amp;quot;Initializing gh-pages branch&amp;quot;
git push origin spa
git checkout master
&lt;/code>&lt;/pre>
&lt;h3 id="新增部屬腳本-deploysh">新增部屬腳本 deploy.sh&lt;/h3>
&lt;p>新增到專案跟目錄&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
# 如果要檢查是否有 commit才進行部屬，就取消註解
# if [ &amp;quot;`git status -s`&amp;quot; ]
# then
# echo &amp;quot;The working directory is dirty. Please commit any pending changes.&amp;quot;
# exit 1;
# fi
echo &amp;quot;Deleting old publication&amp;quot;
rm -rf dist
mkdir dist
# 清空 worktree
git worktree prune
rm -rf .git/worktrees/dist/
# 新增 worktree
echo &amp;quot;Checking out spa branch into /dist&amp;quot;
git worktree add -B spa dist origin/spa
echo &amp;quot;Generating site&amp;quot;
quasar build &amp;amp;&amp;amp; cp -r deploy/. dist/
echo &amp;quot;Updating spa branch&amp;quot;
cd dist &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;Publishing to spa &amp;quot;
#echo &amp;quot;Pushing to github&amp;quot;
git push --all
&lt;/code>&lt;/pre>
&lt;h3 id="修改-packagejson-新增一項-scriptdeploy">修改 package.json 新增一項 script：deploy&lt;/h3>
&lt;pre>&lt;code class="language-json">&amp;quot;deploy&amp;quot;: &amp;quot;bash deploy.sh&amp;quot;,
&lt;/code>&lt;/pre>
&lt;h3 id="把-branch-設置為-protected">把 branch 設置為 Protected&lt;/h3>
&lt;p>先執行一次 &lt;code>npm run deploy&lt;/code>，讓 git 上產生 spa 這個 orphan branch
再到這裡把 spa 設定為 Protected Branche：&lt;code>Settings-&amp;gt;Repository-&amp;gt;Protected Branches&lt;/code>&lt;/p></description></item><item><title>[.NET] 開發階段管理應用程式的敏感資料</title><link>https://blog.tigernaxo.com/posts/dotnet/secret/</link><pubDate>Fri, 29 Jul 2022 14:57:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/secret/</guid><description>&lt;p>基於資訊安全的理由，密碼等敏感性資訊不應該出現在程式碼裡面，
應該把敏感性資料儲存在專案以外的地方，防止對 Git Server 提交專案程式碼的時候把密碼推送到伺服器上，
因此程式開發、部屬階段都應該用適當的策略存放敏感性資料讓程式讀取使用，
.NET 儲存敏感性資料大致上來說可以用這兩種方式：&lt;/p>
&lt;ul>
&lt;li>環境變數&lt;/li>
&lt;li>Secret Manager&lt;/li>
&lt;/ul>
&lt;p>這裡紀錄要如何在 .NET 開發環境以 Secret 儲存敏感性資料，以及程式讀取的方式。&lt;/p>
&lt;h2 id="secret-manager">Secret Manager&lt;/h2>
&lt;p>Secret Manager 就是在本地端特定路徑存放 secret.json 檔案：&lt;/p>
&lt;pre>&lt;code class="language-bat">%APPDATA%\Microsoft\UserSecrets\&amp;lt;user_secrets_id&amp;gt;\secrets.json
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-Linux/MacOS">~/.microsoft/usersecrets/&amp;lt;user_secrets_id&amp;gt;/secrets.json
&lt;/code>&lt;/pre>
&lt;p>需要先針對個別專案啟用專案的 Secret Storage 支援，切換到專案目錄執行：&lt;/p>
&lt;pre>&lt;code class="language-bash">dotnet user-secrets init
&lt;/code>&lt;/pre>
&lt;p>在專案檔裡的 UserSecretsId 區段會得到一段 GUID，這個要作為 user_secrets_id 資料夾名稱。&lt;/p>
&lt;pre>&lt;code class="language-xml">&amp;lt;PropertyGroup&amp;gt;
&amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
&amp;lt;UserSecretsId&amp;gt;79a3edd0-2092-40a2-a04d-dcb46d5ca9ed&amp;lt;/UserSecretsId&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>以指令設置一組 secret，例如連線字串：&lt;/p>
&lt;pre>&lt;code class="language-bash">dotnet user-secrets set &amp;quot;ConnectionStrings:POSTGRES&amp;quot; &amp;quot;User ID=root;Password=myPassword;Host=localhost;Port=5432;Database=myDataBase;Pooling=true;Min Pool Size=0;Max Pool Size=100;Connection Lifetime=0;&amp;quot; --project &amp;quot;D:\workspace\MySolution\MyProject&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>以檔案直接設置 secret
windows&lt;/p>
&lt;pre>&lt;code class="language-bat">type .\input.json | dotnet user-secrets set
&lt;/code>&lt;/pre>
&lt;p>Linux/MacOS&lt;/p></description></item><item><title>[K8S] 自架 Kubernetes 使用 VM 模擬多台 Server</title><link>https://blog.tigernaxo.com/posts/container/k8s-basc-install/</link><pubDate>Sat, 23 Jul 2022 20:51:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/k8s-basc-install/</guid><description>&lt;p>準備/安裝兩台 Server ( 使用 VM clone 然後修改 hostname )
一台為 Master (主控)，另外一台為 Node ( 節點 )
安裝 kubelet/kubeadm ( Master 與 node 皆要執行此步驟 )&lt;/p>
&lt;pre>&lt;code class="language-bash"># 設定 k8s server上網路
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
# 安裝 kubeadm / kubelet
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
# 安裝 Docker
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;quot;
sudo apt update
sudo apt-get install docker-ce -y
docker --version
sudo systemctl start docker
sudo chmod 666 /var/run/docker.sock
sudo systemctl enable docker
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/docker/daemon.json
{
&amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;]
}
EOF
sudo systemctl restart docker
# 關閉 swap
sudo swapoff -a
sudo sed -i '/\/swap/s/^/#/' /etc/fstab
# 設定服務自動重啟
systemctl enable kubelet
# Master Node 啟動
sudo kubeadm init --pod-network-cidr=192.168.0.0/16
kubectl taint nodes --all node-role.kubernetes.io/master-
# kubeconfig
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Deploying a pod network
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code>&lt;/pre></description></item><item><title>[.NET] 製作 Nuget package</title><link>https://blog.tigernaxo.com/posts/dotnet/nuget/</link><pubDate>Fri, 22 Jul 2022 14:07:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/nuget/</guid><description>&lt;h2 id="安裝-nugetexe-cli">安裝 nuget.exe CLI&lt;/h2>
&lt;p>安裝 &lt;a href="https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#nugetexe-cli" target="_blank" rel="noopener">nuget.exe CLI&lt;/a>，並在環境變數 PATH 新增路徑。&lt;/p>
&lt;h2 id="建立-nuspec-設定檔">建立 nuspec 設定檔&lt;/h2>
&lt;p>example&lt;/p>
&lt;pre>&lt;code class="language-xml">&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package &amp;gt;
&amp;lt;metadata&amp;gt;
&amp;lt;id&amp;gt;MyPackage&amp;lt;/id&amp;gt; &amp;lt;!--package id --&amp;gt;
&amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;!--版本號--&amp;gt;
&amp;lt;title&amp;gt;MyPackage&amp;lt;/title&amp;gt; &amp;lt;!-- package title --&amp;gt;
&amp;lt;authors&amp;gt;Chen, Yu Cheng&amp;lt;/authors&amp;gt; &amp;lt;!-- 作者 --&amp;gt;
&amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;
&amp;lt;license type=&amp;quot;expression&amp;quot;&amp;gt;MIT&amp;lt;/license&amp;gt;
&amp;lt;!-- &amp;lt;icon&amp;gt;icon.png&amp;lt;/icon&amp;gt; --&amp;gt;
&amp;lt;!--&amp;lt;projectUrl&amp;gt;http://project_url_here_or_delete_this_line/&amp;lt;/projectUrl&amp;gt;--&amp;gt;
&amp;lt;description&amp;gt;MyPackage&amp;lt;/description&amp;gt;
&amp;lt;releaseNotes&amp;gt;Test release of MyPackage package.&amp;lt;/releaseNotes&amp;gt;
&amp;lt;copyright&amp;gt;-&amp;lt;/copyright&amp;gt;
&amp;lt;tags&amp;gt;&amp;lt;/tags&amp;gt;
&amp;lt;dependencies&amp;gt;
&amp;lt;!-- 定義 .net framework 4.0 使用時需要的相依姓套件 --&amp;gt;
&amp;lt;group targetFramework=&amp;quot;.NETFramework4.0.0&amp;quot; &amp;gt;
&amp;lt;dependency id=&amp;quot;Dapper&amp;quot; version=&amp;quot;1.50.2&amp;quot; /&amp;gt;
&amp;lt;dependency id=&amp;quot;Newtonsoft.Json&amp;quot; version=&amp;quot;7.0.1&amp;quot; /&amp;gt;
&amp;lt;/group&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="打包檔案">打包檔案&lt;/h2>
&lt;p>假設最低系統需求為 .net framework 4.0，將 Release 複製檔案複製到對應版本的資料夾內，目錄結構如下：&lt;/p></description></item><item><title>[K8s] 以 Secrete 共享 tnsnames.ora</title><link>https://blog.tigernaxo.com/posts/container/k8s-example-tnsnames.ora/</link><pubDate>Thu, 21 Jul 2022 08:05:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/k8s-example-tnsnames.ora/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Managed ODP.NET 連線資料庫標榜不需要額外安裝 Oracle Client，資料庫連線資訊可以透過：&lt;/p>
&lt;ul>
&lt;li>程式內直接設定 connection string。&lt;/li>
&lt;li>解析環境變數 TNS_ADMIN 所指資料夾下的 tnsnames.ora。&lt;/li>
&lt;/ul>
&lt;p>考慮到可維護性，一旦連線資訊有所變動(Ip/Domain/Port/Service Name/SID)，如果直接將連線字串寫在程式裡面，就需要重新佈署每個程式專案，
因此如果讓 Managed ODP.NET 讀取共用的設定就能夠擁有只維護一份連線資訊的方便性。&lt;/p>
&lt;p>單主機的做法是部屬 tnsnames.ora 檔案，但因為 K8S 中 pod 都是隔離的環境，要共用連線資訊透過研究可能有這幾種方式：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>ExternalName Service&lt;/strong> 對應外部的資料庫位址，無法因應 ip, service name, sid 修改。&lt;/li>
&lt;li>&lt;strong>Service + Endpoints&lt;/strong> 轉送 ip 和 port。&lt;/li>
&lt;li>&lt;strong>Secret Volume&lt;/strong> 共用 tnsnames.ora。&lt;/li>
&lt;/ol>
&lt;p>三種連線資訊共用策略是否能反映連線資訊修改：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>ExternalName Service&lt;/th>
&lt;th>Service + Endpoints&lt;/th>
&lt;th>Secret Volume&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Ip/Domain&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Port&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Name/SID&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="step">Step&lt;/h2>
&lt;p>Secret 用處：&lt;/p></description></item><item><title>[.NET] .NET 6 Web API 專案</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-webapi/</link><pubDate>Mon, 18 Jul 2022 11:35:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-webapi/</guid><description>&lt;h2 id="添加-swagger">添加 Swagger&lt;/h2>
&lt;pre>&lt;code class="language-bash">dotnet add web-logger.csproj package Swashbuckle.AspNetCore -v 6.2.3
&lt;/code>&lt;/pre>
&lt;p>Program.cs&lt;/p>
&lt;pre>&lt;code class="language-c#">builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
&lt;/code>&lt;/pre>
&lt;p>&lt;code>https://localhost:&amp;lt;port&amp;gt;/swagger/index.html&lt;/code>
添加一行 uniFormat 設置，讓專案除錯啟動的時候打開 swagger
讓Swagger 認得 IActionResult 的 api 接收/回傳型別
&lt;a href="https://stackoverflow.com/questions/53105513/swagger-not-generating-model-for-object-wrapped-by-iactionresult" target="_blank" rel="noopener">https://stackoverflow.com/questions/53105513/swagger-not-generating-model-for-object-wrapped-by-iactionresult&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-json">&amp;quot;serverReadyAction&amp;quot;: {
&amp;quot;action&amp;quot;: &amp;quot;openExternally&amp;quot;,
&amp;quot;pattern&amp;quot;: &amp;quot;^\\s*Now listening on:\\s+(https?://\\S+)&amp;quot;,
&amp;quot;uriFormat&amp;quot;: &amp;quot;%s/swagger&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>ASP.NET Core doesn&amp;rsquo;t include a logging provider for writing logs to files. To write logs to files from an ASP.NET Core app, consider using a third-party logging provider.
&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-6.0" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-6.0&lt;/a>
.NET Standard 2.0 之後內建沒有 ConfigurationManager ，需要額外安裝
&lt;code>dotnet add package System.Configuration.ConfigurationManager --version 6.0.0&lt;/code>
&lt;a href="https://stackoverflow.com/questions/46360716/cant-use-system-configuration-configuration-manager-in-a-net-standard2-0-libra" target="_blank" rel="noopener">https://stackoverflow.com/questions/46360716/cant-use-system-configuration-configuration-manager-in-a-net-standard2-0-libra&lt;/a>&lt;/p></description></item><item><title>[Web] API Design</title><link>https://blog.tigernaxo.com/posts/web/web-api-design/</link><pubDate>Mon, 11 Jul 2022 11:35:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/web/web-api-design/</guid><description>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/index-best-practices" target="_blank" rel="noopener">Best practices in cloud applications&lt;/a>&lt;/p></description></item><item><title>[Web] RESTful 敏感性 GET 參數</title><link>https://blog.tigernaxo.com/posts/web/security-get/</link><pubDate>Mon, 11 Jul 2022 11:35:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/web/security-get/</guid><description>&lt;h2 id="網址列參數洩漏風險">網址列參數洩漏風險&lt;/h2>
&lt;p>目前網頁後端資源存取大多以 RESTful Api 開發，
REST 標準下 API 的設計需符合冪等性(idempotent)，
SSL 連線連接 TCP 層與 HTTP 層，因此透過 HTTPS 傳輸的網頁，網址進入 TCP 層之後是被加密的，
即使封包被截取也只能看見要傳送的目標主機
那麼敏感性資料可以透過 GET 參數傳送嗎？&lt;/p>
&lt;p>如果將機敏性資料夾帶於網址列當中會有洩漏的安全性風險，諸如：&lt;/p>
&lt;ul>
&lt;li>被 Shoulder surfers 竊取。(你的螢幕被偷看)&lt;/li>
&lt;li>隨著頁面列印被印出。&lt;/li>
&lt;li>使用者將連結加入書籤。&lt;/li>
&lt;li>儲存在瀏覽器瀏覽歷史紀錄。&lt;/li>
&lt;li>被記錄在 Web Server 的 Log，而 Log 本身可能不安全。&lt;/li>
&lt;/ul>
&lt;h2 id="隱藏-restful-get-參數">隱藏 RESTful GET 參數&lt;/h2>
&lt;p>因此避免這些資料外洩的可能，根本的做法就是讓機敏性資料從網址列消失，最好的做法是依據 OWASP 的建議把 參數夾帶在 Header 裡面，其他手段整理：&lt;/p>
&lt;ul>
&lt;li>將機敏性資料加密，但加密也&lt;strong>會破壞 API RESTful 特性&lt;/strong>，在後端需要先解密無法直接對應回物件。&lt;/li>
&lt;li>以 POST 的一部份傳輸(透過 HTTPS)，但&lt;strong>會直接破壞 API 的 RESTful 特性&lt;/strong>。&lt;/li>
&lt;li>根據 &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html" target="_blank" rel="noopener">OWASP REST Security Cheat Sheet&lt;/a>，應該把敏感性參數夾帶在 GET 請求的 HTTP Header 裡面透過 HTTPS 傳輸。&lt;/li>
&lt;/ul>
&lt;p>P.S. OWASP 的 Cheat Sheet 可看出並非所有資料都要不能出現在網址列，只有機敏性資料才需要考慮從網址列移除。`&lt;/p></description></item><item><title>[SQL] Ranking</title><link>https://blog.tigernaxo.com/posts/database/sql-ranking/</link><pubDate>Fri, 17 Jun 2022 15:42:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/database/sql-ranking/</guid><description>&lt;p>先建立一個練習表格：&lt;/p>
&lt;pre>&lt;code class="language-sql">CREATE TABLE Department
(
id SERIAL PRIMARY KEY,
name VARCHAR NOT NULL
);
CREATE TABLE Employee
(
id SERIAL PRIMARY KEY,
name VARCHAR NOT NULL,
salary INT,
dep_id INT,
);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Mandy', 45000, 2);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Emily', 43000, 1);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Sylvia', 26000, 2);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Eva', 48000, 3);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Sandra', 33000, 3);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Lily', 28000, 2);
INSERT INTO Employee(name, salary, dep_id) VALUES ('April', 50000, 1);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Cindy', 43000, 1);
INSERT INTO Employee(name, salary, dep_id) VALUES ('Kay', 40000, 3);
INSERT INTO Department(name) VALUES ('IT');
INSERT INTO Department(name) VALUES ('RD');
INSERT INTO Department(name) VALUES ('QA');
&lt;/code>&lt;/pre>
&lt;h2 id="資料排序">資料排序&lt;/h2>
&lt;p>直接用 ORDER BY 無法得到秩(排名)&lt;/p></description></item><item><title>[SQL] MERGE</title><link>https://blog.tigernaxo.com/posts/database/sql-merge/</link><pubDate>Tue, 14 Jun 2022 00:20:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/database/sql-merge/</guid><description>&lt;p>一段神奇的語法，可以指定對舊資料、新的資料分別進行不同的動作(通常是更新、新增)，
不指定的話預設是 BY TARGET，
動作目標都是 TARGET。&lt;/p>
&lt;p>在更新清單的時候特別好用。&lt;/p>
&lt;pre>&lt;code class="language-sql">MERGE INTO TABLE1 DEST -- 目標表格
USING( SELECT :K1 K1, :K2 K2, :K3 K3, :K4 K4, FROM DUAL) SRC
ON( DEST.K1 = SRC.K1 AND DEST.K2 = SRC.K2 AND DEST.K4 = SRC.K4 )
-- TARGET 有，SOURCE 沒有，更新 TARGET 裡面的紀錄
WHEN MATCHED THEN
UPDATE SET F1 = SRC.F1, F2 = SRC.F2,
-- TARGET 沒有，SOURCE 有，SOURCE 新增到 TARGET
WHEN NOT MATCHED THEN
INSERT ( K1, K2, K4, K3, F1, F2 )
VALUES ( :K1, :K2, :K4, :K3, :F1, :F2)
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/43738324/performing-merge-with-dapper-net" target="_blank" rel="noopener">[StackOverflow] Performing MERGE with Dapper.net&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Container] 學習資源</title><link>https://blog.tigernaxo.com/posts/container/basic-resource/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/basic-resource/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://hub.docker.com/" target="_blank" rel="noopener">DockerHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/" target="_blank" rel="noopener">K8S&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Docker] Docker Basic Command</title><link>https://blog.tigernaxo.com/posts/container/docker-command/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/docker-command/</guid><description>&lt;p>執行容器&lt;/p>
&lt;pre>&lt;code>docker run [image] [overwrite defalut commain]
&lt;/code>&lt;/pre>
&lt;p>列出正在執行的容器， &amp;ndash;all 可以列出曾經執行過的容器&lt;/p>
&lt;pre>&lt;code>docker ps [--all]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>docker run
docker ps --all
docker create
docker start (what different from docker run?)
docker system prune
docker logs
docker stop (send sigterm) 10s then docker kill
docker kill
docker build -t &amp;lt;dockerid&amp;gt;/&amp;lt;project&amp;gt;:latest .
docker exec -it &amp;lt;containerId&amp;gt; /bin/bash (i, t stands for?)
# execute new command
&lt;/code>&lt;/pre>
&lt;p>build context!
port mapping 是為了處理 into docker，docker 出來從來沒有被限制&lt;/p></description></item><item><title>[SQL] 用 CTE (Common Table Expression) 達成遞迴查詢，建立 MenuTree</title><link>https://blog.tigernaxo.com/posts/database/sql-cte/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/database/sql-cte/</guid><description>&lt;p>建立一個暫存表 testCTE，並暫存查詢語句(所有資料)的結果
MSSQL CTE 名稱前不需加上 RECURSEIVE 關鍵字，必須使用 UNION ALL
PostgreSQL：CTE 名稱前需加上 RECURSIVE 關鍵字，可用 UNION 或 UNION ALL&lt;/p>
&lt;pre>&lt;code class="language-sql">WITH CTE (id, name, parentId, lvl) AS
(
-- 取得第一層的資料(Anchor member)(假設沒有 parentId 的是第一層)
SELECT id, name parentId, 0 AS lvl FROM menus WHERE parentId IS NULL
UNION ALL
-- 遞迴取得 Recursive member
(
SELECT A.id, A.name, A.parentId, B.lvl + 1 AS lvl FROM menus A
INNER JOIN CTE B on A.parentIdi = B.d
)
)
SELECT * FROM CTE WHERE id=1 ORDER BY LEVEL
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/32681915/how-to-create-a-query-from-a-menu-tree-using-recursive-cte" target="_blank" rel="noopener">[StackOverflow] How to create a query from a menu tree using RECURSIVE CTE?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gss.com.tw/blog/sql-cte-recursive-query-postgresql-mssql" target="_blank" rel="noopener">[SQL] 使用 CTE 遞迴查詢 (PostgreSQL / MSSQL)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[DevOps] CI/CD-01 安裝 Jenkins</title><link>https://blog.tigernaxo.com/posts/devops/pipeline/01_install_jenkins/</link><pubDate>Mon, 18 Oct 2021 14:04:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/pipeline/01_install_jenkins/</guid><description>&lt;h1 id="環境">環境&lt;/h1>
&lt;p>硬體部分官方提到: RAM &amp;gt; 256NB，最好 2GB，空間留至少 10GB 放置 Docker 映像檔。
環境部分需要安裝 Java (8 或 11) 和 Docker&lt;/p>
&lt;h1 id="安裝-docker">安裝 Docker&lt;/h1>
&lt;pre>&lt;code class="language-bash"># 卸載舊的 docker
sudo apt-get remove -y docker docker-engine docker.io containerd runc
# 安裝必要的套件
# apt-transport-https 讓套件管理程式可以透過 https 協定使用 repo
sudo apt-get update
sudo apt-get install -y \
apt-transport-https \
ca-certificates \
curl \
gnupg \
lsb-release
# 添加 Docker 官方 GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
# 設置 stable 版本的 docker repository
echo \
&amp;quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
# 安裝 Docker Engine
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io
# 下載測試 image 並執行，預期會得到輸出然後 container 就會結束
sudo docker run hello-world
&lt;/code>&lt;/pre>
&lt;h1 id="執行-jenkins">執行 Jenkins&lt;/h1>
&lt;p>接著執行 Jenkins image，取得首次登入密碼&lt;/p></description></item><item><title>[Security] 利用免費開源資安檢測軟體 SonarQube 檢測 .NET Core 程式碼</title><link>https://blog.tigernaxo.com/posts/devops/sonarqube_netcore31/</link><pubDate>Wed, 22 Sep 2021 11:11:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/devops/sonarqube_netcore31/</guid><description>&lt;p>弱點掃描時常使用 owasp top 10 作為報告，
然而 owasp 軟體一年要價不菲，委外掃一次也是非常貴，
使用免費的 SonarQube 將弱點掃描整合到 CI/CD 階段，
要交付前再花錢委外掃一次似乎是個折衷的作法，避免一次檢測出來的弱點過多改動過大。&lt;/p>
&lt;p>SonarQube 分為兩個部分 SonarQube Server、Scanner (Client 端程式)。
Scanner 負責進行掃描並將結果上傳 Server，
而 Server 作為負責處理和儲存分析報告的 compute engine 會分析上傳的結果，
並提供 Web 使用者介面、搜尋功能，因此分析完成後就可以直接在 Web 上查看報告，
Scanner 除了能夠在 locale 端使用，還能直接整合到 CI/CD Server 上進行程式碼品質掃描。
雖說可以拿 localhost 直接作為 Server 使用，
這裡還是紀錄如何在虛擬機器上實際安裝 SonarQube，
以後在實際機器上安裝就可以作為參考，&lt;/p>
&lt;h1 id="準備-linux-server">準備 Linux Server&lt;/h1>
&lt;h2 id="硬體">硬體&lt;/h2>
&lt;p>個人使用或小規模的團隊在一台機器上安裝就足夠使用了，
如果需要架設提供大量服務的伺服器，官網也提供 Cluster 的安裝方式方便做 Loading Balance。&lt;/p>
&lt;p>這裡紀錄在一台 Ubuntu 20.04 上架設。
關於 Linux 安裝過程在這裡不加贅述，
官方提到硬體有幾個注意事項，對現代的硬體來說其實都還好，比較要注意的是硬碟空間：&lt;/p>
&lt;ul>
&lt;li>RAM 至少要 2G；free RAM 至少要 1G (所以用 Windows server 就要準備大很多喔)。&lt;/li>
&lt;li>上傳報告需要一定的空間，因次對硬碟的空間與效能有一定的要求，不夠的話容易太慢。&lt;/li>
&lt;li>server side 不支援 32-bit 作業系統；但 Scanner 可以支援 32-bit systems。&lt;/li>
&lt;/ul>
&lt;h2 id="安裝-openjdk-11">安裝 OpenJDK 11&lt;/h2>
&lt;pre>&lt;code class="language-bash">sudo apt update
sudo apt upgrade
sudo apt install openjdk-11-jdk
# 確認 java 版本
java --version
&lt;/code>&lt;/pre>
&lt;p>然後在 &lt;code>.bashrc&lt;/code> 裡面把 Java 添加到 PATH 變數上。&lt;/p></description></item><item><title>[Web] 把電腦的難字造字檔用 FontForge 轉為字型放到網頁上使用</title><link>https://blog.tigernaxo.com/posts/web/web-tool-eudc-frontforge/eudc/</link><pubDate>Tue, 24 Aug 2021 10:07:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/web/web-tool-eudc-frontforge/eudc/</guid><description>&lt;p>Web 在顯示姓名的時候常會遇到中文難字無法顯示，
此時開發者在本機端如果有安裝造字檔 EUDC.TTE 就可以轉為 &lt;code>woff&lt;/code>、&lt;code>woff2&lt;/code>、&lt;code>ttf&lt;/code> 讓網頁正確顯示難字。
過程需要字型工具軟體 &lt;a href="https://fontforge.org/en-US/" target="_blank" rel="noopener">FontForge&lt;/a>，
步驟如下：&lt;/p>
&lt;ol>
&lt;li>拿到造字檔 EUDC.TTE&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>用 &lt;code>cmd&lt;/code> 打開 &lt;code>regedit&lt;/code> (win10 搜尋圖示點下後，輸入 &lt;code>cmd&lt;/code>，出現小黑窗後再輸入 &lt;code>regedit&lt;/code>)&lt;/li>
&lt;li>找到機碼 HKEY_CURRENT_USER -&amp;gt; EUDC -&amp;gt; 950 資料夾下的 &lt;code>SystemDefaultEUDCFont&lt;/code> 設定檔。&lt;/li>
&lt;li>從設定檔的值就是 EUDC 的存放位址取出 &lt;code>EUDC.tte&lt;/code>，我這裡是 &lt;code>C:\CIBEN\EUDC.tte&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>安裝 &lt;a href="https://fontforge.org/en-US/" target="_blank" rel="noopener">FontForge&lt;/a>，找到 &lt;code>fontforge.exe&lt;/code> 的位址 (&lt;strong>注意，跟桌面捷徑呼叫的執行檔不一樣！&lt;/strong>)，我的是在 &lt;code>C:/Program Files (x86)/FontForgeBuilds/bin/fontforge.exe&lt;/code>&lt;/li>
&lt;li>建立一個轉檔腳本 &lt;code>tte-extract.pe&lt;/code>，內容如下
&lt;pre>&lt;code># Open EUDC TTE
Open(&amp;quot;EUDC.tte&amp;quot;, 4)
# CHANGE TTFNAME 2 EUDC
SetTTFName(0x409,1,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x409,2,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x409,3,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x409,4,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x404,1,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x404,2,&amp;quot;EUDC&amp;quot;)
SetTTFName(0x409,3,&amp;quot;&amp;quot;)
SetTTFName(0x404,4,&amp;quot;EUDC&amp;quot;)
SetFontNames(&amp;quot;EUDC&amp;quot;, &amp;quot;EUDC&amp;quot;, &amp;quot;EUDC&amp;quot;, &amp;quot;Regular&amp;quot;, &amp;quot;655&amp;quot;, &amp;quot;1.0.0&amp;quot;)
Generate(&amp;quot;EUDC.ttf&amp;quot;)
Generate(&amp;quot;EUDC.woff&amp;quot;)
Generate(&amp;quot;EUDC.woff2&amp;quot;)
Close()
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>把 &lt;code>EUDC.tte&lt;/code>、&lt;code>tte-extract&lt;/code>放在同一個位址，在該目錄下用指令執行轉檔 (fontforge.exe 的位址可能需要修改)： &lt;code>C:/Program\ Files\ \(x86\)/FontForgeBuilds/bin/fontforge.exe -script tte-extract.pe&lt;/code>&lt;/li>
&lt;li>得到的 &lt;code>woff&lt;/code>、&lt;code>woff2&lt;/code>、&lt;code>ttf&lt;/code> 用 css 設定為網頁字形：
&lt;ul>
&lt;li>設定網頁字形
&lt;pre>&lt;code>font-family: &amp;quot;EUDC&amp;quot;;
font-style: normal;
src: url('./fonts/EUDC.woff2') format('woff2'),
url('./fonts/EUDC.woff') format('woff'),
url('./fonts/EUDC.ttf') format('truetype');
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>套用網頁字形
&lt;pre>&lt;code>-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
font-family: '其他優先使用的字型', 'EUDC', sans-serif;
font-display: auto;
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="其他讓-rdlc-可顯示字造難字">其他：讓 RDLC 可顯示字造難字&lt;/h2>
&lt;h3 id="windows">windows&lt;/h3>
&lt;ul>
&lt;li>ttf 丟到 &lt;code>C:\Windows\Fonts&lt;/code>，可能要重啟 IDE 才抓得到字型。&lt;/li>
&lt;li>report 裡面的字型選擇 EUDC&lt;/li>
&lt;/ul></description></item><item><title>[DIY] Vue Router 使用 Navigation Guard 加入查詢參數</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-router_add_query/</link><pubDate>Thu, 19 Aug 2021 17:20:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-router_add_query/</guid><description>&lt;p>工作上需要把每一個路由都加上同一個 query string
第一直覺就是直接寫成這樣：&lt;/p>
&lt;pre>&lt;code class="language-js">router.beforeEach(async (to, from, next) =&amp;gt; {
next({
path: path,
query: {...to.queryl ,token: tokenStr}
})
})
&lt;/code>&lt;/pre>
&lt;p>結果卻跳出 &lt;code>Maximum call stack size exceeded&lt;/code> 的錯誤，判斷程式出現無窮迴圈：&lt;/p>
&lt;pre>&lt;code>runtime.js?96cf:285 Uncaught (in promise) RangeError: Maximum call stack size exceeded
&lt;/code>&lt;/pre>
&lt;p>第一個反應是傻眼貓咪，為什麼 &lt;code>next()&lt;/code> 不傳入參數的時候不會出現無窮迴圈，但塞進參數就會，
難道說 &lt;code>next()&lt;/code> 在傳入參數與不傳入參數的行為並不相同！！
因此去翻閱官網對 &lt;code>next()&lt;/code> 的說明：&lt;/p>
&lt;blockquote>
&lt;p>next: Function: &lt;strong>this function must be called to resolve the hook.&lt;/strong> The action depends on the arguments provided to next:&lt;/p>
&lt;p>&lt;strong>next(): move on to the next hook in the pipeline.&lt;/strong> If no hooks are left, the navigation is confirmed.&lt;/p></description></item><item><title>[.NET Core] 在 Ubuntu 20.04 上部署 .NET (使用 Nginx 反向代理)</title><link>https://blog.tigernaxo.com/posts/dotnet/deploy-ubuntu2004-nginx/ubuntu2004_nginx/</link><pubDate>Wed, 11 Aug 2021 16:48:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/deploy-ubuntu2004-nginx/ubuntu2004_nginx/</guid><description>&lt;h1 id="設置-ubuntu">設置 Ubuntu&lt;/h1>
&lt;h2 id="安裝-net-core-runtime">安裝 .NET Core Runtime&lt;/h2>
&lt;pre>&lt;code class="language-bash">wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
sudo apt update
sudo apt install apt-transport-https
sudo apt install dotnet-runtime-3.1
&lt;/code>&lt;/pre>
&lt;h2 id="安裝-nginx">安裝 Nginx&lt;/h2>
&lt;p>新增套件來源，新增檔案 /etc/apt/sources.list.d/nginx.list&lt;/p>
&lt;pre>&lt;code class="language-bash">#/etc/apt/sources.list.d/nginx.list.
deb https://nginx.org/packages/ubuntu/ focal nginx
deb-src https://nginx.org/packages/ubuntu/ focal nginx
&lt;/code>&lt;/pre>
&lt;p>安裝&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt update
sudo apt install nginx -y
&lt;/code>&lt;/pre>
&lt;p>啟動、設定開機啟動&lt;/p>
&lt;pre>&lt;code class="language-bash"># 啟動 nginx
sudo systemctl start nginx
# 設置 nginx 開機啟動
sudo systemctl enable nginx
# 確認 nginx 運行狀態
sudo systemctl status nginx
&lt;/code>&lt;/pre>
&lt;p>設置 Nginx 反向代理本機的 5000 連接埠(之後 Kestrel 的 http 服務端口)&lt;/p></description></item><item><title>[.NET] JsonDocument 與 DataTable 的互相轉換</title><link>https://blog.tigernaxo.com/posts/dotnet/snippet-json-dt/</link><pubDate>Fri, 06 Aug 2021 14:56:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/snippet-json-dt/</guid><description>&lt;p>在 LINQ 當道的時代雖然 DataTable 比較少用了，但還是難免會碰到，
下面紀錄如何在.NET Core 裡面把 DataTable 的資料轉成 JsonElement，&lt;/p>
&lt;pre>&lt;code class="language-c#">public JsonElement jsonFromDataTable(DataTable dt) {
using (var stream = new MemoryStream()) {
using (var writer = new Utf8JsonWriter(stream)) {
// 起始一個裝 JElement 的陣列
writer.WriteStartArray();
foreach (DataRow row in dt.Rows) {
// 開始寫入每個 Row 各自對應的 JElement 寫入程序
writer.WriteStartObject();
foreach (DataColumn column in row.Table.Columns) {
// 先寫入屬性名稱
writer.WritePropertyName(column.ColumnName);
// 判斷欄位值是否為 DBNull 來寫入值或 Null
if (row[column.ColumnName] == DBNull.Value)
writer.WriteNullValue();
else
JsonSerializer.Serialize(writer, row[column]);
}
// 結束一列資料對應的 JElement 寫入程序
writer.WriteEndObject();
}
// 結束整個陣列的寫入
writer.WriteEndArray();
}
// 最後 Stream 讀取的資料會寫成 JsonDocument 的 RootElement
return JsonDocument.Parse( stream.ToArray() ).RootElement;
}
}
&lt;/code>&lt;/pre>
&lt;p>使用方式：&lt;/p></description></item><item><title>[.NET] JsonElement 的操作</title><link>https://blog.tigernaxo.com/posts/dotnet/snippet-json-operate/</link><pubDate>Fri, 06 Aug 2021 14:37:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/snippet-json-operate/</guid><description>&lt;p>.NET Core 中對 JsonElement 的操作不像以往 Newtonsoft.Json 一樣直覺，
需要自己建立一個方便的讀寫方法，原理是寫到另一個 JsonDocument，
如果要移除某個屬性也是一樣的道理，變成從從屬性名稱判斷是不是要寫到新的 JsonDocument，
下面是添加一個屬性的範例。&lt;/p>
&lt;pre>&lt;code class="language-c#">public static class JsonExt
{
public static void Add(ref this JsonElement source, string name, string value)
{
using (MemoryStream ms = new MemoryStream())
{
using (Utf8JsonWriter writer = new Utf8JsonWriter(ms))
{
using (JsonDocument json = JsonDocument.Parse(&amp;quot;{}&amp;quot;))
{
writer.WriteStartObject(); // 開始
foreach (var el in source.EnumerateObject())
el.WriteTo(writer);
// 寫入新屬性
writer.WritePropertyName(name);
writer.WriteStringValue(value);
writer.WriteEndObject(); // 結束
}
}
var resultStr = Encoding.UTF8.GetString(ms.ToArray());
var resultEl = JsonDocument.Parse(resultStr).RootElement;
source = resultEl;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>通常我們會解析從其他 api 來的 json 字串，然後再進行一些操作：&lt;/p></description></item><item><title>[DIY] 用 Render Function 打造靈活的 CheckBox 元件範例</title><link>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-yncheckbox/</link><pubDate>Thu, 29 Jul 2021 13:50:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/frontend-vue/vue-comp-yncheckbox/</guid><description>&lt;ul>
&lt;li>情境1：要選取多個 ckeckbox 對應到資料庫的欄位，欄位值是一串YN代表某個選項是否有被選去，例如： YNNYYNNYYN&lt;/li>
&lt;li>情境2：要選取多個 ckeckbox 對應到資料庫的欄位，欄位值只有一個，可能是任何字元，例如： 1
可以打造兩個元件，分別對應至單選、多選&lt;/li>
&lt;/ul>
&lt;h1 id="單選元件">單選元件&lt;/h1>
&lt;h2 id="程式碼-code">程式碼 (Code)&lt;/h2>
&lt;pre>&lt;code class="language-js">Vue.component('x-ck-single', {
props: {
disabled: { type: Boolean, default: () =&amp;gt; false },
// checkbox 的標記 [string] || [{text:string, value:any}]
labels: { type: Array, default: () =&amp;gt; ['Yes', 'No'] },
value: { default: () =&amp;gt; null },
trueValue: { default: () =&amp;gt; 'Y' },
falseValue: { default: () =&amp;gt; 'N' },
inline: { type: Boolean, default: () =&amp;gt; false },
},
data() {
return {
innervalue_: this.value,
}
},
watch: {
value(v) {
this.innervalue_ = v
},
},
computed: {
innervalue: {
get() {
return this.innervalue_
},
set(v) {
this.innervalue_ = v
this.$emit('input', v)
},
},
},
render: function (h) {
const self = this
let len = self.labels.length // labels 的長度
let allStr = self.labels.every((label) =&amp;gt; typeof label == 'string') // 是否為 string
let allOkObj = self.labels.every((l) =&amp;gt; !!l.text &amp;amp;&amp;amp; !!l.value) // 是否為合法的物件(如果不是 string)
let siblingConf = null
if (allOkObj) {
siblingConf = self.labels.map((l) =&amp;gt; _.pick(l, ['text', 'value']))
} else if (allStr &amp;amp;&amp;amp; len &amp;lt;= 2) {
siblingConf = self.labels.map((text, idx) =&amp;gt; {
let value = idx === 0 ? self.trueValue : self.falseValue
return { text, value }
})
}
if (!siblingConf) {
let errStr = '無法正確設定元件,len,allStr,allOkObj'
return h('div', errStr, len, allStr, allOkObj)
}
// 設定 CheckBox
let { disabled } = self
let hideDetails = true
let dense = true
const baseProps = { hideDetails, dense, disabled }
const baseClass = self.inline ? ['d-inline-block'] : []
let siblings = siblingConf.map((c) =&amp;gt; {
let props = {
label: c.text,
inputValue: self.innervalue === c.value,
...baseProps,
}
// 如果只有一個選項，取消勾選時就顯示 falseValue
let valueOnNull = len === 1 ? self.falseValue : null
let on = {
change: (e) =&amp;gt; (self.innervalue = e ? c.value : valueOnNull),
}
return h(&amp;quot;v-checkbox&amp;quot;, { props, class: baseClass, on })
})
// 傳回整個元件
return h('div', {}, siblings)
}
})
&lt;/code>&lt;/pre>
&lt;div id="app">
&lt;x-ck-single v-model="value" inline>&lt;/x-ck-single>
{{value === null ? 'null' : value}}
&lt;/div>
&lt;script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js">&lt;/script>
&lt;script>
Vue.component('x-ck-single', {
props: {
disabled: { type: Boolean, default: () => false },
// checkbox 的標記 [string] || [{text:string, value:any}]
labels: { type: Array, default: () => ['Yes', 'No'] },
value: { default: () => null },
trueValue: { default: () => 'Y' },
falseValue: { default: () => 'N' },
inline: { type: Boolean, default: () => false },
},
data() {
return {
innervalue_: this.value,
}
},
watch: {
value(v) {
this.innervalue_ = v
},
},
computed: {
innervalue: {
get() {
return this.innervalue_
},
set(v) {
this.innervalue_ = v
this.$emit('input', v)
},
},
},
render: function (h) {
const self = this
let len = self.labels.length // labels 的長度
let allStr = self.labels.every((label) => typeof label == 'string') // 是否為 string
let allOkObj = self.labels.every((l) => !!l.text &amp;&amp; !!l.value) // 是否為合法的物件(如果不是 string)
let siblingConf = null
if (allOkObj) {
siblingConf = self.labels.map((l) => _.pick(l, ['text', 'value']))
} else if (allStr &amp;&amp; len &lt;= 2) {
siblingConf = self.labels.map((text, idx) => {
let value = idx === 0 ? self.trueValue : self.falseValue
return { text, value }
})
}
if (!siblingConf) {
let errStr = '無法正確設定元件,len,allStr,allOkObj'
return h('div', errStr, len, allStr, allOkObj)
}
// 設定 CheckBox
let { disabled } = self
let hideDetails = true
let dense = true
const baseProps = { hideDetails, dense, disabled }
const baseClass = self.inline ? ['d-inline-block'] : []
let siblings = siblingConf.map((c) => {
let props = {
label: c.text,
inputValue: self.innervalue === c.value,
...baseProps,
}
// 如果只有一個選項，取消勾選時就顯示 falseValue
let valueOnNull = len === 1 ? self.falseValue : null
let on = {
change: (e) => (self.innervalue = e ? c.value : valueOnNull),
}
return h("v-checkbox", { props, class: baseClass, on })
})
// 傳回整個元件
return h('div', {}, siblings)
}
})
&lt;/script>
&lt;script>
new Vue({
el: '#app',
data: { value: '' }
})
&lt;/script>
&lt;h1 id="多選元件">多選元件&lt;/h1>
&lt;h2 id="程式碼-code-1">程式碼 (Code)&lt;/h2></description></item><item><title>[架構] 多層式架構(Multitier Architecture)</title><link>https://blog.tigernaxo.com/posts/software/arch-n-tier/</link><pubDate>Mon, 17 May 2021 23:20:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/software/arch-n-tier/</guid><description>&lt;h1 id="多層式架構-multitier-architecture-">多層式架構 (Multitier Architecture) 🏗️&lt;/h1>
&lt;p>多層式架構（Multitier Architecture），也稱為 N-Tier Architecture，是**主從式架構（Client-Server Architecture）**的一種實現方式。在討論這個架構時，我們常會聽到「層」（layer）和「階」（tier）這兩個詞。&lt;/p>
&lt;p>這兩者主要的差別在於：&lt;/p>
&lt;p>層 (Layer)：指應用程式中邏輯功能的劃分，例如表現層、業務邏輯層、資料存取層。它關注的是程式碼的組織與職責分離。
階 (Tier)：指這些邏輯層在物理上的部署位置。一個「階」可以是一台獨立的伺服器、一個虛擬機或一個容器。它關注的是系統的實際部署環境。
簡單來說，Layer 是邏輯上的劃分，而 Tier 是物理上的部署。本篇文章主要討論的是物理部署層面的「階 (Tier)」。&lt;/p>
&lt;h2 id="n-tier-模型優點與權衡-">N-Tier 模型：優點與權衡 ⚖️&lt;/h2>
&lt;p>在 N-Tier 模型中，層與層之間的邊界有 N-1 個。程式碼每次跨越一個邊界，都會帶來顯著的效能耗損。據估計，僅僅是跨越同一台機器上不同進程（process）的邊界，效能損失就可能高達 1000 倍。如果這個邊界是透過網路進行的遠端呼叫，效能損失將更為巨大。&lt;/p>
&lt;p>因此，每增加一個 Tier，系統的複雜度就會提升，效能也可能呈幾何級數下降。對於簡單的應用程式來說，過多的層級劃分容易造成過度設計（Over-design）。&lt;/p>
&lt;p>在決定是否採用多層式架構時，必須在以下幾個優點與效能之間做出權衡：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>提高可擴展性 (Scalability)&lt;/strong>：可以針對特定的 Tier（例如應用程式伺服器）進行獨立擴展，以應對不斷增長的負載。&lt;/li>
&lt;li>&lt;strong>提高容錯率 (Fault Tolerance)&lt;/strong>：單一 Tier 的故障不會輕易導致整個系統癱瘓。例如，如果一台 Web 伺服器當機，負載平衡器可以將流量導向其他正常的伺服器。&lt;/li>
&lt;li>&lt;strong>提高安全性 (Security)&lt;/strong>：可以在不同 Tier 之間設置防火牆或不同的安全規則。例如，資料庫伺服器可以被嚴格保護在內部網路中，只允許應用程式層存取。&lt;/li>
&lt;li>&lt;strong>提高效能 (Performance)&lt;/strong>：雖然跨層通訊會有效能損耗，但透過將不同任務分配給專門的伺服器（例如，資料庫伺服器專門處理資料查詢），可以優化整體系統的處理效率和響應能力。&lt;/li>
&lt;/ul>
&lt;h2 id="常見的-tier-模型">常見的 Tier 模型&lt;/h2>
&lt;h3 id="單層式架構-1-tier-model">單層式架構 (1-Tier Model)&lt;/h3>
&lt;p>在單層模型中，所有的邏輯層（表現層、應用層、資料層）都運行在同一台機器、同一個進程中。這種架構下，由於沒有跨越進程或網路邊界，因此沒有額外的通訊效能損失。早期的個人電腦應用程式多屬於此類。&lt;/p>
&lt;h3 id="雙層式架構-2-tier-model">雙層式架構 (2-Tier Model)&lt;/h3>
&lt;p>雙層模型將邏輯層分配到兩個不同的記憶體空間運行。這兩個空間可能在同一台機器上，但更常見的是部署在兩台不同的機器上，也就是典型的主從式架構（Client-Server）。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Client (客戶端)&lt;/strong>：負責表現層。&lt;/li>
&lt;li>&lt;strong>Server (伺服器)&lt;/strong>：負責應用邏輯與資料存儲。&lt;/li>
&lt;/ul>
&lt;h3 id="三層式架構-3-tier-model">三層式架構 (3-Tier Model)&lt;/h3>
&lt;p>三層式架構是目前最廣泛應用的模型，尤其是在 Web 應用程式中。它將系統劃分為三個獨立的、可單獨部署和管理的 Tier。&lt;/p></description></item><item><title>[Tools] 10分鐘建造 proxy 克服跨網域資源存取(CORS)問題</title><link>https://blog.tigernaxo.com/posts/javascript/diy-http-proxy-middleware/</link><pubDate>Sat, 20 Mar 2021 08:45:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/diy-http-proxy-middleware/</guid><description>&lt;p>前後端分離的開發環境以 Ajax 呼叫資源時時會遇到跨網域存取的問題，
一些比較全面的開發環境像是 webpack、vue-cli 等等通常提供內建開發代理伺服器可供設置，
如果要對於不熟悉的開發環境進行快速除錯
(例如 vue 開發者臨時檢查其他框架的程式碼遇到跨網域問題)，
重新研究如何設置開發環境跨網域代理伺服器往往就花費多餘的時間
(不過最終還是要搭建起來阿，喂~~)，
因此紀錄一下怎麼用 node.js 建立一個通用的代理伺服器處理跨網域問題，整個過程不超過5分鐘。&lt;/p>
&lt;h1 id="步驟">步驟&lt;/h1>
&lt;h2 id="首先安裝-nodejs">首先安裝 &lt;a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js&lt;/a>&lt;/h2>
&lt;h2 id="建立專案資料夾">建立專案資料夾&lt;/h2>
&lt;p>建立一個資料夾叫做 proxy 存放這個專案吧，手動建立也可以。&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir proxy
&lt;/code>&lt;/pre>
&lt;h2 id="起始專案">起始專案&lt;/h2>
&lt;p>用指令移動到該專案資料夾下，起始專案：&lt;/p>
&lt;pre>&lt;code class="language-bash">cd proxy
npm init
&lt;/code>&lt;/pre>
&lt;h2 id="安裝相依性">安裝相依性&lt;/h2>
&lt;pre>&lt;code class="language-bash">npm i express http-proxy-middleware cors
&lt;/code>&lt;/pre>
&lt;h2 id="建立-appjs">建立 app.js&lt;/h2>
&lt;pre>&lt;code class="language-js">const express = require('express');
const cors = require('cors');
const { createProxyMiddleware } = require('http-proxy-middleware');
// 建立一個 Express 伺服器
const app = express();
app.use(cors())
// 設定 Express 伺服器的 Host、Port
const PORT = 3000;
const HOST = &amp;quot;localhost&amp;quot;;
// 設定代理到 google 的 Proxy 端點
app.use('/google', createProxyMiddleware({
target: &amp;quot;https://www.google.com/&amp;quot;,
changeOrigin: true,
pathRewrite: {
[`^/google`]: '',
},
}));
// 設定代理到 yahoo 的 Proxy 端點
app.use('/yahoo', createProxyMiddleware({
target: &amp;quot;https://tw.yahoo.com/&amp;quot;,
changeOrigin: true,
pathRewrite: {
[`^/yahoo`]: '',
},
}));
// 啟動代理伺服器
app.listen(PORT, HOST, () =&amp;gt; {
console.log(`Starting Proxy at ${HOST}:${PORT}`);
});
&lt;/code>&lt;/pre>
&lt;h2 id="啟動代理伺服器">啟動代理伺服器&lt;/h2>
&lt;pre>&lt;code class="language-bash">$ node app.js
[HPM] Proxy created: / -&amp;gt; https://www.google.com/
[HPM] Proxy rewrite rule created: &amp;quot;^/google&amp;quot; ~&amp;gt; &amp;quot;&amp;quot;
[HPM] Proxy created: / -&amp;gt; https://tw.yahoo.com/
[HPM] Proxy rewrite rule created: &amp;quot;^/yahoo&amp;quot; ~&amp;gt; &amp;quot;&amp;quot;
Starting Proxy at localhost:3000
&lt;/code>&lt;/pre>
&lt;h2 id="測試">測試&lt;/h2>
&lt;p>打開隨意網頁 F12，用 fetch api 透過 proxy 對 google 或 yahoo 發起 get 請求成功獲得資訊，且 Header 裡面會有&lt;code>Access-Control-Allow-Origin: *&lt;/code>：&lt;/p></description></item><item><title>[.NET Core] 不阻塞的非同步控制器(Non-Blocking Asynchronous Controllers)</title><link>https://blog.tigernaxo.com/posts/dotnet/basic-async-controller/</link><pubDate>Wed, 17 Mar 2021 03:32:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/basic-async-controller/</guid><description>&lt;p>ASP .NET Core 當中的 Web 控制器屬於IO密集的應用程式，當中主要使用的 TAP 是一種簡易使用、語言層級的非同步設計模式。
透過 TAP 可設計出非同步(Asynchronous)/非阻塞(Non-Blocking)的 Web API，大幅提高 Web 應用程式的併發性(Concurrency)。&lt;/p>
&lt;h1 id="非同步方法">非同步方法&lt;/h1>
&lt;p>C# 當中基於 TAP 設計的的非同步方法 (TAP method) 有幾個特性：&lt;/p>
&lt;ul>
&lt;li>產生可等待 awaitable 型別
(Task, Task&amp;lt;TResult&amp;gt;, ValueTask, 和 ValueTask&amp;lt;TResult&amp;gt;)，
其中以 Task、Task&amp;lt;TResult&amp;gt;最常見。&lt;/li>
&lt;li>非同步方法的參數順序通常跟同步版本的方法相同，但方法名稱以 Async 結尾。&lt;/li>
&lt;/ul>
&lt;h1 id="asyncawait">async、await&lt;/h1>
&lt;p>await 運算子用來等待非同步行為完成，
或等待非同步行為完成後解析回傳值，
await 運算子只能用在非同步方法中，
因此 await 運算子的外層方法必須套用 async 修飾，
否則會出現錯誤。&lt;/p>
&lt;h1 id="非同步-action-設計原則">非同步 Action 設計原則：&lt;/h1>
&lt;h2 id="總是加上-async-關鍵字">總是加上 async 關鍵字&lt;/h2>
&lt;p>async 的方法裡面可以等待非同步方法。
action 前加上 async 的作用在於建立一個管理回傳任務的狀態機(state machine)，
當 async 方法擲出例外時會被狀態機捕獲並放到任務中回傳，
而這也是以 Task 作為回傳值的方法的預期行為。
如果沒有 async 關鍵字則擲出的例外會被直接傳遞到呼叫者(caller)，
因此除非確定該 aciton 不會擲出任何例外，否則一律加上 async。&lt;/p></description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(二)-驗證設定</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_2/</link><pubDate>Fri, 12 Mar 2021 23:08:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_2/</guid><description>&lt;h1 id="驗證方案authentication-scheme">驗證方案(Authentication Scheme)&lt;/h1>
&lt;p>驗證方案包含兩個部分：&lt;/p>
&lt;ul>
&lt;li>驗證處理函式(Authentication handler)，可能是
&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.iauthenticationhandler?view=aspnetcore-3.1" target="_blank" rel="noopener">IAuthenticationHandler&lt;/a> 或
&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1?view=aspnetcore-3.1" target="_blank" rel="noopener">AuthenticationHandler&lt;TOptions>&lt;/a>
的實作，相當於驗證方案的&lt;strong>行為&lt;/strong>，責任範圍涵蓋:
&lt;ul>
&lt;li>驗證使用者，&lt;/li>
&lt;li>驗證成功時，建構呈現使用者識別(user identity)的 &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.authenticationticket?view=aspnetcore-3.1" target="_blank" rel="noopener">AuthenticationTicket&lt;/a>。&lt;/li>
&lt;li>驗證失敗時，回傳 &amp;rsquo;no result&amp;rsquo; 或 &amp;lsquo;failure&amp;rsquo;&lt;/li>
&lt;li>負責從請求上下文(request context)中建構使用者識別 (user identity)。&lt;/li>
&lt;li>定義了 challenge/forbid action。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>驗證處理函式的設定選項(Opitons of Authentication handler)。&lt;/li>
&lt;/ul>
&lt;p>驗證方案當中的 authencate action 負責從請求上下文(request context)中建構使用者識別 (user identity)，
常見的例子為：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>cookie authentication scheme&lt;/strong> 從 cookie 資訊建構 user identity.&lt;/li>
&lt;li>&lt;strong>JWT bearer scheme&lt;/strong> 反序列化(deserialize)、驗證(validate) token，並從 token 所攜帶資訊建構 user identity&lt;/li>
&lt;/ul>
&lt;h2 id="使用驗證方案">使用驗證方案&lt;/h2>
&lt;p>在 Startup.ConfigureServices 以 AddAuthentication 註冊驗證服務時會回傳一個 AuthenticationBuilder，
AuthenticationBuilder 設定驗證方案的方式有：&lt;/p>
&lt;ul>
&lt;li>呼叫 &lt;strong>scheme-specific 擴充方法&lt;/strong>，例如 AddJwtBearer、AddCookie，這些擴充方法會自動呼叫 AuthenticationBuilder.AddScheme 設定需要的驗證方式。&lt;/li>
&lt;li>以 AuthenticationBuilder &lt;strong>內建方法 AddScheme&lt;/strong> 手動設定，一般來說較少使用。&lt;/li>
&lt;/ul>
&lt;p>P.S.另外可使用 &lt;a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/authentication/policyschemes?view=aspnetcore-3.1" target="_blank" rel="noopener">polycy schemes&lt;/a> 把多個 scheme 整合到一個使用。&lt;/p></description></item><item><title>[Bot] Telegram bot</title><link>https://blog.tigernaxo.com/posts/other/telegram-bot/</link><pubDate>Fri, 29 Jan 2021 23:46:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/telegram-bot/</guid><description>&lt;p>找 @BotFather 對話打 /newbot，設定 name username，然後就會拿到 API token&lt;/p>
&lt;h2 id="referance">Referance&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/TelegramBots/Telegram.Bot" target="_blank" rel="noopener">Github-TelegramBots/Telegram.Bot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://telegrambots.github.io/book/" target="_blank" rel="noopener">Telegram.Bot-Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://core.telegram.org/bots/api" target="_blank" rel="noopener">Telegram Bot API&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Tools] 在 linux 中使用 google drive cli</title><link>https://blog.tigernaxo.com/posts/other/linux-gdrive-cli/</link><pubDate>Fri, 29 Jan 2021 23:46:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/linux-gdrive-cli/</guid><description>&lt;h1 id="重新編譯-gdrive">重新編譯 gdrive&lt;/h1>
&lt;h2 id="取得憑證">取得憑證&lt;/h2>
&lt;ul>
&lt;li>首先到&lt;a href="https://console.developers.google.com/apis/dashboard" target="_blank" rel="noopener">Google API Console&lt;/a>，&lt;/li>
&lt;li>建立專案&lt;/li>
&lt;li>啟動 Google Drive API。&lt;/li>
&lt;li>啟用之後選擇左邊的&amp;quot;設定同意畫面&amp;quot;，填寫必要的欄位其他依照需求設置就好&lt;/li>
&lt;li>建立一組 OAth2 憑證，會有 Client ID 和 Secret&lt;/li>
&lt;/ul>
&lt;h2 id="編譯專案">編譯專案&lt;/h2>
&lt;ul>
&lt;li>1.安裝 &lt;a href="https://golang.org/dl/" target="_blank" rel="noopener">Golang&lt;/a>&lt;/li>
&lt;li>2.下載 gdrive 專案
&lt;pre>&lt;code class="language-bash">git clone git@github.com:prasmussen/gdrive.git
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>3.修改專案下的&lt;code>handlers_drive.go&lt;/code>，把下列兩行改成拿到的 Client ID、Secret
&lt;pre>&lt;code class="language-go">const ClientId = &amp;quot;*************************************.com&amp;quot;
const ClientSecret = &amp;quot;*************&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>4.取得需要的 golang 套件
&lt;pre>&lt;code class="language-bash">go get github.com/prasmussen/gdrive
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>5.到專案資料夾下編譯，編譯完後就會有得到執行檔
&lt;pre>&lt;code class="language-bash">go build
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h1 id="設定">設定&lt;/h1>
&lt;h2 id="設置環境變數">設置環境變數&lt;/h2>
&lt;p>將編譯好的執行檔上傳Linux，假設放在${HOME}/gdrive-linux-x64：&lt;/p>
&lt;pre>&lt;code class="language-bash"># 建立${HOME}/bin
$ mkdir -p ${HOME}/bin
# 把gdrive-linux-x64放進去重新命名為gdrive
$ mv ${HOME}/gdrive-linux-x64 ${HOME}/bin/gdrive
# 賦予gdrive執行權限
$ chmod u+x ${HOME}/bin/gdrive
# 如果PATH裡面找不到${HOME}/bin就新增並重新讀取環境設定
$ echo ${PATH} | grep -qE ${HOME}/bin[^/] &amp;amp;&amp;amp; \
&amp;gt; echo &amp;quot;PATH=\${HOME}/bin:\${PATH}&amp;quot; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
&amp;gt; . ~/.bashrc
&lt;/code>&lt;/pre>
&lt;h2 id="連結google帳戶">連結google帳戶&lt;/h2>
&lt;p>安裝好Google drive CLI後需要取得雲端硬碟帳戶授權，gdrive預設會在${HOME}/.gdrive底下找授權檔，
由於目前我們沒有任何授權，所以需要先下簡單的指令觸發token請求，
取得token之後會出現一個檔案叫做${HOME}/.gdrive/token_v2.json，
並且在終端機出現雲端硬碟所有檔案及資料夾清單(預設最多出現30筆)：&lt;/p></description></item><item><title>[JS] 非同步程式設計-Promise 與 Async/Await</title><link>https://blog.tigernaxo.com/posts/javascript/js-async/</link><pubDate>Sat, 09 Jan 2021 01:32:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-async/</guid><description>&lt;h1 id="promise">Promise&lt;/h1>
&lt;h2 id="promise-狀態">Promise 狀態&lt;/h2>
&lt;p>Promise function 執行後會立即回傳一個稱為 Promise 的物件，
Promise 本身帶有三種狀態：&lt;/p>
&lt;ul>
&lt;li>pending: 已初始化，但尚未成功或失敗。&lt;/li>
&lt;li>fulfilled: 操作成功完成。&lt;/li>
&lt;li>rejected: 操作失敗結束。&lt;/li>
&lt;/ul>
&lt;p>promise 一但被回傳就處於 pending 狀態，
promise 的建構式有兩個參數個接收一個 function，可以操作 Promise 的 fulfilled 和 rejected。&lt;/p>
&lt;pre>&lt;code class="language-js">// resolve(value): 放入解析的值
// reject(reson): 放入拒絕的理由
function test(value){
let reason = '找不到 value'
return new Promise((resolve, reject)=&amp;gt;{
value ? resolve(value) :reject(reason)
})
}
&lt;/code>&lt;/pre>
&lt;h2 id="將-promise-繫結回呼函式">將 Promise 繫結回呼函式&lt;/h2>
&lt;p>若要將某個程式語句安排在 Promise 被滿足之後執行。
可以利用 Promise.prototype 上的三個物件方法(Instance Method)方法繫結回呼函式(callback function)：
then catch finally
resolve 會被 then 捕獲，reject 會被最近的 catch 捕獲&lt;/p></description></item><item><title>[JS] 提升(Hoisting)與暫時性死區(Temporal Dead Zone)</title><link>https://blog.tigernaxo.com/posts/javascript/js-hoisting/</link><pubDate>Sat, 09 Jan 2021 01:31:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-hoisting/</guid><description>&lt;p>網路上時常見到充滿 function 與 var 的 JavaScript 求值題目，
筆者在釐清 Hoisting 和 TDZ 的觀念前時常覺得答案出乎意料，
雖然現在撰寫程式碼都已經避免使用 var，但是維護 legacy code 還是會用到，因此在這裡做個筆記。&lt;/p>
&lt;h1 id="hoisting">Hoisting&lt;/h1>
&lt;p>對學過伺服器端語言(C#、C/C++&amp;hellip;)的人來說，預期試圖對未宣告的變數取值會出現 ReferenceError是很正常的事，
在 JavaScript 中也是如此：&lt;/p>
&lt;pre>&lt;code class="language-js">console.log(x) // ReferenceError: x is not defined
&lt;/code>&lt;/pre>
&lt;p>但 JavaScript 把 var 宣告變數放在後面，x 前面對 x 取值就變成 undefine，
在 JavaScript 當中對變數取值獲得 undefine 代表變數處於宣告後&lt;strong>已分配記憶體空間(初始化、initiation)&lt;strong>但&lt;/strong>尚未賦值&lt;/strong>的狀態，
但是明明 JavaScript 在宣告前就取值，怎麼能夠認得 x、而且知道 x 被初始化為 undefined 呢？&lt;/p>
&lt;pre>&lt;code class="language-js">console.log(x) // undefined
var x
&lt;/code>&lt;/pre>
&lt;p>原因在於 javascript 會先程式中的蒐集 var(let/const/function) 宣告並釐清對應的作用域，
最後再執行程式碼，這個行為就如同宣告被提升(Hoisting)到前面行數的程式碼中一樣。&lt;/p>
&lt;p>JavaScript 跟傳統 OOP 語言一樣，在變數提升後、宣告初始化、賦值等等時機取用變數會獲得不同輸出結果，
這篇文章(&lt;a href="https://www.iteye.com/blog/rednaxelafx-492667" target="_blank" rel="noopener">link&lt;/a>)中提到，
稱 JavaScript 為直譯式(解釋型)語言實際上是通俗的說法，語言本身沒有規定實現的方式(編/直譯)，
舉例來說 Chrome 瀏覽器所使用的 Google V8 JavaScript engine，
所帶的解釋器 (interpreter) 會將程式編譯 (compile) 成字節碼 (bytecode)，
最後再由編譯器 (compiler) 即時編譯 (JIT;just-in-time compilation) 編譯成機器碼執行，
而 JavaScript 被編譯時宣告會被蒐集到最頂端進行定義並區分作用域(scope)，這個行為就是 Hoisting
，記住重點在於&lt;strong>JS編譯後會先定義變數及區分作用域&lt;/strong>，編譯後的程式看起來就像這樣：&lt;/p></description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(四)-授權設定</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_4/</link><pubDate>Thu, 31 Dec 2020 14:08:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_4/</guid><description>&lt;h1 id="授權authorization">授權(Authorization)&lt;/h1>
&lt;ul>
&lt;li>授權(Authorization): 界定用戶可存取資源範圍的程序。&lt;/li>
&lt;/ul>
&lt;h2 id="policy-based-authorization">Policy-based authorization&lt;/h2>
&lt;p>ASP .NET Core 的授權以政策 Policy 進行設定&lt;/p>
&lt;h2 id="自訂授權">自訂授權&lt;/h2>
&lt;h2 id="rbac">RBAC&lt;/h2>
&lt;p>Name 記載使用者識別名稱(User Identity)
userData 記載以 &lt;code>|&lt;/code> 分隔的使用者角色 Role&lt;/p>
&lt;h1 id="驗證與授權">驗證與授權&lt;/h1>
&lt;h2 id="challengeforbid">Challenge、Forbid&lt;/h2>
&lt;h2 id="中間件順序">中間件順序&lt;/h2>
&lt;p>先驗證、再授權
The Order of UseAuthentication、UseAuthorization&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/principal-and-identity-objects" target="_blank" rel="noopener">MSDN - Principal and Identity Objects&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.authentication.iauthenticationservice?view=aspnetcore-3.1" target="_blank" rel="noopener">MSDN - IAuthenticationService Interface&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.authentication.authenticationservice?view=aspnetcore-3.1" target="_blank" rel="noopener">MSDN - AuthenticationService Class&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/?view=aspnetcore-3.1" target="_blank" rel="noopener">MSDN - Overview of ASP.NET Core Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-3.1" target="_blank" rel="noopener">MSDN - Overview of ASP.NET Core authentication&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies?view=aspnetcore-3.1" target="_blank" rel="noopener">MSDN - Policy-based authorization in ASP.NET Core&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies?view=aspnetcore-5.0" target="_blank" rel="noopener">MSDN - Microsoft.AspNetCore.Authentication.Cookies Namespace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer?view=aspnetcore-5.0" target="_blank" rel="noopener">MSDN - Microsoft.AspNetCore.Authentication.JwtBearer Namespace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dotblogs.com.tw/Null/2020/04/09/162252" target="_blank" rel="noopener">[ASP.NET Core] 加上簡單的Cookie登入驗證&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.johnwu.cc/article/ironman-day11-asp-net-core-cookies-session.html" target="_blank" rel="noopener">https://blog.johnwu.cc/article/ironman-day11-asp-net-core-cookies-session.html&lt;/a>&lt;/p></description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(三)-Cookie 驗證實例</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_3/</link><pubDate>Wed, 30 Dec 2020 23:24:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_3/</guid><description>&lt;p>前兩篇介紹了驗證、授權在 .NET Core 當中的基本的概念，本節實作 Cookie 驗證的設定、簽發、登出&amp;hellip;&lt;/p>
&lt;h1 id="configuration">Configuration&lt;/h1>
&lt;p>在 Startup.ConfigureServices 方法中設置驗證方案，
並且可以在 AddCookie 當中設置 CookieAuthenticationOptions(見前一節)&lt;/p>
&lt;pre>&lt;code class="language-c#">// 設置 cookie 驗證作為應用程式預設的驗證方案
services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
// 將 cookie 服務添加到服務容器當中
.AddCookie();
&lt;/code>&lt;/pre>
&lt;p>在 Startup.Configure 方法中，呼叫 UseAuthentication、UseAuthorization，
啟用驗證中間件並設置 HttpContext.User 屬性，
UseAuthentication 必須在 UseAuthorization 之前，且兩者都必須在 UseEndpoints 之前被呼叫：&lt;/p>
&lt;pre>&lt;code class="language-c#">app.UseAuthentication(); // 驗證
app.UseAuthorization(); // 授權
// 端點對應
app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapControllers();
endpoints.MapRazorPages();
});
&lt;/code>&lt;/pre>
&lt;h1 id="cookie-policy-middleware">Cookie Policy Middleware&lt;/h1>
&lt;p>在中間件當中設置的驗證政策會作用於全域(每個請求)，
舉例來說，最常用的就是限制應用程式所有 Cookie 的 SameSite 屬性，
所有 Controller 簽發的 Cookie.SamSite 屬性會被限縮為較嚴格(不比 MinimumSameSitePolicy 寬鬆)的設置：&lt;/p>
&lt;pre>&lt;code class="language-c#">app.UseCookiePolicy(new CookiePolicyOptions {
// 所有 Cookie.SamSite 設置都會被提升為 Strict
MinimumSameSitePolicy = SameSiteMode.Strict,
// Cookie.SamSite 設置為 None 的話會被提升為 Lax
//MinimumSameSitePolicy = SameSiteMode.Lax,
// MinimumSameSitePolicy 設置為最寬鬆，因此不會影響 Cookie.SamSite
//MinimumSameSitePolicy = SameSiteMode.None,
});
&lt;/code>&lt;/pre>
&lt;h1 id="create-an-authentication-cookie">Create an authentication cookie&lt;/h1>
&lt;p>.NET Core 利用 ClaimsPrincipal 將序列化的使用者資訊儲存在 Cookie 當中
而 ClaimsPrincipal 可包含很多 ClaimsIdentity(但通常只有一個)；
ClaimsIdentity 可以且通常包含很多 Claims(聲明)，
而每個 Claims 是包含型別(ClaimType)、值(ClaimValue)。
因此為登入使用者建立 Cookie 驗證的步驟如下：&lt;/p></description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(X)-備註頁面</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_memo/</link><pubDate>Mon, 23 Nov 2020 15:48:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_memo/</guid><description>&lt;h2 id="identity-objects">Identity Objects&lt;/h2>
&lt;h2 id="principal-objects">Principal Objects&lt;/h2>
&lt;p>IPrincipal 物件帶有 IIdentity 物件的參考
可指定 Authentication Scheme 獲得 Identity&lt;/p>
&lt;h2 id="iauthenticationservice">IAuthenticationService&lt;/h2>
&lt;p>SignOutAsync 清除 Cookie 的 Claims
在 Cookie 寫入 Claims&lt;/p>
&lt;h2 id="token-登入">Token 登入&lt;/h2>
&lt;h1 id="登入-api-實作">登入 API 實作&lt;/h1>
&lt;p>宣告 ClaimsPrincipal 後，可利用服務容器已注入的認證服務(實作 IAuthencationService 的類別)，進行登入、登出。
使用 SignInAsync 方法登入(寫入認證資訊)需要這些東西：&lt;/p>
&lt;ol>
&lt;li>ClaimsPrincipal(必要)，我們需要 ClaimsPrincipal 攜帶 ClaimsIdentity 及 Claims。&lt;/li>
&lt;li>AuthenticationScheme string (Optional)可指定 Scheme，若沒有給就是使用預設的 Scheme。&lt;/li>
&lt;li>authProperties (Optional)，可指定自訂認證選項&lt;/li>
&lt;/ol>
&lt;h1 id="authenticationhttpcontextextensions">AuthenticationHttpContextExtensions&lt;/h1>
&lt;p>AuthenticationHttpContextExtensions 類別對 HttpContext 類別擴展出認證方法，
從服務容器中獲取 IAuthenticationService 實體類別，並調用同名方法。&lt;/p>
&lt;h1 id="iauthenticationservice-1">IAuthenticationService&lt;/h1>
&lt;p>SignOutAsync 清除 Cookie 的 Claims
可儲存 ClaimsPrincipal進行簽發(登入)認證，作為身分識別。&lt;/p></description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(一)-驗證與授權</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_1/</link><pubDate>Mon, 23 Nov 2020 08:39:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-auth/auth_guild_1/</guid><description>&lt;p>在進入 ASP .NET Core 3.1 中驗證(Authentication)與授權(Authorization)的作用流程前，應當對兩者有抽象概念上的認識，以及了解兩者的差異。&lt;/p>
&lt;h1 id="驗證authentication">驗證(Authentication)&lt;/h1>
&lt;p>驗證是確認用戶識別碼(User Identity)的程序，通過驗證的用戶可具有一或多個用戶識別碼，
因此驗證服務本身就是使用者識別碼提供者 (User Identity Provider)，
ASP.NET Core 3.1 當中以依賴注入(DI; Dependency Injection)將驗證服務注入服務容器 (Service Container)，
使應用程式驗證簽發時能夠取用。&lt;/p>
&lt;h1 id="授權authorization">授權(Authorization)&lt;/h1>
&lt;p>授權的作用是界定用戶可存取資源範圍，作用描述如下：&lt;/p>
&lt;ul>
&lt;li>限制所存取的資源是否需要驗證。&lt;/li>
&lt;li>已獲得驗證的特定用戶、特定腳色方能存取特定資源。&lt;/li>
&lt;li>所存取的資源需要以何種授權政策(Authorizaton Policy)、即驗證方案(Authencation Scheme)。&lt;/li>
&lt;/ul>
&lt;h1 id="挑戰和禁止">挑戰和禁止&lt;/h1>
&lt;p>有些名詞需要先解釋：
驗證方案(Authentication Scheme)當中設置了挑戰(Chellange)與禁止(Forbid)應該進行的動作，這些註冊於驗證方案的動作動作由授權叫用。&lt;/p>
&lt;h2 id="挑戰challenge">挑戰(Challenge)&lt;/h2>
&lt;p>未驗證使用者要存取需驗證才能存取的資源時，
授權服務會叫用 &lt;a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.authentication.iauthenticationservice.challengeasync?view=aspnetcore-3.1" target="_blank" rel="noopener">IAuthenticationService.ChallengeAsync&lt;/a> 發起 challenge，
challenge 被發起後所伴隨採取的行動稱為 challenge action，
且 challenge action 應讓使用者知道應該以哪一種驗證機制取得授權，常見的具體範例有：&lt;/p>
&lt;ul>
&lt;li>cookie 驗證方案將使用者轉址到登入頁面。&lt;/li>
&lt;li>JWT 回傳 401 Unauthorized 狀態碼，並在 Header 帶入 &lt;code>www-authenticate: bearer&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="禁止forbid">禁止(Forbid)&lt;/h2>
&lt;p>已驗證的使用者要存取授權之外的資源時，
授權會叫用 &lt;a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.authentication.iauthenticationservice.forbidasync?view=aspnetcore-3.1" target="_blank" rel="noopener">IAuthenticationService.ForbidAsync&lt;/a> 發起 Forbid，
Forbid 發起後所伴隨採取的行動稱為 Forbid action，
Forbid action 的目的是要讓使用者知道自己已通過認證、且不具權限訪問所請求的資源，
常見的具體範例有：&lt;/p></description></item><item><title>[SignalR] Websocket 即時聊天程式(三) - 後端 Token 認證</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_3_validate_token/</link><pubDate>Fri, 20 Nov 2020 22:44:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_3_validate_token/</guid><description>&lt;h1 id="安裝套件">安裝套件&lt;/h1>
&lt;p>要進行 Token 的認證，需要先安裝 Microsoft.AspNetCore.Authentication.JwtBearer 套件：&lt;/p>
&lt;pre>&lt;code class="language-shell">dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
&lt;/code>&lt;/pre>
&lt;h1 id="註冊認證服務">註冊認證服務&lt;/h1>
&lt;p>新增一個檔案 DependencyInjection.cs，在當中製作 IServiceCollection 的擴充方法來自定義 JWT token 認證服務，
在裡面設置 Token 的認證規則、使用者識別碼對應、使用者群組對應，
而 SignalR 抓取使用者識別碼 (UserIdentifier) 的介面方法是 IUserIdProvider.GetUserId，
因此我們需要另外新增一個實作 IUserProvider 的類別注入服務容器給 SignalR 使用
，該檔案程式碼如下：&lt;/p>
&lt;pre>&lt;code class="language-cs">using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.SignalR;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using System.Diagnostics.CodeAnalysis;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Threading.Tasks;
namespace SignalR.Extensions.DependencyInjection
{
public static class MyAddConfig
{
public static IServiceCollection AddMyJWTAuth(
[NotNull] this IServiceCollection services,
IConfiguration config
)
{
services.AddAuthentication(options =&amp;gt;
{
// Identity 預設是使用 Cookie authentication，必須手動設置為 JWT Bearer Auth:
options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =&amp;gt;
{
// [注意]先解除 MapInboundClaims ，否則會因為套件中某些為向前相容而保留的 legacy code 使得 RoleClaimType 無法生效
// https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/1214
if (options.SecurityTokenValidators.FirstOrDefault() is JwtSecurityTokenHandler jwtSecurityTokenHandler)
jwtSecurityTokenHandler.MapInboundClaims = false;
// 設置 Token 在授權後是否要儲存於 AuthenticationProperties
options.SaveToken = true;
// 設置各認證參數
options.TokenValidationParameters = new TokenValidationParameters
{
NameClaimType = &amp;quot;userId&amp;quot;, // 設置 Http 請求的 User.Identity.Name、Hub 中 UserIdentifier 取值的 Claim 是 userId
RoleClaimType = &amp;quot;roles&amp;quot;, // 設置使用者的腳色從 type=&amp;quot;roles&amp;quot; 的 claims 對應
ValidateLifetime = true, // 認證 Token 有效期間
ValidateIssuerSigningKey = true, //驗證 token 中的 key
IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(config.GetValue&amp;lt;string&amp;gt;(&amp;quot;JWT:SignKey&amp;quot;))), // SignKey
ValidateIssuer = false, // 不驗證簽發者
ValidateAudience = false // 不驗證 Audience (Token接收方)
};
options.Events = new JwtBearerEvents
{
// 設定當 OnMessageReceived 事件被觸發時，獲取認證用的 access_token
OnMessageReceived = context =&amp;gt;
{
// 不同於標準夾帶於 header 的 http token，signalr 會透過網址參數發送 access token
// ASP .NET Core 預設會將請求的 URL 皆做成 Log 紀錄，如果不想要網址列的 Token 被 Log 記錄下來必須參考
// https://docs.microsoft.com/aspnet/core/signalr/security#access-token-logging
string accessToken = context.Request.Query[&amp;quot;access_token&amp;quot;];
// 檢查請求路徑是否為 chathub
var path = context.HttpContext.Request.Path;
if (!string.IsNullOrEmpty(accessToken) &amp;amp;&amp;amp;
(path.StartsWithSegments(&amp;quot;/chathub&amp;quot;)))
{
// 把 token 丟進 MessageReceiveContext 當中
context.Token = accessToken;
}
return Task.CompletedTask;
}
};
});
services.AddSingleton&amp;lt;IUserIdProvider, NameUserIdProvider&amp;gt;();
// 如果是使用 email claim 作為 user identifier 用下面這行並實作 EmailBasedUserIdProvider
// services.AddSingleton&amp;lt;IUserIdProvider, EmailBasedUserIdProvider&amp;gt;();
// NameUserIdProvider 和 EmailBasedUserIdProvider 無法同時使用!!
return services;
}
}
// 實作 SignalR 抓取使用者 Identity 的方法 IUserIdProvider.GetUserId
// 提供服務容器注入給 SignalR 使用
public class NameUserIdProvider : IUserIdProvider
{
public string GetUserId(HubConnectionContext connection)
{
// 認證設定時設置好 NameClaimType，這裡直接回傳 User.Identity.Name 即可
return connection.User?.Identity?.Name;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>然後在 Startup.cs 當中添加對該類別的引用：&lt;/p></description></item><item><title>[Linux] 在 Ubuntu 20.04 中設置 vim plugin YouCompleteMe</title><link>https://blog.tigernaxo.com/posts/other/vim-plugin-ycm/</link><pubDate>Wed, 18 Nov 2020 23:14:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/vim-plugin-ycm/</guid><description>&lt;h1 id="安裝-junegunnvim-plug-管理套件">安裝 junegunn/vim-plug 管理套件&lt;/h1>
&lt;p>以指令安裝 junegunn/vim-plug&lt;/p>
&lt;pre>&lt;code class="language-shell">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/code>&lt;/pre>
&lt;p>在 ~/.vimrc 加入 Plug &amp;lsquo;ycm-core/YouCompleteMe&amp;rsquo;&lt;/p>
&lt;pre>&lt;code>&amp;quot; Specify a directory for plugins
call plug#begin('~/.vim/plugged')
Plug 'ycm-core/YouCompleteMe'
&amp;quot; Initialize plugin system
call plug#end()
&lt;/code>&lt;/pre>
&lt;p>打開 vim，在 vim 命令列輸入安裝 Plugin 的指令下載 YCM，這個時候還沒編譯所以會顯示安裝失敗&lt;/p>
&lt;pre>&lt;code>:PlugInstall
&lt;/code>&lt;/pre>
&lt;h1 id="編譯ycm">編譯YCM&lt;/h1>
&lt;p>安裝編譯工具&lt;/p>
&lt;pre>&lt;code class="language-shell">sudo apt install -y build-essential cmake vim python3-dev
&lt;/code>&lt;/pre>
&lt;p>編譯&lt;/p>
&lt;pre>&lt;code class="language-shell">~/.vim/plugged/YouCompleteMe/install.py
&lt;/code>&lt;/pre>
&lt;h1 id="測試">測試&lt;/h1>
&lt;p>打開 vim 確認，完工~&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ycm-core/YouCompleteMe" target="_blank" rel="noopener">GitHub - ycm-core/YouCompleteMe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">GitHub - junegunn/vim-plug&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Code] 複製元件內的文字</title><link>https://blog.tigernaxo.com/posts/javascript/code-copy-html-content/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/code-copy-html-content/</guid><description>&lt;p>要在前端用 JavaScript 將 DOM 的內容複製到剪貼簿有幾種姿勢：&lt;/p>
&lt;h2 id="clipboard-api">Clipboard API&lt;/h2>
&lt;p>基本上目前(2020年底)，主流瀏覽器近期版本都支援了，如果不考慮 IE 的話倒是可以使用，語法精簡而且能非同步操作。&lt;/p>
&lt;ul>
&lt;li>不支援 IE&lt;/li>
&lt;li>是非同步方法，會傳回 Promise&lt;/li>
&lt;li>支援從變數直接複製到剪貼簿&lt;/li>
&lt;li>只有 HTTPS 網頁可以使用此 API&lt;/li>
&lt;li>Chrome 66 之後透過 Clipboard 複製已經不會彈出提示視窗&lt;/li>
&lt;li>只能在 active tab 發生作用 (a.k.a. 開發者無法在 colsole 做測試，會得到 &lt;code>DOMException: Document is not focused.&lt;/code>)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-js">function copyText(text) {
// 判斷瀏覽器支援
if (!navigator.clipboard) {
alert(&amp;quot;瀏覽器不支援 Clipboard API&amp;quot;)
// 這裡可以改用 document.execCommand('copy') 的方法
}
// 非同步複製至剪貼簿
let resolve = () =&amp;gt; {
console.log('透過 Clipboard 複製至剪貼簿成功');
}
let reject = (err) =&amp;gt; {
console.error('透過 Clipboard 複製至剪貼簿失敗:' + err.toString() );
}
navigator.clipboard.writeText(text).then(resolve, reject);
}
&lt;/code>&lt;/pre>
&lt;h2 id="複製隱藏元素">複製隱藏元素&lt;/h2>
&lt;p>document.execCommand(&amp;lsquo;copy&amp;rsquo;)&lt;/p></description></item><item><title>[DIY] 用Typescript搭建簡易前端路由</title><link>https://blog.tigernaxo.com/posts/javascript/diy-simple-router/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/diy-simple-router/</guid><description>&lt;p>起始一個使用 vallina-ts 的 vite 專案並安裝套件，並使用 bootstrap 做簡單的 css 套用：&lt;/p>
&lt;pre>&lt;code class="language-bash">npm init vite@latest route-test
#依序選擇 vallina-&amp;gt;vallina-ts
cd route-test
npm i # 安裝套件
npm i bootstrap # 安裝 bootstrap
&lt;/code>&lt;/pre>
&lt;p>在 index.html 新增元素 app
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;icon&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;image/svg+xml&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;favicon.svg&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Vite App&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container-fluid&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;menu&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;row g-0&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;row g-0&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;module&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/src/main.ts&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p></description></item><item><title>[JS] 各種模組(module)</title><link>https://blog.tigernaxo.com/posts/javascript/js-module/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-module/</guid><description>&lt;p>JS模組規範有很多：AMD、UMD、CMD、commonJS、ES6 module&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/150248/" target="_blank" rel="noopener">JS模組規範：AMD、UMD、CMD、commonJS、ES6 module&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[SignalR] Websocket 即時聊天程式(四) - 前端登入頁面</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_4_front_end_login/</link><pubDate>Tue, 10 Nov 2020 05:05:45 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_4_front_end_login/</guid><description>&lt;h1 id="安裝-axios">安裝 axios&lt;/h1>
&lt;p>SignalR 連線驗證的方式是將 token 夾帶於網址參數中發送到伺服器，因此進行 websocket 連線前我們透過 ajax 向伺服器發送帳號密碼索取登入的 Token，我們安裝方便使用 ajax 的 axios 函式庫：&lt;/p>
&lt;p>axios 一樣可以透過 LibMan 安裝~&lt;/p>
&lt;pre>&lt;code class="language-shell">libman install axios@latest \
-p unpkg \
-d wwwroot/js/axios \
--files dist/axios.min.js
&lt;/code>&lt;/pre>
&lt;p>在 wwwRoot/index.html 添加對 axios 的引用：&lt;/p>
&lt;pre>&lt;code class="language-js">&amp;lt;script src=&amp;quot;./lib/axios/dist/axios.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;h1 id="簡易登入ui">簡易登入UI&lt;/h1>
&lt;p>雖然是功能原型，為了讓做出來的頁面不要太粗暴，拿 bootstrap 的 css 來套用一下 UI：&lt;/p>
&lt;pre>&lt;code class="language-shell">libman install bootstrap@5.0.0-alpha2 \
-p unpkg \
-d wwwroot/lib/bootstrap \
--files dist/js/bootstrap.min.js \
--files dist/css/bootstrap.min.css
&lt;/code>&lt;/pre>
&lt;p>在 wwwRoot/index.html 添加對 bootstrap css 的引用：&lt;/p>
&lt;pre>&lt;code class="language-js">&amp;lt;script src=&amp;quot;./lib/bootstrap/dist/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>現在將 wwwRoot/index.html 修改如下：&lt;/p></description></item><item><title>[SignalR] Websocket 即時聊天程式(二) - 後端 Token 授權</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_2_issue_token/</link><pubDate>Sat, 07 Nov 2020 01:35:45 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_2_issue_token/</guid><description>&lt;h1 id="signalr驗證方式">SignalR驗證方式&lt;/h1>
&lt;p>SignalR 的授權可以選擇使用 Cookie 或 Bearer Token：&lt;/p>
&lt;ul>
&lt;li>Cookie: 驗證方法與一般網頁別無二致，較容易實作但缺點是只能用於瀏覽器(browser-specific)。&lt;/li>
&lt;li>Bearer Token 可通用於網頁和 App (或提供任何應用程式)，使用 Token 做登入能夠讓應用程式更容易實作其他使用者端，如果有其他的伺服器簽發 Token，更容易整合至單一登入(Single Sign-On)，也是官方建議使用的方式，以下假設簽發 Token 與 SignalR 伺服器為同一台進行實作。&lt;/li>
&lt;/ul>
&lt;p>將 Token 驗證實作至伺服器之前，讓我們先練習實作一支簽發 Token 的 API。&lt;/p>
&lt;h1 id="以-option-pattern-取得-jwt-設定">以 Option pattern 取得 JWT 設定&lt;/h1>
&lt;p>這裡練習 Option pattern，以獲取 appsetting.json 當中 JWT 相關設定的強型別支援：&lt;/p>
&lt;h2 id="appsettingjson">appsetting.json&lt;/h2>
&lt;p>將 JWT 相關的設定寫到 appsetting.json 當中：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Default&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Microsoft&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Warning&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &lt;span style="color:#f92672">&amp;#34;JWT&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &lt;span style="color:#f92672">&amp;#34;Issuer&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Naxo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &lt;span style="color:#f92672">&amp;#34;Expires&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1440&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// 憑證有效分鐘數
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;SignKey&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myNameIsTigernaxo,ThisIsMyPersonalBlog&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 設定簽發/解密憑證的對稱式加密金鑰
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;AllowedHosts&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p></description></item><item><title>[SignalR] Websocket 即時聊天程式(一) - 建立專案</title><link>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_1_start/</link><pubDate>Tue, 03 Nov 2020 05:46:45 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/dotnet/startup-signalr/guild_1_start/</guid><description>&lt;p>這個系列會&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-3.1&amp;amp;tabs=visual-studio" target="_blank" rel="noopener">官方文件&lt;/a>為主，保留必要的部分，並視情況修改部份程式、添加說明文字。&lt;/p>
&lt;h1 id="建立-signalr-專案">建立 SignalR 專案&lt;/h1>
&lt;p>這個範例設定用靜態 html 做前端，這樣之後要做前後端分離也更容易一些，之後會用到 web api 請求登入 Token，所以起始一個 web api 專案：&lt;/p>
&lt;pre>&lt;code class="language-shell"># 建立專案
dotnet new webapi -o SignalR
# 以 VS Code 打開專案
code -r signalr
&lt;/code>&lt;/pre>
&lt;h1 id="建立-signalr-中樞">建立 SignalR 中樞&lt;/h1>
&lt;p>在.NET Core 3.1 當中使用 SignalR 伺服器端不再需要安裝額外的套件，直接將 SignalR 注入服務容器就能使用， SignalR 的 Hub 中文名稱就叫做中樞，在專案中新增資料夾 Hubs 用來專門存放 Hub 實作類別，並在 Hubs 中新增檔案 ChatHub.cs，內容如下：&lt;/p>
&lt;pre>&lt;code class="language-c#">using Microsoft.AspNetCore.SignalR;
using System.Threading.Tasks;
namespace SignalR.Hubs
{
// 這就是所謂的 SignalR 中樞
public class ChatHub : Hub
{
// 這是提供 Client (js)端呼叫的方法，後面是這個方法接受的參數
public async Task SendMessage(string user, string message)
{
// 針對每個以連線的客戶端呼叫 ReceiceMassage 方法，並傳送參數 user、message
await Clients.All.SendAsync(&amp;quot;ReceiveMessage&amp;quot;, user, message);
}
}
}
&lt;/code>&lt;/pre>
&lt;h1 id="設定-startupcs">設定 Startup.cs&lt;/h1>
&lt;p>依照官網的設定，在 Startup.cs 當中新增第13, 30,42-43 ,52 行：&lt;/p></description></item><item><title>[Linux] CentOS 8 設定網路靜態IP</title><link>https://blog.tigernaxo.com/posts/linux/centos8-static-ip/</link><pubDate>Tue, 16 Jun 2020 09:37:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/linux/centos8-static-ip/</guid><description>&lt;h1 id="查詢ip">查詢IP&lt;/h1>
&lt;pre>&lt;code>$ ip a
1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: enp0s3: mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 08:00:27:85:fe:50 brd ff:ff:ff:ff:ff:ff
inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute enp0s3
valid_lft forever preferred_lft forever
inet6 fe80::98e4:9fbc:ba91:db3f/64 scope link noprefixroute
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>
&lt;h1 id="修改網路設定">修改網路設定&lt;/h1>
&lt;p>修改網路介面設置如下，檔案名稱預設為ifcfg-網路介面(網路卡)名稱，舉例來說安裝好 CentOS 預設的網路卡 enp0s3 設定檔：/etc/sysconfig/network-scripts/ifcfg-enp0s3&lt;/p></description></item><item><title>[Linux] Ubuntu 20.4 以 netplan 設定網路靜態IP</title><link>https://blog.tigernaxo.com/posts/linux/ubuntu204-static-ip/</link><pubDate>Sat, 13 Jun 2020 09:37:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/linux/ubuntu204-static-ip/</guid><description>&lt;p>Ubuntu 自 17.10 以後就可以用 netplan 設置網卡~&lt;/p>
&lt;h1 id="檢查網路介面">檢查網路介面&lt;/h1>
&lt;p>以 ip a 可以看到我的 ubuntu 有2個網路介面分別是 lo、enp0s3，對應到 loopback、有線網卡&lt;/p>
&lt;pre>&lt;code>$ ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: enp0s3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 08:00:27:6a:7b:e3 brd ff:ff:ff:ff:ff:ff
inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3
valid_lft 86159sec preferred_lft 86159sec
inet6 fe80::a00:27ff:fe6a:7be3/64 scope link
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>
&lt;h1 id="檢查設定檔">檢查設定檔&lt;/h1>
&lt;p>所有放置於 /etc/netplan 底下的 yaml 檔都會影響 netplan 的設置，檢查設定檔看到只有一個 00-installer-config.yaml，內容空空如也，一般來說在安裝系統時有設定過網路就會有，如果沒有的話就自己新增囉：&lt;/p></description></item><item><title>[JS] Object 常用方法</title><link>https://blog.tigernaxo.com/posts/javascript/js-obj-func/</link><pubDate>Wed, 20 May 2020 23:31:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-obj-func/</guid><description>&lt;p>紀錄常用的 Object 方法，細節可以到MDN看&lt;/p>
&lt;h1 id="objectcreate">Object.create&lt;/h1>
&lt;blockquote>
&lt;p>Object.create(proto, [propertiesObject])&lt;/p>&lt;/blockquote>
&lt;p>以傳入的參數作為prototype建立一個新物件，這個方法只能複製只帶有 primitive type 無法 deep copy，建立的物件所帶的函式、巢狀物件、Array等等…都和 prototype 共用。&lt;/p>
&lt;h2 id="以特定object-作為-prototype-建立新物件">以特定Object 作為 Prototype 建立新物件&lt;/h2>
&lt;pre>&lt;code class="language-js">const objParent = {
parentFeild: 'parent feild',
parentFunc: function () {
console.log('This is parent Func')
},
deepObj: {
a: 1,
b: 2,
},
}
// 以 objParent 作為 prototype 建立 obj 物件
const obj = Object.create(objParent)
// objFeild 只存在 obj 上
obj.objFeild = 'obj feild'
// 可從建立的 obj 呼叫 prototype 的屬性, 方法
obj.parentFeild // &amp;quot;parent feild&amp;quot;
obj.parentFunc() // This is parent Func
// 從 prototype 繼承的屬性可覆寫
obj.parentFeild = 'overite str'
obj.parentFeild // &amp;quot;overite str&amp;quot;
// 父子元件的深層物件仍然指向同一個
obj.deepObj.a // 1
objParent.deepObj.a = 9
obj.deepObj.a // 9
&lt;/code>&lt;/pre>
&lt;h1 id="objectfromentries">Object.fromEntries&lt;/h1>
&lt;p>從 Array 或 key-value map 產生 Object&lt;/p></description></item><item><title>[JS] JavaScript 當中的原型繼承鏈模型</title><link>https://blog.tigernaxo.com/posts/javascript/js-prototype/</link><pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-prototype/</guid><description>&lt;h1 id="基於原型-prototype-based-的-javascript">基於原型 (Prototype-Based) 的 JavaScript&lt;/h1>
&lt;p>一般物件導向式(OOP; Object Oriented Programming) 程式語言 (如：java、c++、c#) 當中的物件是由類別模板 (class) 產生實體物件 (instance)，實體物件的屬性各自獨立。類別模板上可設置共用的靜態資源包含靜態方法 (static method)、靜態屬性 (static field)，而這些靜態資源可以在沒有建立實體的情況下透過類別名稱直接取用。&lt;/p>
&lt;p>JavaScript 中的物件通常隸屬於另一個物件，這種隸屬關係類似物件導向語言的繼承，而在這種關係中的上層物件稱為原型 (Prototype)。原型本身又有自己所屬的原型，這種物件層層繼承的關係稱為原型鏈 (Prototype Chain)，幾乎所有物件的最上層原型是一個構造函數叫做 Object 的物件。&lt;/p>
&lt;p>因此一般物件導向式語言稱為基於類別 (Class-Based) 的語言；而 Javascript 是基於原型 (Prototype-Based) 的語言。&lt;/p>
&lt;h1 id="建立物件原型">建立物件原型&lt;/h1>
&lt;p>JavaScript 本身沒有類別模板的概念，是以構造函數 (constructor) 建立物件，物件可以將 constructor 屬性指向構造函數，但並非所有物件都有構造函數，具有構造函數的物件可直接以構造函數產生原型鏈下一層物件；不具有構造函數的物件只能在其他物件建立完成後，以其他方式設置為其他物件的原型。&lt;/p>
&lt;p>建立原型的方法就是直接宣告一個函數，JavaScript 會自動把該函數作為構造函數，並自動建立一個隸屬於 Object.prototype 之下的匿名物件，並把宣告的函數指定給該匿名物件的 constructor 屬性。&lt;/p>
&lt;pre>&lt;code class="language-js">// 宣告一個函數 Foo
function Foo (){}
// Foo.prototype 在 Foo 被宣告時自動建立
Foo.prototype // {constructor: ƒ}
// Foo.prototype 的 constructor 屬性自動指向 Foo
Foo.prototype.constructor === Foo // true
&lt;/code>&lt;/pre>
&lt;h1 id="建立物件">建立物件&lt;/h1>
&lt;h2 id="透過構造函數">透過構造函數&lt;/h2>
&lt;pre>&lt;code class="language-js">// 建立一個物件
let bar = new Foo{} // {}
&lt;/code>&lt;/pre>
&lt;h2 id="直接對變數賦值">直接對變數賦值&lt;/h2>
&lt;p>JavaScript 對變數賦值底層行為：以 Object 構造函數建立物件，然後對物件並賦值（故賦值發生在物件建立之後）&lt;/p></description></item><item><title>[TS] Typescript 在標準內建物件加上屬性</title><link>https://blog.tigernaxo.com/posts/typescript/ts-extend-global-obj/</link><pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/typescript/ts-extend-global-obj/</guid><description>&lt;h3 id="宣告">宣告&lt;/h3>
&lt;p>這個動作是 Extends Array Interface&lt;/p>
&lt;pre>&lt;code class="language-ts">interface Array&amp;lt;T&amp;gt; {
newfunc(o: T): Array&amp;lt;T&amp;gt;;
}
Array.prototype.newfunc = function (o) {
// some code
return this;
}
&lt;/code>&lt;/pre>
&lt;h3 id="使用">使用&lt;/h3>
&lt;p>使用者要先拿到被 extend 的 interface&lt;/p>
&lt;pre>&lt;code class="language-ts">declare global {
interface Array&amp;lt;T&amp;gt; {
newfunc(o: T): Array&amp;lt;T&amp;gt;;
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/12802383/extending-array-in-typescript" target="_blank" rel="noopener">stackoverflow - extending array in typescript&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bobbyhadz.com/blog/typescript-array-extend" target="_blank" rel="noopener">bobbyhadz - typescript-array-extend&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[JS] Array 常用方法</title><link>https://blog.tigernaxo.com/posts/javascript/js-arr-func/</link><pubDate>Wed, 29 Apr 2020 23:31:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/javascript/js-arr-func/</guid><description>&lt;p>紀錄常用的 Array 方法，細節可以到MDN看&lt;/p>
&lt;h1 id="陣列操作">陣列操作&lt;/h1>
&lt;h2 id="尾端彈出-arrayprototypepop推入-arrayprototypepush">尾端彈出 Array.prototype.pop()、推入 Array.prototype.push()&lt;/h2>
&lt;blockquote>
&lt;p>arr.pop()&lt;br>
arr.push(element1[, &amp;hellip;[, elementN]])&lt;/p>&lt;/blockquote>
&lt;pre>&lt;code class="language-js">const arr=[1, 2, 3, 4]
arr.pop()
console.log(arr) // [1, 2, 3]
arr.push(5)
console.log(arr) // [1, 2, 3, 5]
&lt;/code>&lt;/pre>
&lt;h2 id="首端彈出-arrayprototypeshift推入-arrayprototypeunshift">首端彈出 Array.prototype.shift()、推入 Array.prototype.unshift()&lt;/h2>
&lt;blockquote>
&lt;p>arr.shift()&lt;br>
arr.unshift(element1[, &amp;hellip;[, elementN]])&lt;/p>&lt;/blockquote>
&lt;pre>&lt;code class="language-js">const arr=[1, 2, 3, 4]
arr.shift()
console.log(arr) // [2, 3, 4]
arr.unshift(0)
console.log(arr) // [0, 2, 3, 4]
&lt;/code>&lt;/pre>
&lt;h2 id="指定位置插入移除取代-arrayprototypesplice">指定位置插入/移除/取代 Array.prototype.splice()&lt;/h2>
&lt;blockquote>
&lt;p>let arrRemoved = arr.splice(start[, deleteCount[, item1[, item2[, &amp;hellip;]]]])&lt;/p>&lt;/blockquote>
&lt;p>可以說式集移除、插入、取代(移除+插入)於一身的重要函式，並且將被移除的區段做為新陣列回傳，可根據傳入的參數將使用場景分類如下表，可幫助理解：&lt;/p></description></item><item><title>[台灣杉] 一鍵登入國網中心台灣杉(Taiwania)</title><link>https://blog.tigernaxo.com/posts/other/taiwania_login_oneclick/</link><pubDate>Wed, 23 Jan 2019 09:37:18 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/other/taiwania_login_oneclick/</guid><description>&lt;p>台灣杉(Taiwania)是國網中心2018年啟用的超級電腦，登入時密碼必須附加OTP (One-time Password)，國網中心建議取得OTP的方式是從驗證器取得OTP密碼，但這樣的方式每次都需要打開驗證器(手機、chrome插件… etc)，並且需要手動輸入OTP，下面分享我從Windows以及Linux環境下登入台灣杉所使用的一鍵登入方式。&lt;/p>
&lt;p>OTP的演算法可粗分為HOTP (HMAC-based OTP)；以及基於HOTP的TOTP (Time-based OTP)，我們不必瞭解演算法細節，只需知道台灣杉採用Base32編碼作為TOTP金鑰(Secret)，時間間格為30秒，每30秒可以根據”Secret”與”當前時間區間”以sha1演算法生成一次性密碼(OTP，或稱為Key)，由於這是單向加密的過程所以無法用時間區間與Key逆推Secret，並且OTP在成功使用一次之後就會被伺服器廢棄，以確保安全性。&lt;/p>
&lt;h1 id="注意事項">注意事項&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>校時&lt;/strong>&lt;br>
由於TOTP演算法依據當前時間區間產生OTP，如果作業系統的時間不正確則會產生錯誤的OTP，在Windows環境之下可以到國家時間與頻率標準實驗室的網頁下載NTP校時軟體，以管理員身分執行進行校時；Linux環境可以用下述指令更新時間並寫入BIOS：
&lt;pre>&lt;code class="language-bash"># 從NTP時間伺服器進行網路校時
sudo ntpdate time.stdtime.gov.tw
# 將更新的時間寫入BIOS
sudo hwclock -w
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>&lt;strong>所有登入行為之間必須間隔30秒(包含使用winSCP、putty或從Linux直接登入)。&lt;/strong>
每個30秒區間會產生一個OTP，而該OTP一旦經過使用就會被伺服器廢棄而無法再用。我曾經連續登入以為程式壞了，但核對iService上面產生的密碼又是一樣的，後來才發現這件事…中間還因為連登失敗太頻繁還被鎖，因此記得間隔30秒以上再登入。&lt;/li>
&lt;li>&lt;strong>Linux要登入台灣衫需要將台灣衫加入know host&lt;/strong>，以生醫節點為例:
&lt;pre>&lt;code class="language-bash">ssh-keyscan 140.110.148.14 1&amp;gt;&amp;gt;~/.ssh/known_hosts 2&amp;gt;/dev/null
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h1 id="從windows登入台灣杉">從Windows登入台灣杉&lt;/h1>
&lt;h2 id="前置工作">前置工作&lt;/h2>
&lt;ul>
&lt;li>安裝&lt;a href="https://golang.org/dl/" target="_blank" rel="noopener">Go&lt;/a>，並&lt;a href="https://github.com/golang/go/wiki/SettingGOPATH" target="_blank" rel="noopener">設置GOPATH&lt;/a>。&lt;/li>
&lt;li>安裝&lt;a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">putty&lt;/a>。&lt;/li>
&lt;li>安裝&lt;a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">WinSCP&lt;/a>。&lt;/li>
&lt;li>知道怎麼打開windows的命令提示字元 (WIN+R、鍵入cmd、enter)。&lt;/li>
&lt;/ul>
&lt;h2 id="編譯totp產生器">編譯TOTP產生器&lt;/h2>
&lt;p>取得TOTP套件&lt;/p>
&lt;pre>&lt;code class="language-bat">go get github.com/pquerna/otp/totp
&lt;/code>&lt;/pre>
&lt;p>撰寫程式碼main.go&lt;/p>
&lt;pre>&lt;code class="language-go">package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;github.com/pquerna/otp/totp&amp;quot;
&amp;quot;os&amp;quot;
&amp;quot;time&amp;quot;
)
func main() {
secret := os.Args[1]
code, _ := totp.GenerateCode(secret, time.Now().UTC())
fmt.Print(code)
}
&lt;/code>&lt;/pre>
&lt;p>編譯&lt;/p></description></item></channel></rss>