<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>[維運] Container on YuCheng's Site</title><link>https://blog.tigernaxo.com/posts/container/</link><description>Recent content in [維運] Container on YuCheng's Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 23 Nov 2022 00:16:00 +0800</lastBuildDate><atom:link href="https://blog.tigernaxo.com/posts/container/index.xml" rel="self" type="application/rss+xml"/><item><title>[Docker] 在 Ubuntu 安裝 Docker</title><link>https://blog.tigernaxo.com/posts/container/docker-install/</link><pubDate>Tue, 15 Nov 2022 08:46:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/docker-install/</guid><description>&lt;p>從 &lt;a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">Install Docker Engine on Ubuntu&lt;/a> 總結出腳本，直接執行就好：&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
# Uninstall old versions
sudo apt-get remove docker docker-engine docker.io containerd runc
# Set up the repository
# Update the apt package index and install packages to allow apt to use a repository over HTTPS
sudo apt-get update
sudo apt-get install \
ca-certificates \
curl \
gnupg \
lsb-release
# Add Docker’s official GPG key
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
# set up the repository
echo \
&amp;quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
# Install Docker Engine
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
# 把當前使用者加到 docker 群組
sudo usermod -aG docker ${USER}
# Verify that the Docker Engine installation is successful by running the hello-world image
sudo docker run hello-world
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">Install Docker Engine on Ubuntu&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[K8S] 自架 Kubernetes 使用 VM 模擬多台 Server</title><link>https://blog.tigernaxo.com/posts/container/k8s-basc-install/</link><pubDate>Sat, 23 Jul 2022 20:51:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/k8s-basc-install/</guid><description>&lt;p>準備/安裝兩台 Server ( 使用 VM clone 然後修改 hostname )
一台為 Master (主控)，另外一台為 Node ( 節點 )
安裝 kubelet/kubeadm ( Master 與 node 皆要執行此步驟 )&lt;/p>
&lt;pre>&lt;code class="language-bash"># 設定 k8s server上網路
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
# 安裝 kubeadm / kubelet
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
# 安裝 Docker
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;quot;
sudo apt update
sudo apt-get install docker-ce -y
docker --version
sudo systemctl start docker
sudo chmod 666 /var/run/docker.sock
sudo systemctl enable docker
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/docker/daemon.json
{
&amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;]
}
EOF
sudo systemctl restart docker
# 關閉 swap
sudo swapoff -a
sudo sed -i '/\/swap/s/^/#/' /etc/fstab
# 設定服務自動重啟
systemctl enable kubelet
# Master Node 啟動
sudo kubeadm init --pod-network-cidr=192.168.0.0/16
kubectl taint nodes --all node-role.kubernetes.io/master-
# kubeconfig
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Deploying a pod network
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code>&lt;/pre></description></item><item><title>[K8s] 以 Secrete 共享 tnsnames.ora</title><link>https://blog.tigernaxo.com/posts/container/k8s-example-tnsnames.ora/</link><pubDate>Thu, 21 Jul 2022 08:05:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/k8s-example-tnsnames.ora/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Managed ODP.NET 連線資料庫標榜不需要額外安裝 Oracle Client，資料庫連線資訊可以透過：&lt;/p>
&lt;ul>
&lt;li>程式內直接設定 connection string。&lt;/li>
&lt;li>解析環境變數 TNS_ADMIN 所指資料夾下的 tnsnames.ora。&lt;/li>
&lt;/ul>
&lt;p>考慮到可維護性，一旦連線資訊有所變動(Ip/Domain/Port/Service Name/SID)，如果直接將連線字串寫在程式裡面，就需要重新佈署每個程式專案，
因此如果讓 Managed ODP.NET 讀取共用的設定就能夠擁有只維護一份連線資訊的方便性。&lt;/p>
&lt;p>單主機的做法是部屬 tnsnames.ora 檔案，但因為 K8S 中 pod 都是隔離的環境，要共用連線資訊透過研究可能有這幾種方式：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>ExternalName Service&lt;/strong> 對應外部的資料庫位址，無法因應 ip, service name, sid 修改。&lt;/li>
&lt;li>&lt;strong>Service + Endpoints&lt;/strong> 轉送 ip 和 port。&lt;/li>
&lt;li>&lt;strong>Secret Volume&lt;/strong> 共用 tnsnames.ora。&lt;/li>
&lt;/ol>
&lt;p>三種連線資訊共用策略是否能反映連線資訊修改：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>ExternalName Service&lt;/th>
&lt;th>Service + Endpoints&lt;/th>
&lt;th>Secret Volume&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Ip/Domain&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Port&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>可&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Name/SID&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>不能&lt;/td>
&lt;td>可&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="step">Step&lt;/h2>
&lt;p>Secret 用處：&lt;/p></description></item><item><title>[Container] 學習資源</title><link>https://blog.tigernaxo.com/posts/container/basic-resource/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/basic-resource/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://hub.docker.com/" target="_blank" rel="noopener">DockerHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/" target="_blank" rel="noopener">K8S&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Docker] Docker Basic Command</title><link>https://blog.tigernaxo.com/posts/container/docker-command/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://blog.tigernaxo.com/posts/container/docker-command/</guid><description>&lt;p>執行容器&lt;/p>
&lt;pre>&lt;code>docker run [image] [overwrite defalut commain]
&lt;/code>&lt;/pre>
&lt;p>列出正在執行的容器， &amp;ndash;all 可以列出曾經執行過的容器&lt;/p>
&lt;pre>&lt;code>docker ps [--all]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>docker run
docker ps --all
docker create
docker start (what different from docker run?)
docker system prune
docker logs
docker stop (send sigterm) 10s then docker kill
docker kill
docker build -t &amp;lt;dockerid&amp;gt;/&amp;lt;project&amp;gt;:latest .
docker exec -it &amp;lt;containerId&amp;gt; /bin/bash (i, t stands for?)
# execute new command
&lt;/code>&lt;/pre>
&lt;p>build context!
port mapping 是為了處理 into docker，docker 出來從來沒有被限制&lt;/p></description></item></channel></rss>