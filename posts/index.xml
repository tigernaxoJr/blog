<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on YuCheng's Site</title><link>https://tigernaxojr.github.io/blog/posts/</link><description>Recent content in Posts on YuCheng's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Apr 2023 20:58:00 +0800</lastBuildDate><atom:link href="https://tigernaxojr.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Resultados de Búsqueda</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.
No se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html
Establecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.
Esta implementación utiliza Fusejs, jquery y mark.js
Configuración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>অনুসন্ধানের ফলাফল</title><link>https://tigernaxojr.github.io/blog/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://tigernaxojr.github.io/blog/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>[Program] 比較 Method chaining、fluent interface、c# 擴充方法</title><link>https://tigernaxojr.github.io/blog/posts/software/pg-method-chaining/</link><pubDate>Sat, 22 Apr 2023 20:58:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/software/pg-method-chaining/</guid><description>Method chaining、Fluent interface 和 擴充方法(Extension method) 三種雖然相似，但實則為不同的程式設計概念。
Method chaining Method chaining 是一種技術，允許在一行程式碼中調用對象的一系列方法。鏈中的每個方法都返回被調用的對象，從而允許在同一個對象上調用下一個方法。這種技術用於創建更可讀和簡潔的代碼。
Fluent interface Fluent interface 是一種設計模式，使用方法串鏈創建更具表現力和可讀性的API。 Fluent interface 的目標是使代碼看起來更像自然語言，使其更容易理解和使用。 在 Fluent interface 中，每個方法調用返回一個對象，允許在同一個對象上調用下一個方法。這種技術通常用於庫和框架中，以為開發人員提供更直觀和自然的API。
擴充方法 擴充方法是一種在不修改類本身的情況下為現有類添加功能的方法。擴充方法在單獨的靜態類中定義，並像擴展類的方法一樣調用。這允許開發人員在不修改源代碼的情況下為現有類添加功能。擴充方法通常用於為現有類添加實用函數或為無法修改的類（例如第三方庫）添加功能。
Reference Fluent Interface｜一種程式碼”寫作”風格 擴充方法 (C# 程式設計手冊) wiki-Method chaining</description></item><item><title>[Tools] 使用 OpenApi Generator 產生 .Net Core Client</title><link>https://tigernaxojr.github.io/blog/posts/other/tools-openapi-generator/</link><pubDate>Fri, 07 Apr 2023 11:00:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/tools-openapi-generator/</guid><description>手動設置 需要 java 環境、npm 安裝執行檔，可參照CLI Installation
openapi-generator-cli generate \ -i &amp;lt;spec file|url&amp;gt; -o &amp;lt;outdir&amp;gt; \ # 設定輸入 json/xml (檔案或網址)、輸出資料夾 -g csharp-netcore \ # 輸出 csharp .net core 專案 --skip-validate-spec # 不檢查規格 Docker 更簡單，一行搞定：
docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i &amp;lt;spec file|url&amp;gt; -o &amp;lt;outdir&amp;gt; \ # 設定輸入 json/xml (檔案或網址)、輸出資料夾 -g csharp-netcore \ # 輸出 csharp .net core 專案 --skip-validate-spec # 不檢查規格 Reference CLI Installation Documentation for the csharp-netcore Generator</description></item><item><title>[元件] 把 attr、event、slot，直接 Passthrough 給子元件，製作包裝元件</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-wrapper/</link><pubDate>Thu, 06 Apr 2023 14:21:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-wrapper/</guid><description>用來複寫給專案用的元件，用於在既有 UI framework 上打造專案元件
Vue3 Vue2.6 &amp;lt;template&amp;gt; &amp;lt;q-btn v-bind=&amp;#34;{ ...$attrs, ...$props }&amp;#34; v-on=&amp;#34;$listeners&amp;#34;&amp;gt; &amp;lt;template v-for=&amp;#34;(_, slot) of $scopedSlots&amp;#34; v-slot:[slot]=&amp;#34;scope&amp;#34;&amp;gt; &amp;lt;slot :name=&amp;#34;slot&amp;#34; v-bind=&amp;#34;scope&amp;#34;/&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/q-btn&amp;gt; &amp;lt;/template&amp;gt; Vue3 Vue3 裡面只要綁定 $attrs 即可，attrs, props, event 全部自動綁定進去。
&amp;lt;template&amp;gt; &amp;lt;q-btn v-bind=&amp;#34;$attrs&amp;#34;&amp;gt; &amp;lt;template v-for=&amp;#34;(slot, index) of Object.keys($slots)&amp;#34; :key=&amp;#34;index&amp;#34; v-slot:[slot]&amp;gt; &amp;lt;slot :name=&amp;#34;slot&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/q-btn&amp;gt; &amp;lt;/template&amp;gt; Quasar2-TS Quasar 裡面 Props, Slot 有獨立的 interface 定義，因此可直接拿到。
&amp;lt;template&amp;gt; &amp;lt;q-btn v-bind=&amp;#34;$attrs&amp;#34;&amp;gt; &amp;lt;template v-for=&amp;#34;(slot, index) of Object.keys($slots)&amp;#34; :key=&amp;#34;index&amp;#34; v-slot:[slot]&amp;gt; &amp;lt;slot :name=&amp;#34;slot&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/q-btn&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script setup lang=&amp;#34;ts&amp;#34;&amp;gt; import type { QBtnSlots, QBtnProps } from &amp;#39;quasar&amp;#39;; import { QBtn } from &amp;#39;quasar&amp;#39;; const props = withDefaults(defineProps&amp;lt;QBtnProps&amp;gt;(),{ // here comes default settings }); &amp;lt;/script&amp;gt; &amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt; Vuetify3 Vuetify3 裡面 Props, Slot 沒有獨立的 interface 定義，因此需額外定義。 MyBtn.</description></item><item><title>[架構] 多層式架構(Multi-layer Architecture)</title><link>https://tigernaxojr.github.io/blog/posts/software/arch-multi-layer/</link><pubDate>Tue, 28 Mar 2023 23:34:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/software/arch-multi-layer/</guid><description>中文多層架構的層可翻作 layer 或 tier，兩者主要的差別在於 layer 指程式邏輯在應用程式的位置；而 tier 指 layer 在系統上實際部屬執行的位址，屬於物理層級的指涉。這一篇的層說的是 layer，談如何在軟體層面利用分層 (layer) 妥善安排程式碼，以 multi-layer 撰寫程式碼能將複雜的邏輯隔離開達成關注點分離(SoC, Separation of concerns)，好處有：
降低耦合：程式拆成各司其職的單元，降低彼此耦合，增加程式單元彈性(擴展性)、複用性。 易於維護：多層式架構中程式碼各司其職，容易定位問題發生點、而非從整個應用程式邏輯找。 敏捷開發：程式可快速回應需求修改(理由與易於維護類似，但是在開發時獲得的好處)。 平行開發：解耦的程式有助於降低協作併版衝突。 分層 三層式架構 一般來說最常用的三層式架構組成為：
表現層 (PL; Presentation Layer)：ASP 內就是 Controller 結尾。 商業邏輯繩 (BLL; Business Logic Layer)：又稱為 Service Layer，命名習慣是 Service、Helper 結尾。 資料存取層(DAL; Data Access Layer)：命名習慣是 Repo 結尾。 另外有人將 Domain、Common 稱為一層，但這個部分其實不太像層，因為會被每一層引用，在架構上呈現比較不像層那樣扁平，裡面包含： Model、Entity、DTO(Data transfer object) 或 Value Object，這裡只有屬性沒有方法。
四層式架構 為了降低 PL 與 BL 之間的耦合，有時會在 Business Logic Layer(BLL) 上再疊一層 Service Layer(SL)，作為 Presentation Layer 與 Business Layer 的中介層，這時 Business Logic Layer 的命名就不以 Serviece 結尾，通常較大型專案才需要如此分法。</description></item><item><title>[But] TypeScript 注意事項</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-ts-bug/</link><pubDate>Fri, 10 Mar 2023 08:14:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-ts-bug/</guid><description>用這樣的寫法，會造成 IDE 異常
:columns=&amp;#34;columns as QTableProps[&amp;#39;columns&amp;#39;]&amp;#34;</description></item><item><title>[Hugo] Toha Theme 10分鐘快速建構</title><link>https://tigernaxojr.github.io/blog/posts/other/hugo-toha-2023/</link><pubDate>Wed, 15 Feb 2023 16:30:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/hugo-toha-2023/</guid><description>環境需求： Hugo Version 0.109.0 (extended) or higher Go language 1.18 or higher (require for hugo modules) Node version v18.x or later and npm 8.x or later. git GitHub 設定 建立一個 repo 叫做 &amp;lt;GitAccount&amp;gt;.github.io，進入 repo 頁面 進入Repo -&amp;gt; Setting -&amp;gt; Code and automation -&amp;gt; Actions -&amp;gt; General -&amp;gt; Workflow permissions -&amp;gt; 勾選 Read and write permissions Repo 設定 抓 template
git clone https://github.com/hugo-toha/hugo-toha.github.io.git mv hugo-toha.github.io &amp;lt;GitAccount&amp;gt;.github.io cd &amp;lt;GitAccount&amp;gt;.github.io hugo mod tidy 設置 config.</description></item><item><title>[Arch] 安裝(Virtualbox)</title><link>https://tigernaxojr.github.io/blog/posts/linux/arch-install/</link><pubDate>Fri, 20 Jan 2023 11:14:30 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/linux/arch-install/</guid><description>Timezone timedatectl set-timezone Asia/Taipei 分割磁碟 fdisk /dev/sda mkswap /dev/sda1 mkfs.ext4 /dev/sda2 mount /dev/sda2 /mnt swapon /dev/sda1 安裝
pacstrap -K /mnt base linux linux-firmware vim sudo openssh docker docker-compose bash-completion fstab 產生 fstab
# -U Use UUIDs for source identifiers genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab Chroot arch-chroot /mnt Time zone ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime # generate /etc/adjtime hwclock --systohc Localization 在/etc/locale.gen裡面把en_US.UTF-8 UTF-8、zh_TW.UTF-8 UTF-8解除註解。
locale-gen echo &amp;#34;LANG=en_US.UTF-8&amp;#34; &amp;gt;&amp;gt; /etc/locale.conf Boot loader pacman -S grub # don’t put the disk number sda1, just the disk name sda grub-install /dev/sda grub-mkconfig -o /boot/grub/grub.</description></item><item><title>[DIY] Git Action 附加編譯檔案到 Release Tag (Dotnet)</title><link>https://tigernaxojr.github.io/blog/posts/devops/git-action-release-dotnet/</link><pubDate>Wed, 18 Jan 2023 09:20:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/devops/git-action-release-dotnet/</guid><description>效果：新增一個 v 開頭的 Tag，等 Action 結束之後該 Release 會獲得相對應的 Release 壓縮檔案。
步驟 新增檔案.github/workflow/Release.yml
name: Release # 新增 tag 的時候觸發 on: push: tags: - &amp;#34;*&amp;#34; # 讓 workflow 獲得上傳檔案的權限 permissions: contents: write jobs: build: runs-on: ubuntu-latest strategy: matrix: dotnet-version: [&amp;#34;5.0.x&amp;#34;] # 判斷 tag 如果是 v 開頭才繼續 if: startsWith(github.ref, &amp;#39;refs/tags/v&amp;#39;) steps: # 取得 Git 中的原始碼 - uses: actions/checkout@v3 - name: Setup .NET Core SDK ${{ matrix.dotnet-version }} uses: actions/setup-dotnet@v3 with: dotnet-version: ${{ matrix.dotnet-version }} # 還原套件 - name: Restore run: dotnet restore # 編譯 - name: Build run: dotnet build --configuration Release --no-restore --no-restore -o api # 壓縮編譯檔 - name: Compress run: zip -r api.</description></item><item><title>[DIY] Git Action 附加編譯檔案到 Release Tag (Vue)</title><link>https://tigernaxojr.github.io/blog/posts/devops/git-action-release-vue/</link><pubDate>Wed, 18 Jan 2023 09:20:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/devops/git-action-release-vue/</guid><description>效果：新增一個 v 開頭的 Tag，等 Action 結束之後該 Release 會獲得相對應的 Release 壓縮檔案。
步驟 新增檔案.github/workflow/Release.yml
name: Release # 新增 tag 的時候觸發 on: push: tags: - &amp;#34;*&amp;#34; # 讓 workflow 獲得上傳檔案的權限 permissions: contents: write jobs: build: runs-on: ubuntu-latest # 判斷 tag 如果是 v 開頭才繼續 if: startsWith(github.ref, &amp;#39;refs/tags/v&amp;#39;) steps: # 取得 Git 中的原始碼 - uses: actions/checkout@v3 # 編譯 - name: Build SPA run: yarn &amp;amp;&amp;amp; yarn build &amp;amp;&amp;amp; mv dist/ app/ # 壓縮編譯檔 - name: Compress run: zip -r app.</description></item><item><title>[元件] 全域元件</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-global/</link><pubDate>Tue, 13 Dec 2022 15:10:57 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-global/</guid><description>Vue 的作法 app.component(&amp;#39;component-name&amp;#39;, component) Quasar2 的做法 Vite/Typescript
建立 src/boot/register-my-component.ts
import { boot } from &amp;#39;quasar/wrappers&amp;#39;; import BasicBtnVue from &amp;#39;src/components/BasicBtn.vue&amp;#39;; // &amp;#34;async&amp;#34; is optional; // more info on params: https://v2.quasar.dev/quasar-cli/boot-files export default boot(async ({ app }) =&amp;gt; { app.component(&amp;#39;x-btn&amp;#39;, BasicBtnVue); }); 在 quasar.conf.js 內新增設定
module.exports = configure(function (/* ctx */) { return { // ...上略 // https://v2.quasar.dev/quasar-cli-vite/boot-files boot: [&amp;#39;i18n&amp;#39;, &amp;#39;register-my-component&amp;#39;], // ... 下略 }; }); 建立型別定義檔，我放在 src/components 下 components.d.ts
import BasicBtn from &amp;#39;.</description></item><item><title>[架構] 無暇的程式碼-讀書心得</title><link>https://tigernaxojr.github.io/blog/posts/software/arch-clean-arch-review/</link><pubDate>Mon, 12 Dec 2022 10:57:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/software/arch-clean-arch-review/</guid><description>軟體系統價值 行為價值、架構價值
行為價值 工程師的首要責任 需求實現、可用性保障(功能性 Bug、性能、穩定性) 業務明確、穩定的前提下，可忽略架構價值
架構價值 更容易適應:需求變更。 變更實作難度和變更的範圍成正比、跟變更的具體形狀無關。 ?? 業務需求通常不明確、時常變動，因此架構非常重要。 不關注架構價值會隨著版本迭代、變更每一行程式成本升高，因此投入的人力成本增加。
知乎-架构整洁之道, 看这一篇就够了！ 架构整洁之道超詳細關係圖</description></item><item><title>[Program] 巢狀結構</title><link>https://tigernaxojr.github.io/blog/posts/software/quality-nest/</link><pubDate>Sun, 11 Dec 2022 02:19:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/software/quality-nest/</guid><description>巢狀程式結構會使程式可讀性差、且難以維護，可讀性高的程式碼深度最多不超過三層，嚴格管控程式碼深度的程式設計師又稱為 Never Nester。
消除巢狀程式手法： Extraction Inversion 依據契約式程式設計，移除不必要判斷 Extraction 從複查的結構抽出程式碼
Inversion 把跳出函式的判斷移動到最上面
依據契約式程式設計，移除不必要判斷 依據契約式程式設計，以程式碼使用者會傳入的參數合法性為前提，移除不必要判斷</description></item><item><title>[授權] OAuth2.0</title><link>https://tigernaxojr.github.io/blog/posts/other/auth-oauth2/</link><pubDate>Fri, 02 Dec 2022 12:43:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/auth-oauth2/</guid><description>OAuth 是一個開發標準(Open Standard)，用來處理有關「授權」（Authorization）相關的問題 允許授權當下的APP取得使用者在平台的相關資訊 OAuth2 有很多變化
腳色：
Resource Owner，也就是使用者。 Client，要向使用者取得權限的應用程式，有自己的 Client ID、 Client Secret。 Authorization Server，負責驗證使用者身分、發 Access Token 給應用程式 Resource Server，存放資源的伺服器，認 Token 給使用者存取資源 用詞
Authorization Grant 同意應用程式取得資源 Redirect URI 驗證伺服器驗證、授權完畢後，返回應用程式的路徑 Scope 授權範圍 OAuth2.0 四種授權類型流程(Grant Types)： Authorization Code 最常見，步驟：
應用程式(Client) 將使用者導向 Authorization Server，提供 Redirect URL, scope, 應用程式的 client id&amp;hellip; Authorization Server 驗證使用者身分，通過之後發給 Authorization Grant，將網址列帶上 Authorization Grant 後將使用者導回 Redirect URI 回到應用程式(Client)。 應用程式(Client)拿 Authorization Grant 和 Authorization Server 換取 Access Token，Authorization Server 會透過應用程式(Client)專屬的 Client ID、 Client Secret 驗證應用程式身分。 應用程式(Client)帶著 Access Token 向 Resource Server 存取資源 Implicit 適合在 Client-side 運行的應用程式適合使用，例如 SPA(Single Page Application) 跳過交換 Access Token 的過程，由 Authorization Server 直接給予 Access Token 比較不安全</description></item><item><title>[HA] 準備系統環境</title><link>https://tigernaxojr.github.io/blog/posts/other/homeassistant/ha-install/</link><pubDate>Tue, 22 Nov 2022 08:50:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/homeassistant/ha-install/</guid><description>這裡是假設手邊已經有一台安裝 docker、docker-compose 的 Linux 系統。 建立專案資料夾 ha ha/docker-compose.yaml
version: &amp;#39;3&amp;#39; services: homeassistant: container_name: homeassistant image: &amp;#34;ghcr.io/home-assistant/home-assistant:stable&amp;#34; volumes: - $PWD/var/ha/config:/config - /etc/localtime:/etc/localtime:ro restart: unless-stopped privileged: true ports: - 8123:8123 # HA 控台的 port mosquitto: container_name: mosquitto image: eclipse-mosquitto volumes: - $PWD/opt/mosquitto:/mosquitto ports: - 1883:1883 - 9001:9001 # 如果要把 zigbee2mqtt 整合在同一台機器上... zigbee2mqtt: container_name: zigbee2mqtt depends_on: - mosquitto image: koenkk/zigbee2mqtt volumes: - $PWD/zigbee2mqtt/data:/app/data - /run/udev:/run/udev:ro ports: - 8080:8080 devices: - /dev/ttyUSB0:/dev/ttyUSB0 restart: always privileged: true ha/opt/mosquitto/config/mosquitto.</description></item><item><title>[Typescript] Typescript 用 InjectionKey 達成強型別 provide</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-ts-provide/</link><pubDate>Thu, 17 Nov 2022 11:49:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-ts-provide/</guid><description>Working with Reactivity 上游元件
&amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt; import { InjectionKey, provide, Ref, reactive } from &amp;#39;vue&amp;#39;; // State export interface IState { drawer: boolean; } export const stateKey: InjectionKey&amp;lt;Ref&amp;lt;IState&amp;gt;&amp;gt; = Symbol(); const state = reactive&amp;lt;IState&amp;gt;({ drawer: false, }); provide&amp;lt;IState&amp;gt;(stateKey, computed(()=&amp;gt;state)); &amp;lt;/script&amp;gt; 下游元件
&amp;lt;script setup lang=&amp;#34;ts&amp;#34;&amp;gt; import { inject, ref } from &amp;#39;vue&amp;#39;; import { stateKey } from &amp;#39;./Parent.vue&amp;#39;; const state = inject(stateKey, ref({ drawer: false })); &amp;lt;/script&amp;gt; Reference Vue.js/guild - Provide / Inject Vue.</description></item><item><title>[Linux] Ubuntu SSH 連線</title><link>https://tigernaxojr.github.io/blog/posts/linux/ubuntu22-ssh/</link><pubDate>Tue, 15 Nov 2022 10:23:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/linux/ubuntu22-ssh/</guid><description>更改 port 可以直接修改/etc/ssh/sshd_config裡面的 Port 設定(解開註解修改)，或直接新增一個檔案：
sudo echo &amp;#34;Port 22&amp;#34; &amp;gt;&amp;gt; /etc/ssh/sshd_config.d/port.conf sudo ufw status verbose sudo ufw allow 22 重啟 sshd
service sshd restart https://www.hostinger.com/tutorials/how-to-change-ssh-port-vps</description></item><item><title>[Docker] 在 Ubuntu 安裝 Docker</title><link>https://tigernaxojr.github.io/blog/posts/container/docker-install/</link><pubDate>Tue, 15 Nov 2022 08:46:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/docker-install/</guid><description>從 Install Docker Engine on Ubuntu 總結出腳本，直接執行就好：
#!/bin/bash # Uninstall old versions sudo apt-get remove docker docker-engine docker.io containerd runc # Set up the repository # Update the apt package index and install packages to allow apt to use a repository over HTTPS sudo apt-get update sudo apt-get install \ ca-certificates \ curl \ gnupg \ lsb-release # Add Docker’s official GPG key sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.</description></item><item><title>[DIY] 設計一個可回傳 Promise 的 Dialog 元件方法</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-promise/</link><pubDate>Fri, 26 Aug 2022 15:03:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-promise/</guid><description>有用過 sweetalert2 的話，應該會喜歡可以同步等待對話框回傳值的方式， 這裡做一個 Vue2 元件，呼叫該元件的方法會彈出對話框等待使用者輸入，並且回傳 Promise， 如此一來就能夠在同一個函式當中處理使用者輸入值。
Dialog 元件設計原理:
元件方法 GetConfirm() 顯示 Dialog 元件並回傳一個 Promise，。 設置watcher讓元件取得使用者輸入後 resolve promise 得利於上述元件的設計，實際上的效益是將複雜度封裝到子元件裡面(watcher移動到元件內)， 如此不需在上層元件撰寫使用者輸入取值的監視邏輯， 讓我們得以在上層元件直接 await GetConfirm 同步取得值進行操作。
這個概念的用途非常廣，例如 Vue router 的 component route guard，在離開表單頁面前跳出使用者確認的 Dialog。
Vuejs 實作 &amp;lt;button id=&amp;#34;xBtn&amp;#34;&amp;gt;執行測試&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;xApp&amp;#34; class=&amp;#34;modal&amp;#34; :style=&amp;#34;{display: dialog?&amp;#39;block&amp;#39;:&amp;#39;none&amp;#39;}&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-content&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;close&amp;#34;&amp;gt;Test Modal&amp;lt;/span&amp;gt; &amp;lt;p&amp;gt;The value selected will resolve by promise.&amp;lt;/p&amp;gt; &amp;lt;button @click=&amp;#34;choose(1)&amp;#34;&amp;gt;1&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;choose(2)&amp;#34;&amp;gt;2&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; let data = { result: null, dialog: false } let dialog = new Vue({ el: &amp;#39;#xApp&amp;#39;, data:() =&amp;gt; data, methods: { getConfirm() { // 先清空 result (避免兩次選中一樣的值無法觸發 watcher) this.</description></item><item><title>[DIY] 利用 orphan branch 和 worktree 在同一 Git 儲存庫控管原始碼與靜態資源分支</title><link>https://tigernaxojr.github.io/blog/posts/devops/git-orphan-worktree/</link><pubDate>Thu, 25 Aug 2022 14:23:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/devops/git-orphan-worktree/</guid><description>目前使用 docker 疊前端的編譯環境比較複雜，不比本機端方便，本篇的把 SSG 發布流程移植到前端專案。
一鍵產生前端靜態資源到特定分支，可設定該分支進入 CI/CD 流程。 在同一 Git Repo 管理部屬的靜態資源與原始碼。 P.S.這裡是以 quasar CLI 為例，專案放在 gitlab，腳本可在 git bash 環境執行，build 指令是 quasar build，輸出的 路徑是 dist/spa，不同專案架構需要作相對應調整。 Git 設定 建立一個 spa orphan branch P.S. 不需在 gitlab 上事先新增相對應的 branch
git checkout --orphan spa git reset --hard git commit --allow-empty -m &amp;#34;Initializing gh-pages branch&amp;#34; git push origin spa git checkout master 新增部屬腳本 deploy.sh 新增到專案跟目錄
#!/bin/bash # 如果要檢查是否有 commit才進行部屬，就取消註解 # if [ &amp;#34;`git status -s`&amp;#34; ] # then # echo &amp;#34;The working directory is dirty.</description></item><item><title>[.NET] 開發階段管理應用程式的敏感資料</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/secret/</link><pubDate>Fri, 29 Jul 2022 14:57:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/secret/</guid><description>基於資訊安全的理由，密碼等敏感性資訊不應該出現在程式碼裡面， 應該把敏感性資料儲存在專案以外的地方，防止對 Git Server 提交專案程式碼的時候把密碼推送到伺服器上， 因此程式開發、部屬階段都應該用適當的策略存放敏感性資料讓程式讀取使用， .NET 儲存敏感性資料大致上來說可以用這兩種方式：
環境變數 Secret Manager 這裡紀錄要如何在 .NET 開發環境以 Secret 儲存敏感性資料，以及程式讀取的方式。
Secret Manager Secret Manager 就是在本地端特定路徑存放 secret.json 檔案：
%APPDATA%\Microsoft\UserSecrets\&amp;lt;user_secrets_id&amp;gt;\secrets.json ~/.microsoft/usersecrets/&amp;lt;user_secrets_id&amp;gt;/secrets.json 需要先針對個別專案啟用專案的 Secret Storage 支援，切換到專案目錄執行：
dotnet user-secrets init 在專案檔裡的 UserSecretsId 區段會得到一段 GUID，這個要作為 user_secrets_id 資料夾名稱。
&amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt; &amp;lt;UserSecretsId&amp;gt;79a3edd0-2092-40a2-a04d-dcb46d5ca9ed&amp;lt;/UserSecretsId&amp;gt; &amp;lt;/PropertyGroup&amp;gt; 以指令設置一組 secret，例如連線字串：
dotnet user-secrets set &amp;#34;ConnectionStrings:POSTGRES&amp;#34; &amp;#34;User ID=root;Password=myPassword;Host=localhost;Port=5432;Database=myDataBase;Pooling=true;Min Pool Size=0;Max Pool Size=100;Connection Lifetime=0;&amp;#34; --project &amp;#34;D:\workspace\MySolution\MyProject&amp;#34; 以檔案直接設置 secret windows
type .\input.json | dotnet user-secrets set Linux/MacOS
cat ./input.json | dotnet user-secrets set 在程式裡面存在 secret.</description></item><item><title>[K8S] 自架 Kubernetes 使用 VM 模擬多台 Server</title><link>https://tigernaxojr.github.io/blog/posts/container/k8s-basc-install/</link><pubDate>Sat, 23 Jul 2022 20:51:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/k8s-basc-install/</guid><description>準備/安裝兩台 Server ( 使用 VM clone 然後修改 hostname ) 一台為 Master (主控)，另外一台為 Node ( 節點 ) 安裝 kubelet/kubeadm ( Master 與 node 皆要執行此步驟 )
# 設定 k8s server上網路 cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system # 安裝 kubeadm / kubelet sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y apt-transport-https curl curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - cat &amp;lt;&amp;lt;EOF | sudo tee /etc/apt/sources.</description></item><item><title>[.NET] 製作 Nuget package</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/nuget/</link><pubDate>Fri, 22 Jul 2022 14:07:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/nuget/</guid><description>安裝 nuget.exe CLI 安裝 nuget.exe CLI，並在環境變數 PATH 新增路徑。
建立 nuspec 設定檔 example
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;package &amp;gt; &amp;lt;metadata&amp;gt; &amp;lt;id&amp;gt;MyPackage&amp;lt;/id&amp;gt; &amp;lt;!--package id --&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;!--版本號--&amp;gt; &amp;lt;title&amp;gt;MyPackage&amp;lt;/title&amp;gt; &amp;lt;!-- package title --&amp;gt; &amp;lt;authors&amp;gt;Chen, Yu Cheng&amp;lt;/authors&amp;gt; &amp;lt;!-- 作者 --&amp;gt; &amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt; &amp;lt;license type=&amp;#34;expression&amp;#34;&amp;gt;MIT&amp;lt;/license&amp;gt; &amp;lt;!-- &amp;lt;icon&amp;gt;icon.png&amp;lt;/icon&amp;gt; --&amp;gt; &amp;lt;!--&amp;lt;projectUrl&amp;gt;http://project_url_here_or_delete_this_line/&amp;lt;/projectUrl&amp;gt;--&amp;gt; &amp;lt;description&amp;gt;MyPackage&amp;lt;/description&amp;gt; &amp;lt;releaseNotes&amp;gt;Test release of MyPackage package.&amp;lt;/releaseNotes&amp;gt; &amp;lt;copyright&amp;gt;-&amp;lt;/copyright&amp;gt; &amp;lt;tags&amp;gt;&amp;lt;/tags&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- 定義 .net framework 4.0 使用時需要的相依姓套件 --&amp;gt; &amp;lt;group targetFramework=&amp;#34;.NETFramework4.0.0&amp;#34; &amp;gt; &amp;lt;dependency id=&amp;#34;Dapper&amp;#34; version=&amp;#34;1.50.2&amp;#34; /&amp;gt; &amp;lt;dependency id=&amp;#34;Newtonsoft.Json&amp;#34; version=&amp;#34;7.0.1&amp;#34; /&amp;gt; &amp;lt;/group&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/metadata&amp;gt; &amp;lt;/package&amp;gt; 打包檔案 假設最低系統需求為 .</description></item><item><title>[K8s] 以 Secrete 共享 tnsnames.ora</title><link>https://tigernaxojr.github.io/blog/posts/container/k8s-example-tnsnames.ora/</link><pubDate>Thu, 21 Jul 2022 08:05:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/k8s-example-tnsnames.ora/</guid><description>Introduction Managed ODP.NET 連線資料庫標榜不需要額外安裝 Oracle Clien，資料庫連線資訊可以透過：
程式內直接設定 connection string。 解析環境變數 TNS_ADMIN 所指資料夾下的 tnsnames.ora。 考慮到可維護性，一旦連線資訊有所變動(Ip/Domain/Port/Service Name/SID)，如果直接將連線字串寫在程式裡面，就需要重新佈署每個程式專案， 因此如果讓 Managed ODP.NET 讀取共用的設定就能夠擁有只維護一份連線資訊的方便性。
單主機的做法是部屬 tnsnames.ora 檔案，但因為 K8S 中 pod 都是隔離的環境，要共用連線資訊透過研究可能有這幾種方式：
ExternalName Service 對應外部的資料庫位址，無法因應 ip, service name, sid 修改。 Service + Endpoints 轉送 ip 和 port。 Secret Volume 共用 tnsnames.ora。 三種連線資訊共用策略是否能反映連線資訊修改：
ExternalName Service Service + Endpoints Secret Volume Ip/Domain 可 可 可 Port 不能 可 可 Service Name/SID 不能 不能 可 Step Secret 用處：
作為容器的環境變數 (但只會在 pod 啟動的時候載入，無法反映動態更改) 作為檔案，可被掛載在其他 Pod 的檔案路徑下，此時 key 視為檔案名稱，value 視為檔案內容，可動態反映修改 作為 deployment 的一部分，敏感資料統一存放在 Docker image，讓其他 pod 可以 pull 存取(也無法動態反映修改，要重新 pull) 因此如果要維護 tnsnames.</description></item><item><title>[.NET] .NET 6 Web API 專案</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-webapi/</link><pubDate>Mon, 18 Jul 2022 11:35:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-webapi/</guid><description>添加 Swagger dotnet add web-logger.csproj package Swashbuckle.AspNetCore -v 6.2.3 Program.cs
builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); https://localhost:&amp;lt;port&amp;gt;/swagger/index.html 添加一行 uniFormat 設置，讓專案除錯啟動的時候打開 swagger 讓Swagger 認得 IActionResult 的 api 接收/回傳型別 https://stackoverflow.com/questions/53105513/swagger-not-generating-model-for-object-wrapped-by-iactionresult
&amp;#34;serverReadyAction&amp;#34;: { &amp;#34;action&amp;#34;: &amp;#34;openExternally&amp;#34;, &amp;#34;pattern&amp;#34;: &amp;#34;^\\s*Now listening on:\\s+(https?://\\S+)&amp;#34;, &amp;#34;uriFormat&amp;#34;: &amp;#34;%s/swagger&amp;#34; } ASP.NET Core doesn&amp;rsquo;t include a logging provider for writing logs to files. To write logs to files from an ASP.NET Core app, consider using a third-party logging provider. https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-6.0 .NET Standard 2.0 之後內建沒有 ConfigurationManager ，需要額外安裝 dotnet add package System.</description></item><item><title>[Web] API Design</title><link>https://tigernaxojr.github.io/blog/posts/web/web-api-design/</link><pubDate>Mon, 11 Jul 2022 11:35:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/web/web-api-design/</guid><description>Reference Best practices in cloud applications</description></item><item><title>[Web] RESTful 敏感性 GET 參數</title><link>https://tigernaxojr.github.io/blog/posts/web/security-get/</link><pubDate>Mon, 11 Jul 2022 11:35:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/web/security-get/</guid><description>網址列參數洩漏風險 目前網頁後端資源存取大多以 RESTful Api 開發， REST 標準下 API 的設計需符合冪等性(idempotent)， SSL 連線連接 TCP 層與 HTTP 層，因此透過 HTTPS 傳輸的網頁，網址進入 TCP 層之後是被加密的， 即使封包被截取也只能看見要傳送的目標主機 那麼敏感性資料可以透過 GET 參數傳送嗎？
如果將機敏性資料夾帶於網址列當中會有洩漏的安全性風險，諸如：
被 Shoulder surfers 竊取。(你的螢幕被偷看) 隨著頁面列印被印出。 使用者將連結加入書籤。 儲存在瀏覽器瀏覽歷史紀錄。 被記錄在 Web Server 的 Log，而 Log 本身可能不安全。 隱藏 RESTful GET 參數 因此避免這些資料外洩的可能，根本的做法就是讓機敏性資料從網址列消失，最好的做法是依據 OWASP 的建議把 參數夾帶在 Header 裡面，其他手段整理：
將機敏性資料加密，但加密也會破壞 API RESTful 特性，在後端需要先解密無法直接對應回物件。 以 POST 的一部份傳輸(透過 HTTPS)，但會直接破壞 API 的 RESTful 特性。 根據 OWASP REST Security Cheat Sheet，應該把敏感性參數夾帶在 GET 請求的 HTTP Header 裡面透過 HTTPS 傳輸。 P.</description></item><item><title>[SQL] Ranking</title><link>https://tigernaxojr.github.io/blog/posts/database/sql-ranking/</link><pubDate>Fri, 17 Jun 2022 15:42:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/database/sql-ranking/</guid><description>先建立一個練習表格：
CREATE TABLE Department ( id SERIAL PRIMARY KEY, name VARCHAR NOT NULL ); CREATE TABLE Employee ( id SERIAL PRIMARY KEY, name VARCHAR NOT NULL, salary INT, dep_id INT, ); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Mandy&amp;#39;, 45000, 2); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Emily&amp;#39;, 43000, 1); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Sylvia&amp;#39;, 26000, 2); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Eva&amp;#39;, 48000, 3); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Sandra&amp;#39;, 33000, 3); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Lily&amp;#39;, 28000, 2); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;April&amp;#39;, 50000, 1); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Cindy&amp;#39;, 43000, 1); INSERT INTO Employee(name, salary, dep_id) VALUES (&amp;#39;Kay&amp;#39;, 40000, 3); INSERT INTO Department(name) VALUES (&amp;#39;IT&amp;#39;); INSERT INTO Department(name) VALUES (&amp;#39;RD&amp;#39;); INSERT INTO Department(name) VALUES (&amp;#39;QA&amp;#39;); 資料排序 直接用 ORDER BY 無法得到秩(排名)</description></item><item><title>[SQL] MERGE</title><link>https://tigernaxojr.github.io/blog/posts/database/sql-merge/</link><pubDate>Tue, 14 Jun 2022 00:20:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/database/sql-merge/</guid><description>一段神奇的語法，可以指定對舊資料、新的資料分別進行不同的動作(通常是更新、新增)， 不指定的話預設是 BY TARGET， 動作目標都是 TARGET。
在更新清單的時候特別好用。
MERGE INTO TABLE1 DEST -- 目標表格 USING( SELECT :K1 K1, :K2 K2, :K3 K3, :K4 K4, FROM DUAL) SRC ON( DEST.K1 = SRC.K1 AND DEST.K2 = SRC.K2 AND DEST.K4 = SRC.K4 ) -- TARGET 有，SOURCE 沒有，更新 TARGET 裡面的紀錄 WHEN MATCHED THEN UPDATE SET F1 = SRC.F1, F2 = SRC.F2, -- TARGET 沒有，SOURCE 有，SOURCE 新增到 TARGET WHEN NOT MATCHED THEN INSERT ( K1, K2, K4, K3, F1, F2 ) VALUES ( :K1, :K2, :K4, :K3, :F1, :F2) Reference [StackOverflow] Performing MERGE with Dapper.</description></item><item><title>[Container] 學習資源</title><link>https://tigernaxojr.github.io/blog/posts/container/basic-resource/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/basic-resource/</guid><description> DockerHub Docker文件 K8S</description></item><item><title>[Docker] Docker Basic Command</title><link>https://tigernaxojr.github.io/blog/posts/container/docker-command/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/docker-command/</guid><description>執行容器
docker run [image] [overwrite defalut commain] 列出正在執行的容器， &amp;ndash;all 可以列出曾經執行過的容器
docker ps [--all] docker run docker ps --all docker create docker start (what different from docker run?) docker system prune docker logs docker stop (send sigterm) 10s then docker kill docker kill docker build -t &amp;lt;dockerid&amp;gt;/&amp;lt;project&amp;gt;:latest . docker exec -it &amp;lt;containerId&amp;gt; /bin/bash (i, t stands for?) # execute new command build context! port mapping 是為了處理 into docker，docker 出來從來沒有被限制
Docker Compose 所有的 docker-compose 都要在 yml 資料夾下作用 可啟動多個 Contailner 並連接 Container 之間的網路 docker-compose.</description></item><item><title>[Docker] Linux-namespace 和 cgroup</title><link>https://tigernaxojr.github.io/blog/posts/container/docker-namespace/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/docker-namespace/</guid><description>UTS namespace – 隔離 interface, ip address, iptagbles, route 等各式各樣跟網路有關的資源 IPC namespace – 隔離 inter process communication PID namespace – 程序編號(Process ID)，每個容器都會有PID=1的超級父process，這個process在本機上也會有另一個PID Network namespace – 允許擁有獨立的網路設備、IP Address、路由、port Mount namespace – 掛載點，也就是隔離文件系統 User namespace – user及user group
Reference 第 11 屆 iThome 鐵人賽 - [Day4] 淺談 Container 實現原理, 初探 Namespace 隔離 Jennifer的Docker筆記本 - Linux Namespace DOCKER基础技术：LINUX NAMESPACE（上） DOCKER基础技术：LINUX NAMESPACE（下） linux cgroup技術介紹</description></item><item><title>[Docker] 安裝PostgreSQL</title><link>https://tigernaxojr.github.io/blog/posts/container/docker-postgresql/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/container/docker-postgresql/</guid><description>安裝 postgreSQL 拉取 postgres image $ docker pull postgres Using default tag: latest latest: Pulling from library/postgres 1fe172e4850f: Pull complete c2bb685f623f: Pull complete 3027ff705410: Pull complete 062371e3461d: Pull complete 39d54e944de7: Pull complete 6530357dda9a: Pull complete b1d302dc78c6: Pull complete f6d91cb1d3c1: Pull complete 9bbd62b0af28: Pull complete 3cfdfc8fbef3: Pull complete 635f8fae1d06: Pull complete 96b6711661dd: Pull complete c08147da7b54: Pull complete Digest: sha256:ab0be6280ada8549f45e6662ab4f00b7f601886fcd55c5976565d4636d87c8b2 Status: Downloaded newer image for postgres:latest docker.io/library/postgres:latest 檢查 docker images
$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 74b0c105737a 4 days ago 376MB 建立 volume docker volume create --name pg-data 執行 Image 環境變數</description></item><item><title>[SQL] 用 CTE (Common Table Expression) 達成遞迴查詢，建立 MenuTree</title><link>https://tigernaxojr.github.io/blog/posts/database/sql-cte/</link><pubDate>Mon, 25 Apr 2022 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/database/sql-cte/</guid><description>建立一個暫存表 testCTE，並暫存查詢語句(所有資料)的結果 MSSQL CTE 名稱前不需加上 RECURSEIVE 關鍵字，必須使用 UNION ALL PostgreSQL：CTE 名稱前需加上 RECURSIVE 關鍵字，可用 UNION 或 UNION ALL
WITH CTE (id, name, parentId, lvl) AS ( -- 取得第一層的資料(Anchor member)(假設沒有 parentId 的是第一層) SELECT id, name parentId, 0 AS lvl FROM menus WHERE parentId IS NULL UNION ALL -- 遞迴取得 Recursive member ( SELECT A.id, A.name, A.parentId, B.lvl + 1 AS lvl FROM menus A INNER JOIN CTE B on A.parentIdi = B.d ) ) SELECT * FROM CTE WHERE id=1 ORDER BY LEVEL Reference [StackOverflow] How to create a query from a menu tree using RECURSIVE CTE?</description></item><item><title>[DevOps] CI/CD-01 安裝 Jenkins</title><link>https://tigernaxojr.github.io/blog/posts/devops/pipeline/01_install_jenkins/</link><pubDate>Mon, 18 Oct 2021 14:04:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/devops/pipeline/01_install_jenkins/</guid><description>環境 硬體部分官方提到: RAM &amp;gt; 256NB，最好 2GB，空間留至少 10GB 放置 Docker 映像檔。 環境部分需要安裝 Java (8 或 11) 和 Docker
安裝 Docker # 卸載舊的 docker sudo apt-get remove -y docker docker-engine docker.io containerd runc # 安裝必要的套件 # apt-transport-https 讓套件管理程式可以透過 https 協定使用 repo sudo apt-get update sudo apt-get install -y \ apt-transport-https \ ca-certificates \ curl \ gnupg \ lsb-release # 添加 Docker 官方 GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.</description></item><item><title>[Security] 利用免費開源資安檢測軟體 SonarQube 檢測 .NET Core 程式碼</title><link>https://tigernaxojr.github.io/blog/posts/devops/sonarqube_netcore31/</link><pubDate>Wed, 22 Sep 2021 11:11:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/devops/sonarqube_netcore31/</guid><description>弱點掃描時常使用 owasp top 10 作為報告， 然而 owasp 軟體一年要價不菲，委外掃一次也是非常貴， 使用免費的 SonarQube 將弱點掃描整合到 CI/CD 階段， 要交付前再花錢委外掃一次似乎是個折衷的作法，避免一次檢測出來的弱點過多改動過大。
SonarQube 分為兩個部分 SonarQube Server、Scanner (Client 端程式)。 Scanner 負責進行掃描並將結果上傳 Server， 而 Server 作為負責處理和儲存分析報告的 compute engine 會分析上傳的結果， 並提供 Web 使用者介面、搜尋功能，因此分析完成後就可以直接在 Web 上查看報告， Scanner 除了能夠在 locale 端使用，還能直接整合到 CI/CD Server 上進行程式碼品質掃描。 雖說可以拿 localhost 直接作為 Server 使用， 這裡還是紀錄如何在虛擬機器上實際安裝 SonarQube， 以後在實際機器上安裝就可以作為參考，
準備 Linux Server 硬體 個人使用或小規模的團隊在一台機器上安裝就足夠使用了， 如果需要架設提供大量服務的伺服器，官網也提供 Cluster 的安裝方式方便做 Loading Balance。
這裡紀錄在一台 Ubuntu 20.04 上架設。 關於 Linux 安裝過程在這裡不加贅述， 官方提到硬體有幾個注意事項，對現代的硬體來說其實都還好，比較要注意的是硬碟空間：
RAM 至少要 2G；free RAM 至少要 1G (所以用 Windows server 就要準備大很多喔)。 上傳報告需要一定的空間，因次對硬碟的空間與效能有一定的要求，不夠的話容易太慢。 server side 不支援 32-bit 作業系統；但 Scanner 可以支援 32-bit systems。 安裝 OpenJDK 11 sudo apt update sudo apt upgrade sudo apt install openjdk-11-jdk # 確認 java 版本 java --version 然後在 .</description></item><item><title>[Web] 把電腦的難字造字檔用 FontForge 轉為字型放到網頁上使用</title><link>https://tigernaxojr.github.io/blog/posts/web/web-tool-eudc-frontforge/eudc/</link><pubDate>Tue, 24 Aug 2021 10:07:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/web/web-tool-eudc-frontforge/eudc/</guid><description>Web 在顯示姓名的時候常會遇到中文難字無法顯示， 此時開發者在本機端如果有安裝造字檔 EUDC.TTE 就可以轉為 woff、woff2、ttf 讓網頁正確顯示難字。 過程需要字型工具軟體 FontForge， 步驟如下：
拿到造字檔 EUDC.TTE 用 cmd 打開 regedit (win10 搜尋圖示點下後，輸入 cmd，出現小黑窗後再輸入 regedit) 找到機碼 HKEY_CURRENT_USER -&amp;gt; EUDC -&amp;gt; 950 資料夾下的 SystemDefaultEUDCFont 設定檔。 從設定檔的值就是 EUDC 的存放位址取出 EUDC.tte，我這裡是 C:\CIBEN\EUDC.tte 安裝 FontForge，找到 fontforge.exe 的位址 (注意，跟桌面捷徑呼叫的執行檔不一樣！)，我的是在 C:/Program Files (x86)/FontForgeBuilds/bin/fontforge.exe 建立一個轉檔腳本 tte-extract.pe，內容如下 # Open EUDC TTE Open(&amp;#34;EUDC.tte&amp;#34;, 4) # CHANGE TTFNAME 2 EUDC SetTTFName(0x409,1,&amp;#34;EUDC&amp;#34;) SetTTFName(0x409,2,&amp;#34;EUDC&amp;#34;) SetTTFName(0x409,3,&amp;#34;EUDC&amp;#34;) SetTTFName(0x409,4,&amp;#34;EUDC&amp;#34;) SetTTFName(0x404,1,&amp;#34;EUDC&amp;#34;) SetTTFName(0x404,2,&amp;#34;EUDC&amp;#34;) SetTTFName(0x409,3,&amp;#34;&amp;#34;) SetTTFName(0x404,4,&amp;#34;EUDC&amp;#34;) SetFontNames(&amp;#34;EUDC&amp;#34;, &amp;#34;EUDC&amp;#34;, &amp;#34;EUDC&amp;#34;, &amp;#34;Regular&amp;#34;, &amp;#34;655&amp;#34;, &amp;#34;1.0.0&amp;#34;) Generate(&amp;#34;EUDC.ttf&amp;#34;) Generate(&amp;#34;EUDC.</description></item><item><title>[DIY] Vue Router 使用 Navigation Guard 加入查詢參數</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-router_add_query/</link><pubDate>Thu, 19 Aug 2021 17:20:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-router_add_query/</guid><description>工作上需要把每一個路由都加上同一個 query string 第一直覺就是直接寫成這樣：
router.beforeEach(async (to, from, next) =&amp;gt; { next({ path: path, query: {...to.queryl ,token: tokenStr} }) }) 結果卻跳出 Maximum call stack size exceeded 的錯誤，判斷程式出現無窮迴圈：
runtime.js?96cf:285 Uncaught (in promise) RangeError: Maximum call stack size exceeded 第一個反應是傻眼貓咪，為什麼 next() 不傳入參數的時候不會出現無窮迴圈，但塞進參數就會， 難道說 next() 在傳入參數與不傳入參數的行為並不相同！！ 因此去翻閱官網對 next() 的說明：
next: Function: this function must be called to resolve the hook. The action depends on the arguments provided to next:
next(): move on to the next hook in the pipeline.</description></item><item><title>[.NET Core] 在 Ubuntu 20.04 上部署 .NET (使用 Nginx 反向代理)</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/deploy-ubuntu2004-nginx/ubuntu2004_nginx/</link><pubDate>Wed, 11 Aug 2021 16:48:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/deploy-ubuntu2004-nginx/ubuntu2004_nginx/</guid><description>設置 Ubuntu 安裝 .NET Core Runtime wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-runtime-3.1 安裝 Nginx 新增套件來源，新增檔案 /etc/apt/sources.list.d/nginx.list
#/etc/apt/sources.list.d/nginx.list. deb https://nginx.org/packages/ubuntu/ focal nginx deb-src https://nginx.org/packages/ubuntu/ focal nginx 安裝
sudo apt update sudo apt install nginx -y 啟動、設定開機啟動
# 啟動 nginx sudo systemctl start nginx # 設置 nginx 開機啟動 sudo systemctl enable nginx # 確認 nginx 運行狀態 sudo systemctl status nginx 設置 Nginx 反向代理本機的 5000 連接埠(之後 Kestrel 的 http 服務端口)</description></item><item><title>[.NET] JsonDocument 與 DataTable 的互相轉換</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/snippet-json-dt/</link><pubDate>Fri, 06 Aug 2021 14:56:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/snippet-json-dt/</guid><description>在 LINQ 當道的時代雖然 DataTable 比較少用了，但還是難免會碰到， 下面紀錄如何在.NET Core 裡面把 DataTable 的資料轉成 JsonElement，
public JsonElement jsonFromDataTable(DataTable dt) { using (var stream = new MemoryStream()) { using (var writer = new Utf8JsonWriter(stream)) { // 起始一個裝 JElement 的陣列 writer.WriteStartArray(); foreach (DataRow row in dt.Rows) { // 開始寫入每個 Row 各自對應的 JElement 寫入程序 writer.WriteStartObject(); foreach (DataColumn column in row.Table.Columns) { // 先寫入屬性名稱 writer.WritePropertyName(column.ColumnName); // 判斷欄位值是否為 DBNull 來寫入值或 Null if (row[column.ColumnName] == DBNull.Value) writer.WriteNullValue(); else JsonSerializer.Serialize(writer, row[column]); } // 結束一列資料對應的 JElement 寫入程序 writer.</description></item><item><title>[.NET] JsonElement 的操作</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/snippet-json-operate/</link><pubDate>Fri, 06 Aug 2021 14:37:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/snippet-json-operate/</guid><description>.NET Core 中對 JsonElement 的操作不像以往 Newtonsoft.Json 一樣直覺， 需要自己建立一個方便的讀寫方法，原理是寫到另一個 JsonDocument， 如果要移除某個屬性也是一樣的道理，變成從從屬性名稱判斷是不是要寫到新的 JsonDocument， 下面是添加一個屬性的範例。
public static class JsonExt { public static void Add(ref this JsonElement source, string name, string value) { using (MemoryStream ms = new MemoryStream()) { using (Utf8JsonWriter writer = new Utf8JsonWriter(ms)) { using (JsonDocument json = JsonDocument.Parse(&amp;#34;{}&amp;#34;)) { writer.WriteStartObject(); // 開始 foreach (var el in source.EnumerateObject()) el.WriteTo(writer); // 寫入新屬性 writer.WritePropertyName(name); writer.WriteStringValue(value); writer.WriteEndObject(); // 結束 } } var resultStr = Encoding.</description></item><item><title>[DIY] 用 Render Function 打造靈活的 CheckBox 元件範例</title><link>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-yncheckbox/</link><pubDate>Thu, 29 Jul 2021 13:50:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/frontend-vue/vue-comp-yncheckbox/</guid><description>情境1：要選取多個 ckeckbox 對應到資料庫的欄位，欄位值是一串YN代表某個選項是否有被選去，例如： YNNYYNNYYN 情境2：要選取多個 ckeckbox 對應到資料庫的欄位，欄位值只有一個，可能是任何字元，例如： 1 可以打造兩個元件，分別對應至單選、多選 單選元件 程式碼 (Code) Vue.component(&amp;#39;x-ck-single&amp;#39;, { props: { disabled: { type: Boolean, default: () =&amp;gt; false }, // checkbox 的標記 [string] || [{text:string, value:any}] labels: { type: Array, default: () =&amp;gt; [&amp;#39;Yes&amp;#39;, &amp;#39;No&amp;#39;] }, value: { default: () =&amp;gt; null }, trueValue: { default: () =&amp;gt; &amp;#39;Y&amp;#39; }, falseValue: { default: () =&amp;gt; &amp;#39;N&amp;#39; }, inline: { type: Boolean, default: () =&amp;gt; false }, }, data() { return { innervalue_: this.</description></item><item><title>[架構] 多層式架構(Multitier Architecture)</title><link>https://tigernaxojr.github.io/blog/posts/software/arch-n-tier/</link><pubDate>Mon, 17 May 2021 23:20:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/software/arch-n-tier/</guid><description>多層式架構 Multitier Architecture 或稱 N-Tier Architecture， 是 Client–server architecture 的一種， 多層架構的層可以是 layer 或 tier，這兩者之間主要的差別在於 layer 指程式邏輯在應用程式的位置； 而 tier 指 layer 在系統上實際部屬執行的位址，屬於物理層級的指涉。 這一篇的層指的是 tier。
N-tier model N-tier model，層與層之間的邊界有 N-1 個，而程式跨邊界會造成巨大的效能損失， 一說為光是跨越同一台機器上不同進程(process)邊界存取資源損失就大約1000倍， 如果透過網路進行遠端呼叫勢必損失更多， 因此每跨越一個邊界進行資源存取效能就會以幾何級數損失。 且增加邊界在軟體設計上會增加複雜度，簡單的應用程式使用多層式架構很容易造成過度設計(over design)， 因此如何適當添加層級(tier)也是一門學問，添加層級時必需考量如何在應用程式所部屬的環境獲取最大的成本效益。 軟體是否採用多層式架構必須以多層式架構的優缺點進行取捨(尤其是可擴展性與效能之間)。
提高可擴展性(scalability)。 提高效能(performance)。 提高容錯率(fault tolerance)。 提高安全性(security)。 1-tier model 所有的 layer 都在同一機器、同一記憶體空間內運行，因此不需考慮網路造成的性能損失。
2-tier model layer 分配至兩個不同的記憶體空間運行，記憶體空間可能位於相同或兩台不同的機器上(通常是不同機器)，典型的例子是分配到 client、server 上運行。
3-tier model 多層式架構當中最常使用的就是三層架構(three-tier architecture)。 三層架構與Web應用程式來說明如下：
表現層(Presentation)：又稱為 UI 層，以Web來說就是呈現出來的前端網頁。 應用程式層(Application)：以 Web 來說相當於伺服器上執行的應用程式。 資料層(Data)：這一層包含資料儲存、呈現機制，以 Web 來說通常指 Database。 Reference wikipedia - Multitier architecture Rockford Lhotka - Should all apps be n-tier?</description></item><item><title>[Tools] 10分鐘建造 proxy 克服跨網域資源存取(CORS)問題</title><link>https://tigernaxojr.github.io/blog/posts/javascript/diy-http-proxy-middleware/</link><pubDate>Sat, 20 Mar 2021 08:45:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/diy-http-proxy-middleware/</guid><description>前後端分離的開發環境以 Ajax 呼叫資源時時會遇到跨網域存取的問題， 一些比較全面的開發環境像是 webpack、vue-cli 等等通常提供內建開發代理伺服器可供設置， 如果要對於不熟悉的開發環境進行快速除錯 (例如 vue 開發者臨時檢查其他框架的程式碼遇到跨網域問題)， 重新研究如何設置開發環境跨網域代理伺服器往往就花費多餘的時間 (不過最終還是要搭建起來阿，喂~~)， 因此紀錄一下怎麼用 node.js 建立一個通用的代理伺服器處理跨網域問題，整個過程不超過5分鐘。
步驟 首先安裝 node.js 建立專案資料夾 建立一個資料夾叫做 proxy 存放這個專案吧，手動建立也可以。
mkdir proxy 起始專案 用指令移動到該專案資料夾下，起始專案：
cd proxy npm init 安裝相依性 npm i express http-proxy-middleware cors 建立 app.js const express = require(&amp;#39;express&amp;#39;); const cors = require(&amp;#39;cors&amp;#39;); const { createProxyMiddleware } = require(&amp;#39;http-proxy-middleware&amp;#39;); // 建立一個 Express 伺服器 const app = express(); app.use(cors()) // 設定 Express 伺服器的 Host、Port const PORT = 3000; const HOST = &amp;#34;localhost&amp;#34;; // 設定代理到 google 的 Proxy 端點 app.</description></item><item><title>[.NET Core] 不阻塞的非同步控制器(Non-Blocking Asynchronous Controllers)</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/basic-async-controller/</link><pubDate>Wed, 17 Mar 2021 03:32:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/basic-async-controller/</guid><description>ASP .NET Core 當中的 Web 控制器屬於IO密集的應用程式，當中主要使用的 TAP 是一種簡易使用、語言層級的非同步設計模式。 透過 TAP 可設計出非同步(Asynchronous)/非阻塞(Non-Blocking)的 Web API，大幅提高 Web 應用程式的併發性(Concurrency)。
非同步方法 C# 當中基於 TAP 設計的的非同步方法 (TAP method) 有幾個特性：
產生可等待 awaitable 型別 (Task, Task&amp;lt;TResult&amp;gt;, ValueTask, 和 ValueTask&amp;lt;TResult&amp;gt;)， 其中以 Task、Task&amp;lt;TResult&amp;gt;最常見。 非同步方法的參數順序通常跟同步版本的方法相同，但方法名稱以 Async 結尾。 async、await await 運算子用來等待非同步行為完成， 或等待非同步行為完成後解析回傳值， await 運算子只能用在非同步方法中， 因此 await 運算子的外層方法必須套用 async 修飾， 否則會出現錯誤。
非同步 Action 設計原則： 總是加上 async 關鍵字 async 的方法裡面可以等待非同步方法。 action 前加上 async 的作用在於建立一個管理回傳任務的狀態機(state machine)， 當 async 方法擲出例外時會被狀態機捕獲並放到任務中回傳， 而這也是以 Task 作為回傳值的方法的預期行為。 如果沒有 async 關鍵字則擲出的例外會被直接傳遞到呼叫者(caller)， 因此除非確定該 aciton 不會擲出任何例外，否則一律加上 async。</description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(二)-驗證設定</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_2/</link><pubDate>Fri, 12 Mar 2021 23:08:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_2/</guid><description>驗證方案(Authentication Scheme) 驗證方案包含兩個部分：
驗證處理函式(Authentication handler)，可能是 IAuthenticationHandler 或 AuthenticationHandler 的實作，相當於驗證方案的行為，責任範圍涵蓋: 驗證使用者， 驗證成功時，建構呈現使用者識別(user identity)的 AuthenticationTicket。 驗證失敗時，回傳 &amp;rsquo;no result&amp;rsquo; 或 &amp;lsquo;failure&amp;rsquo; 負責從請求上下文(request context)中建構使用者識別 (user identity)。 定義了 challenge/forbid action。 驗證處理函式的設定選項(Opitons of Authentication handler)。 驗證方案當中的 authencate action 負責從請求上下文(request context)中建構使用者識別 (user identity)， 常見的例子為：
cookie authentication scheme 從 cookie 資訊建構 user identity. JWT bearer scheme 反序列化(deserialize)、驗證(validate) token，並從 token 所攜帶資訊建構 user identity 使用驗證方案 在 Startup.ConfigureServices 以 AddAuthentication 註冊驗證服務時會回傳一個 AuthenticationBuilder， AuthenticationBuilder 設定驗證方案的方式有：
呼叫 scheme-specific 擴充方法，例如 AddJwtBearer、AddCookie，這些擴充方法會自動呼叫 AuthenticationBuilder.AddScheme 設定需要的驗證方式。 以 AuthenticationBuilder 內建方法 AddScheme 手動設定，一般來說較少使用。 P.</description></item><item><title>[Bot] Telegram bot</title><link>https://tigernaxojr.github.io/blog/posts/other/telegram-bot/</link><pubDate>Fri, 29 Jan 2021 23:46:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/telegram-bot/</guid><description>找 @BotFather 對話打 /newbot，設定 name username，然後就會拿到 API token
Referance Github-TelegramBots/Telegram.Bot Telegram.Bot-Documentation Telegram Bot API</description></item><item><title>[Tools] 在 linux 中使用 google drive cli</title><link>https://tigernaxojr.github.io/blog/posts/other/linux-gdrive-cli/</link><pubDate>Fri, 29 Jan 2021 23:46:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/linux-gdrive-cli/</guid><description>重新編譯 gdrive 取得憑證 首先到Google API Console， 建立專案 啟動 Google Drive API。 啟用之後選擇左邊的&amp;quot;設定同意畫面&amp;quot;，填寫必要的欄位其他依照需求設置就好 建立一組 OAth2 憑證，會有 Client ID 和 Secret 編譯專案 1.安裝 Golang 2.下載 gdrive 專案 git clone git@github.com:prasmussen/gdrive.git 3.修改專案下的handlers_drive.go，把下列兩行改成拿到的 Client ID、Secret const ClientId = &amp;#34;*************************************.com&amp;#34; const ClientSecret = &amp;#34;*************&amp;#34; 4.取得需要的 golang 套件 go get github.com/prasmussen/gdrive 5.到專案資料夾下編譯，編譯完後就會有得到執行檔 go build 設定 設置環境變數 將編譯好的執行檔上傳Linux，假設放在${HOME}/gdrive-linux-x64：
# 建立${HOME}/bin $ mkdir -p ${HOME}/bin # 把gdrive-linux-x64放進去重新命名為gdrive $ mv ${HOME}/gdrive-linux-x64 ${HOME}/bin/gdrive # 賦予gdrive執行權限 $ chmod u+x ${HOME}/bin/gdrive # 如果PATH裡面找不到${HOME}/bin就新增並重新讀取環境設定 $ echo ${PATH} | grep -qE ${HOME}/bin[^/] &amp;amp;&amp;amp; \ &amp;gt; echo &amp;#34;PATH=\${HOME}/bin:\${PATH}&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title>[JS] 非同步程式設計-Promise 與 Async/Await</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-async/</link><pubDate>Sat, 09 Jan 2021 01:32:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-async/</guid><description>Promise Promise 狀態 Promise function 執行後會立即回傳一個稱為 Promise 的物件， Promise 本身帶有三種狀態：
pending: 已初始化，但尚未成功或失敗。 fulfilled: 操作成功完成。 rejected: 操作失敗結束。 promise 一但被回傳就處於 pending 狀態， promise 的建構式有兩個參數個接收一個 function，可以操作 Promise 的 fulfilled 和 rejected。
// resolve(value): 放入解析的值 // reject(reson): 放入拒絕的理由 function test(value){ let reason = &amp;#39;找不到 value&amp;#39; return new Promise((resolve, reject)=&amp;gt;{ value ? resolve(value) :reject(reason) }) } 將 Promise 繫結回呼函式 若要將某個程式語句安排在 Promise 被滿足之後執行。 可以利用 Promise.prototype 上的三個物件方法(Instance Method)方法繫結回呼函式(callback function)： then catch finally resolve 會被 then 捕獲，reject 會被最近的 catch 捕獲</description></item><item><title>[JS] 提升(Hoisting)與暫時性死區(Temporal Dead Zone)</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-hoisting/</link><pubDate>Sat, 09 Jan 2021 01:31:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-hoisting/</guid><description>網路上時常見到充滿 function 與 var 的 JavaScript 求值題目， 筆者在釐清 Hoisting 和 TDZ 的觀念前時常覺得答案出乎意料， 雖然現在撰寫程式碼都已經避免使用 var，但是維護 legacy code 還是會用到，因此在這裡做個筆記。
Hoisting 對學過伺服器端語言(C#、C/C++&amp;hellip;)的人來說，預期試圖對未宣告的變數取值會出現 ReferenceError是很正常的事， 在 JavaScript 中也是如此：
console.log(x) // ReferenceError: x is not defined 但 JavaScript 把 var 宣告變數放在後面，x 前面對 x 取值就變成 undefine， 在 JavaScript 當中對變數取值獲得 undefine 代表變數處於宣告後已分配記憶體空間(初始化、initiation)但尚未賦值的狀態， 但是明明 JavaScript 在宣告前就取值，怎麼能夠認得 x、而且知道 x 被初始化為 undefined 呢？
console.log(x) // undefined var x 原因在於 javascript 會先程式中的蒐集 var(let/const/function) 宣告並釐清對應的作用域， 最後再執行程式碼，這個行為就如同宣告被提升(Hoisting)到前面行數的程式碼中一樣。
JavaScript 跟傳統 OOP 語言一樣，在變數提升後、宣告初始化、賦值等等時機取用變數會獲得不同輸出結果， 這篇文章(link)中提到， 稱 JavaScript 為直譯式(解釋型)語言實際上是通俗的說法，語言本身沒有規定實現的方式(編/直譯)， 舉例來說 Chrome 瀏覽器所使用的 Google V8 JavaScript engine， 所帶的解釋器 (interpreter) 會將程式編譯 (compile) 成字節碼 (bytecode)， 最後再由編譯器 (compiler) 即時編譯 (JIT;just-in-time compilation) 編譯成機器碼執行， 而 JavaScript 被編譯時宣告會被蒐集到最頂端進行定義並區分作用域(scope)，這個行為就是 Hoisting ，記住重點在於JS編譯後會先定義變數及區分作用域，編譯後的程式看起來就像這樣：</description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(四)-授權設定</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_4/</link><pubDate>Thu, 31 Dec 2020 14:08:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_4/</guid><description>授權(Authorization) 授權(Authorization): 界定用戶可存取資源範圍的程序。 Policy-based authorization ASP .NET Core 的授權以政策 Policy 進行設定
自訂授權 RBAC Name 記載使用者識別名稱(User Identity) userData 記載以 | 分隔的使用者角色 Role
驗證與授權 Challenge、Forbid 中間件順序 先驗證、再授權 The Order of UseAuthentication、UseAuthorization
Reference MSDN - Principal and Identity Objects MSDN - IAuthenticationService Interface MSDN - AuthenticationService Class MSDN - Overview of ASP.NET Core Security MSDN - Overview of ASP.NET Core authentication MSDN - Policy-based authorization in ASP.NET Core MSDN - Microsoft.AspNetCore.Authentication.Cookies Namespace MSDN - Microsoft.</description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(三)-Cookie 驗證實例</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_3/</link><pubDate>Wed, 30 Dec 2020 23:24:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_3/</guid><description>前兩篇介紹了驗證、授權在 .NET Core 當中的基本的概念，本節實作 Cookie 驗證的設定、簽發、登出&amp;hellip;
Configuration 在 Startup.ConfigureServices 方法中設置驗證方案， 並且可以在 AddCookie 當中設置 CookieAuthenticationOptions(見前一節)
// 設置 cookie 驗證作為應用程式預設的驗證方案 services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) // 將 cookie 服務添加到服務容器當中 .AddCookie(); 在 Startup.Configure 方法中，呼叫 UseAuthentication、UseAuthorization， 啟用驗證中間件並設置 HttpContext.User 屬性， UseAuthentication 必須在 UseAuthorization 之前，且兩者都必須在 UseEndpoints 之前被呼叫：
app.UseAuthentication(); // 驗證 app.UseAuthorization(); // 授權 // 端點對應 app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapControllers(); endpoints.MapRazorPages(); }); Cookie Policy Middleware 在中間件當中設置的驗證政策會作用於全域(每個請求)， 舉例來說，最常用的就是限制應用程式所有 Cookie 的 SameSite 屬性， 所有 Controller 簽發的 Cookie.SamSite 屬性會被限縮為較嚴格(不比 MinimumSameSitePolicy 寬鬆)的設置：
app.UseCookiePolicy(new CookiePolicyOptions { // 所有 Cookie.</description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(X)-備註頁面</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_memo/</link><pubDate>Mon, 23 Nov 2020 15:48:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_memo/</guid><description>Identity Objects Principal Objects IPrincipal 物件帶有 IIdentity 物件的參考 可指定 Authentication Scheme 獲得 Identity
IAuthenticationService SignOutAsync 清除 Cookie 的 Claims 在 Cookie 寫入 Claims
Token 登入 登入 API 實作 宣告 ClaimsPrincipal 後，可利用服務容器已注入的認證服務(實作 IAuthencationService 的類別)，進行登入、登出。 使用 SignInAsync 方法登入(寫入認證資訊)需要這些東西：
ClaimsPrincipal(必要)，我們需要 ClaimsPrincipal 攜帶 ClaimsIdentity 及 Claims。 AuthenticationScheme string (Optional)可指定 Scheme，若沒有給就是使用預設的 Scheme。 authProperties (Optional)，可指定自訂認證選項 AuthenticationHttpContextExtensions AuthenticationHttpContextExtensions 類別對 HttpContext 類別擴展出認證方法， 從服務容器中獲取 IAuthenticationService 實體類別，並調用同名方法。
IAuthenticationService SignOutAsync 清除 Cookie 的 Claims 可儲存 ClaimsPrincipal進行簽發(登入)認證，作為身分識別。</description></item><item><title>[.NET Core] ASP .NET Core 3.1 驗證與授權(一)-驗證與授權</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_1/</link><pubDate>Mon, 23 Nov 2020 08:39:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-auth/auth_guild_1/</guid><description>在進入 ASP .NET Core 3.1 中驗證(Authentication)與授權(Authorization)的作用流程前，應當對兩者有抽象概念上的認識，以及了解兩者的差異。
驗證(Authentication) 驗證是確認用戶識別碼(User Identity)的程序，通過驗證的用戶可具有一或多個用戶識別碼， 因此驗證服務本身就是使用者識別碼提供者 (User Identity Provider)， ASP.NET Core 3.1 當中以依賴注入(DI; Dependency Injection)將驗證服務注入服務容器 (Service Container)， 使應用程式驗證簽發時能夠取用。
授權(Authorization) 授權的作用是界定用戶可存取資源範圍，作用描述如下：
限制所存取的資源是否需要驗證。 已獲得驗證的特定用戶、特定腳色方能存取特定資源。 所存取的資源需要以何種授權政策(Authorizaton Policy)、即驗證方案(Authencation Scheme)。 挑戰和禁止 有些名詞需要先解釋： 驗證方案(Authentication Scheme)當中設置了挑戰(Chellange)與禁止(Forbid)應該進行的動作，這些註冊於驗證方案的動作動作由授權叫用。
挑戰(Challenge) 未驗證使用者要存取需驗證才能存取的資源時， 授權服務會叫用 IAuthenticationService.ChallengeAsync 發起 challenge， challenge 被發起後所伴隨採取的行動稱為 challenge action， 且 challenge action 應讓使用者知道應該以哪一種驗證機制取得授權，常見的具體範例有：
cookie 驗證方案將使用者轉址到登入頁面。 JWT 回傳 401 Unauthorized 狀態碼，並在 Header 帶入 www-authenticate: bearer。 禁止(Forbid) 已驗證的使用者要存取授權之外的資源時， 授權會叫用 IAuthenticationService.ForbidAsync 發起 Forbid， Forbid 發起後所伴隨採取的行動稱為 Forbid action， Forbid action 的目的是要讓使用者知道自己已通過認證、且不具權限訪問所請求的資源， 常見的具體範例有：</description></item><item><title>[SignalR] Websocket 即時聊天程式(三) - 後端 Token 認證</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_3_validate_token/</link><pubDate>Fri, 20 Nov 2020 22:44:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_3_validate_token/</guid><description>安裝套件 要進行 Token 的認證，需要先安裝 Microsoft.AspNetCore.Authentication.JwtBearer 套件：
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer 註冊認證服務 新增一個檔案 DependencyInjection.cs，在當中製作 IServiceCollection 的擴充方法來自定義 JWT token 認證服務， 在裡面設置 Token 的認證規則、使用者識別碼對應、使用者群組對應， 而 SignalR 抓取使用者識別碼 (UserIdentifier) 的介面方法是 IUserIdProvider.GetUserId， 因此我們需要另外新增一個實作 IUserProvider 的類別注入服務容器給 SignalR 使用 ，該檔案程式碼如下：
using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.AspNetCore.SignalR; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.IdentityModel.Tokens; using System.Diagnostics.CodeAnalysis; using System.IdentityModel.Tokens.Jwt; using System.Linq; using System.Threading.Tasks; namespace SignalR.Extensions.DependencyInjection { public static class MyAddConfig { public static IServiceCollection AddMyJWTAuth( [NotNull] this IServiceCollection services, IConfiguration config ) { services.</description></item><item><title>[Linux] 在 Ubuntu 20.04 中設置 vim plugin YouCompleteMe</title><link>https://tigernaxojr.github.io/blog/posts/other/vim-plugin-ycm/</link><pubDate>Wed, 18 Nov 2020 23:14:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/vim-plugin-ycm/</guid><description>安裝 junegunn/vim-plug 管理套件 以指令安裝 junegunn/vim-plug
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 在 ~/.vimrc 加入 Plug &amp;lsquo;ycm-core/YouCompleteMe&amp;rsquo;
&amp;#34; Specify a directory for plugins call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;) Plug &amp;#39;ycm-core/YouCompleteMe&amp;#39; &amp;#34; Initialize plugin system call plug#end() 打開 vim，在 vim 命令列輸入安裝 Plugin 的指令下載 YCM，這個時候還沒編譯所以會顯示安裝失敗
:PlugInstall 編譯YCM 安裝編譯工具
sudo apt install -y build-essential cmake vim python3-dev 編譯
~/.vim/plugged/YouCompleteMe/install.py 測試 打開 vim 確認，完工~
Reference GitHub - ycm-core/YouCompleteMe GitHub - junegunn/vim-plug</description></item><item><title>[Code] 複製元件內的文字</title><link>https://tigernaxojr.github.io/blog/posts/javascript/code-copy-html-content/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/code-copy-html-content/</guid><description>要在前端用 JavaScript 將 DOM 的內容複製到剪貼簿有幾種姿勢：
Clipboard API 基本上目前(2020年底)，主流瀏覽器近期版本都支援了，如果不考慮 IE 的話倒是可以使用，語法精簡而且能非同步操作。
不支援 IE 是非同步方法，會傳回 Promise 支援從變數直接複製到剪貼簿 只有 HTTPS 網頁可以使用此 API Chrome 66 之後透過 Clipboard 複製已經不會彈出提示視窗 只能在 active tab 發生作用 (a.k.a. 開發者無法在 colsole 做測試，會得到 DOMException: Document is not focused.) function copyText(text) { // 判斷瀏覽器支援 if (!navigator.clipboard) { alert(&amp;#34;瀏覽器不支援 Clipboard API&amp;#34;) // 這裡可以改用 document.execCommand(&amp;#39;copy&amp;#39;) 的方法 } // 非同步複製至剪貼簿 let resolve = () =&amp;gt; { console.log(&amp;#39;透過 Clipboard 複製至剪貼簿成功&amp;#39;); } let reject = (err) =&amp;gt; { console.</description></item><item><title>[DIY] 用Typescript搭建簡易前端路由</title><link>https://tigernaxojr.github.io/blog/posts/javascript/diy-simple-router/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/diy-simple-router/</guid><description>起始一個使用 vallina-ts 的 vite 專案並安裝套件，並使用 bootstrap 做簡單的 css 套用：
npm init vite@latest route-test #依序選擇 vallina-&amp;gt;vallina-ts cd route-test npm i # 安裝套件 npm i bootstrap # 安裝 bootstrap 在 index.html 新增元素 app &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; type=&amp;#34;image/svg+xml&amp;#34; href=&amp;#34;favicon.svg&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Vite App&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34; class=&amp;#34;container-fluid&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;menu&amp;#34; class=&amp;#34;row g-0&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;root&amp;#34; class=&amp;#34;row g-0&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;/src/main.ts&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>[JS] 各種模組(module)</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-module/</link><pubDate>Fri, 13 Nov 2020 06:26:00 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-module/</guid><description>JS模組規範有很多：AMD、UMD、CMD、commonJS、ES6 module
Reference JS模組規範：AMD、UMD、CMD、commonJS、ES6 module</description></item><item><title>[SignalR] Websocket 即時聊天程式(四) - 前端登入頁面</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_4_front_end_login/</link><pubDate>Tue, 10 Nov 2020 05:05:45 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_4_front_end_login/</guid><description>安裝 axios SignalR 連線驗證的方式是將 token 夾帶於網址參數中發送到伺服器，因此進行 websocket 連線前我們透過 ajax 向伺服器發送帳號密碼索取登入的 Token，我們安裝方便使用 ajax 的 axios 函式庫：
axios 一樣可以透過 LibMan 安裝~
libman install axios@latest \ -p unpkg \ -d wwwroot/js/axios \ --files dist/axios.min.js 在 wwwRoot/index.html 添加對 axios 的引用：
&amp;lt;script src=&amp;#34;./lib/axios/dist/axios.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 簡易登入UI 雖然是功能原型，為了讓做出來的頁面不要太粗暴，拿 bootstrap 的 css 來套用一下 UI：
libman install bootstrap@5.0.0-alpha2 \ -p unpkg \ -d wwwroot/lib/bootstrap \ --files dist/js/bootstrap.min.js \ --files dist/css/bootstrap.min.css 在 wwwRoot/index.html 添加對 bootstrap css 的引用：
&amp;lt;script src=&amp;#34;./lib/bootstrap/dist/js/bootstrap.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 現在將 wwwRoot/index.html 修改如下：</description></item><item><title>[SignalR] Websocket 即時聊天程式(二) - 後端 Token 授權</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_2_issue_token/</link><pubDate>Sat, 07 Nov 2020 01:35:45 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_2_issue_token/</guid><description>SignalR驗證方式 SignalR 的授權可以選擇使用 Cookie 或 Bearer Token：
Cookie: 驗證方法與一般網頁別無二致，較容易實作但缺點是只能用於瀏覽器(browser-specific)。 Bearer Token 可通用於網頁和 App (或提供任何應用程式)，使用 Token 做登入能夠讓應用程式更容易實作其他使用者端，如果有其他的伺服器簽發 Token，更容易整合至單一登入(Single Sign-On)，也是官方建議使用的方式，以下假設簽發 Token 與 SignalR 伺服器為同一台進行實作。 將 Token 驗證實作至伺服器之前，讓我們先練習實作一支簽發 Token 的 API。
以 Option pattern 取得 JWT 設定 這裡練習 Option pattern，以獲取 appsetting.json 當中 JWT 相關設定的強型別支援：
appsetting.json 將 JWT 相關的設定寫到 appsetting.json 當中： { &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; } }, &amp;#34;JWT&amp;#34;: { &amp;#34;Issuer&amp;#34;: &amp;#34;Naxo&amp;#34;, &amp;#34;Expires&amp;#34;: &amp;#34;1440&amp;#34;, // 憑證有效分鐘數 &amp;#34;SignKey&amp;#34;: &amp;#34;myNameIsTigernaxo,ThisIsMyPersonalBlog&amp;#34; // 設定簽發/解密憑證的對稱式加密金鑰 }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34; }</description></item><item><title>[SignalR] Websocket 即時聊天程式(一) - 建立專案</title><link>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_1_start/</link><pubDate>Tue, 03 Nov 2020 05:46:45 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/dotnet/startup-signalr/guild_1_start/</guid><description>這個系列會官方文件為主，保留必要的部分，並視情況修改部份程式、添加說明文字。
建立 SignalR 專案 這個範例設定用靜態 html 做前端，這樣之後要做前後端分離也更容易一些，之後會用到 web api 請求登入 Token，所以起始一個 web api 專案：
# 建立專案 dotnet new webapi -o SignalR # 以 VS Code 打開專案 code -r signalr 建立 SignalR 中樞 在.NET Core 3.1 當中使用 SignalR 伺服器端不再需要安裝額外的套件，直接將 SignalR 注入服務容器就能使用， SignalR 的 Hub 中文名稱就叫做中樞，在專案中新增資料夾 Hubs 用來專門存放 Hub 實作類別，並在 Hubs 中新增檔案 ChatHub.cs，內容如下：
using Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace SignalR.Hubs { // 這就是所謂的 SignalR 中樞 public class ChatHub : Hub { // 這是提供 Client (js)端呼叫的方法，後面是這個方法接受的參數 public async Task SendMessage(string user, string message) { // 針對每個以連線的客戶端呼叫 ReceiceMassage 方法，並傳送參數 user、message await Clients.</description></item><item><title>[Linux] CentOS 8 設定網路靜態IP</title><link>https://tigernaxojr.github.io/blog/posts/linux/centos8-static-ip/</link><pubDate>Tue, 16 Jun 2020 09:37:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/linux/centos8-static-ip/</guid><description>查詢IP $ ip a 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:85:fe:50 brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute enp0s3 valid_lft forever preferred_lft forever inet6 fe80::98e4:9fbc:ba91:db3f/64 scope link noprefixroute valid_lft forever preferred_lft forever 修改網路設定 修改網路介面設置如下，檔案名稱預設為ifcfg-網路介面(網路卡)名稱，舉例來說安裝好 CentOS 預設的網路卡 enp0s3 設定檔：/etc/sysconfig/network-scripts/ifcfg-enp0s3</description></item><item><title>[Linux] Ubuntu 20.4 以 netplan 設定網路靜態IP</title><link>https://tigernaxojr.github.io/blog/posts/linux/ubuntu204-static-ip/</link><pubDate>Sat, 13 Jun 2020 09:37:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/linux/ubuntu204-static-ip/</guid><description>Ubuntu 自 17.10 以後就可以用 netplan 設置網卡~
檢查網路介面 以 ip a 可以看到我的 ubuntu 有2個網路介面分別是 lo、enp0s3，對應到 loopback、有線網卡
$ ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:6a:7b:e3 brd ff:ff:ff:ff:ff:ff inet 10.</description></item><item><title>[JS] Object 常用方法</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-obj-func/</link><pubDate>Wed, 20 May 2020 23:31:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-obj-func/</guid><description>紀錄常用的 Object 方法，細節可以到MDN看
Object.create Object.create(proto, [propertiesObject])
以傳入的參數作為prototype建立一個新物件，這個方法只能複製只帶有 primitive type 無法 deep copy，建立的物件所帶的函式、巢狀物件、Array等等…都和 prototype 共用。
以特定Object 作為 Prototype 建立新物件 const objParent = { parentFeild: &amp;#39;parent feild&amp;#39;, parentFunc: function () { console.log(&amp;#39;This is parent Func&amp;#39;) }, deepObj: { a: 1, b: 2, }, } // 以 objParent 作為 prototype 建立 obj 物件 const obj = Object.create(objParent) // objFeild 只存在 obj 上 obj.objFeild = &amp;#39;obj feild&amp;#39; // 可從建立的 obj 呼叫 prototype 的屬性, 方法 obj.</description></item><item><title>[JS] JavaScript 當中的原型繼承鏈模型</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-prototype/</link><pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-prototype/</guid><description>基於原型 (Prototype-Based) 的 JavaScript 一般物件導向式(OOP; Object Oriented Programming) 程式語言 (如：java、c++、c#) 當中的物件是由類別模板 (class) 產生實體物件 (instance)，實體物件的屬性各自獨立。類別模板上可設置共用的靜態資源包含靜態方法 (static method)、靜態屬性 (static field)，而這些靜態資源可以在沒有建立實體的情況下透過類別名稱直接取用。
JavaScript 中的物件通常隸屬於另一個物件，這種隸屬關係類似物件導向語言的繼承，而在這種關係中的上層物件稱為原型 (Prototype)。原型本身又有自己所屬的原型，這種物件層層繼承的關係稱為原型鏈 (Prototype Chain)，幾乎所有物件的最上層原型是一個構造函數叫做 Object 的物件。
因此一般物件導向式語言稱為基於類別 (Class-Based) 的語言；而 Javascript 是基於原型 (Prototype-Based) 的語言。
建立物件原型 JavaScript 本身沒有類別模板的概念，是以構造函數 (constructor) 建立物件，物件可以將 constructor 屬性指向構造函數，但並非所有物件都有構造函數，具有構造函數的物件可直接以構造函數產生原型鏈下一層物件；不具有構造函數的物件只能在其他物件建立完成後，以其他方式設置為其他物件的原型。
建立原型的方法就是直接宣告一個函數，JavaScript 會自動把該函數作為構造函數，並自動建立一個隸屬於 Object.prototype 之下的匿名物件，並把宣告的函數指定給該匿名物件的 constructor 屬性。
// 宣告一個函數 Foo function Foo (){} // Foo.prototype 在 Foo 被宣告時自動建立 Foo.prototype // {constructor: ƒ} // Foo.prototype 的 constructor 屬性自動指向 Foo Foo.prototype.constructor === Foo // true 建立物件 透過構造函數 // 建立一個物件 let bar = new Foo{} // {} 直接對變數賦值 JavaScript 對變數賦值底層行為：以 Object 構造函數建立物件，然後對物件並賦值（故賦值發生在物件建立之後）</description></item><item><title>[TS] Typescript 在標準內建物件加上屬性</title><link>https://tigernaxojr.github.io/blog/posts/typescript/ts-extend-global-obj/</link><pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/typescript/ts-extend-global-obj/</guid><description>宣告 這個動作是 Extends Array Interface
interface Array&amp;lt;T&amp;gt; { newfunc(o: T): Array&amp;lt;T&amp;gt;; } Array.prototype.newfunc = function (o) { // some code return this; } 使用 使用者要先拿到被 extend 的 interface
declare global { interface Array&amp;lt;T&amp;gt; { newfunc(o: T): Array&amp;lt;T&amp;gt;; } } Reference stackoverflow - extending array in typescript bobbyhadz - typescript-array-extend</description></item><item><title>[JS] Array 常用方法</title><link>https://tigernaxojr.github.io/blog/posts/javascript/js-arr-func/</link><pubDate>Wed, 29 Apr 2020 23:31:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/javascript/js-arr-func/</guid><description>紀錄常用的 Array 方法，細節可以到MDN看
陣列操作 尾端彈出 Array.prototype.pop()、推入 Array.prototype.push() arr.pop()
arr.push(element1[, &amp;hellip;[, elementN]])
const arr=[1, 2, 3, 4] arr.pop() console.log(arr) // [1, 2, 3] arr.push(5) console.log(arr) // [1, 2, 3, 5] 首端彈出 Array.prototype.shift()、推入 Array.prototype.unshift() arr.shift()
arr.unshift(element1[, &amp;hellip;[, elementN]])
const arr=[1, 2, 3, 4] arr.shift() console.log(arr) // [2, 3, 4] arr.unshift(0) console.log(arr) // [0, 2, 3, 4] 指定位置插入/移除/取代 Array.prototype.splice() let arrRemoved = arr.splice(start[, deleteCount[, item1[, item2[, &amp;hellip;]]]])
可以說式集移除、插入、取代(移除+插入)於一身的重要函式，並且將被移除的區段做為新陣列回傳，可根據傳入的參數將使用場景分類如下表，可幫助理解：
添加item 不添加item deleteCount=0 在現有位置添加元素 (無意義) deleteCount&amp;gt;0 取代現有元素 範圍移除元素 範圍移除元素 const arr=[0, 1, 2, 3, 4, 5, 6] // 移除索引位置3的元素，移除範圍為1 let removed = arr.</description></item><item><title>[台灣杉] 一鍵登入國網中心台灣杉(Taiwania)</title><link>https://tigernaxojr.github.io/blog/posts/other/taiwania_login_oneclick/</link><pubDate>Wed, 23 Jan 2019 09:37:18 +0800</pubDate><guid>https://tigernaxojr.github.io/blog/posts/other/taiwania_login_oneclick/</guid><description>台灣杉(Taiwania)是國網中心2018年啟用的超級電腦，登入時密碼必須附加OTP (One-time Password)，國網中心建議取得OTP的方式是從驗證器取得OTP密碼，但這樣的方式每次都需要打開驗證器(手機、chrome插件… etc)，並且需要手動輸入OTP，下面分享我從Windows以及Linux環境下登入台灣杉所使用的一鍵登入方式。
OTP的演算法可粗分為HOTP (HMAC-based OTP)；以及基於HOTP的TOTP (Time-based OTP)，我們不必瞭解演算法細節，只需知道台灣杉採用Base32編碼作為TOTP金鑰(Secret)，時間間格為30秒，每30秒可以根據”Secret”與”當前時間區間”以sha1演算法生成一次性密碼(OTP，或稱為Key)，由於這是單向加密的過程所以無法用時間區間與Key逆推Secret，並且OTP在成功使用一次之後就會被伺服器廢棄，以確保安全性。
注意事項 校時
由於TOTP演算法依據當前時間區間產生OTP，如果作業系統的時間不正確則會產生錯誤的OTP，在Windows環境之下可以到國家時間與頻率標準實驗室的網頁下載NTP校時軟體，以管理員身分執行進行校時；Linux環境可以用下述指令更新時間並寫入BIOS： # 從NTP時間伺服器進行網路校時 sudo ntpdate time.stdtime.gov.tw # 將更新的時間寫入BIOS sudo hwclock -w 所有登入行為之間必須間隔30秒(包含使用winSCP、putty或從Linux直接登入)。 每個30秒區間會產生一個OTP，而該OTP一旦經過使用就會被伺服器廢棄而無法再用。我曾經連續登入以為程式壞了，但核對iService上面產生的密碼又是一樣的，後來才發現這件事…中間還因為連登失敗太頻繁還被鎖，因此記得間隔30秒以上再登入。 Linux要登入台灣衫需要將台灣衫加入know host，以生醫節點為例: ssh-keyscan 140.110.148.14 1&amp;gt;&amp;gt;~/.ssh/known_hosts 2&amp;gt;/dev/null 從Windows登入台灣杉 前置工作 安裝Go，並設置GOPATH。 安裝putty。 安裝WinSCP。 知道怎麼打開windows的命令提示字元 (WIN+R、鍵入cmd、enter)。 編譯TOTP產生器 取得TOTP套件
go get github.com/pquerna/otp/totp 撰寫程式碼main.go
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/pquerna/otp/totp&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) func main() { secret := os.Args[1] code, _ := totp.GenerateCode(secret, time.Now().UTC()) fmt.Print(code) } 編譯
go build -o taiwaniaOTP.exe main.</description></item></channel></rss>